
External_Interrupt_Test_SL_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001738  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00001738  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000013c  2000000c  00001744  0002000c  2**2
                  ALLOC
  3 .stack        00002000  20000148  00001880  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   00023d50  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003e83  00000000  00000000  00043ddd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004345  00000000  00000000  00047c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000500  00000000  00000000  0004bfa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000500  00000000  00000000  0004c4a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000143ee  00000000  00000000  0004c9a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d123  00000000  00000000  00060d93  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005ffbf  00000000  00000000  0006deb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000b68  00000000  00000000  000cde78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	48 21 00 20 f1 13 00 00 ed 13 00 00 ed 13 00 00     H!. ............
	...
      2c:	ed 13 00 00 00 00 00 00 00 00 00 00 ed 13 00 00     ................
      3c:	a5 07 00 00 ed 13 00 00 ed 13 00 00 ed 13 00 00     ................
      4c:	ed 13 00 00 51 01 00 00 ed 13 00 00 ed 13 00 00     ....Q...........
      5c:	8d 0c 00 00 9d 0c 00 00 ad 0c 00 00 bd 0c 00 00     ................
      6c:	cd 0c 00 00 dd 0c 00 00 ed 13 00 00 ed 13 00 00     ................
      7c:	ed 13 00 00 ed 13 00 00 ed 13 00 00 ed 13 00 00     ................
      8c:	ed 13 00 00 ed 13 00 00 ed 13 00 00 ed 13 00 00     ................
      9c:	ed 13 00 00 ed 13 00 00                             ........

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	2000000c 	.word	0x2000000c
      c4:	00000000 	.word	0x00000000
      c8:	00001738 	.word	0x00001738

000000cc <frame_dummy>:
      cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      ce:	b510      	push	{r4, lr}
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd10      	pop	{r4, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	20000010 	.word	0x20000010
      f8:	00001738 	.word	0x00001738
      fc:	00001738 	.word	0x00001738
     100:	00000000 	.word	0x00000000

00000104 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     104:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     106:	2a00      	cmp	r2, #0
     108:	d001      	beq.n	10e <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     10a:	0018      	movs	r0, r3
     10c:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     10e:	008b      	lsls	r3, r1, #2
     110:	4a06      	ldr	r2, [pc, #24]	; (12c <extint_register_callback+0x28>)
     112:	589b      	ldr	r3, [r3, r2]
     114:	2b00      	cmp	r3, #0
     116:	d003      	beq.n	120 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
     118:	4283      	cmp	r3, r0
     11a:	d005      	beq.n	128 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
     11c:	231d      	movs	r3, #29
     11e:	e7f4      	b.n	10a <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     120:	0089      	lsls	r1, r1, #2
     122:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     124:	2300      	movs	r3, #0
     126:	e7f0      	b.n	10a <extint_register_callback+0x6>
		return STATUS_OK;
     128:	2300      	movs	r3, #0
     12a:	e7ee      	b.n	10a <extint_register_callback+0x6>
     12c:	20000064 	.word	0x20000064

00000130 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     130:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     132:	2900      	cmp	r1, #0
     134:	d001      	beq.n	13a <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
     136:	0018      	movs	r0, r3
     138:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     13a:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     13c:	281f      	cmp	r0, #31
     13e:	d800      	bhi.n	142 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
     140:	4a02      	ldr	r2, [pc, #8]	; (14c <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
     142:	2301      	movs	r3, #1
     144:	4083      	lsls	r3, r0
     146:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
     148:	2300      	movs	r3, #0
     14a:	e7f4      	b.n	136 <extint_chan_enable_callback+0x6>
     14c:	40001800 	.word	0x40001800

00000150 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     150:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     152:	2200      	movs	r2, #0
     154:	4b10      	ldr	r3, [pc, #64]	; (198 <EIC_Handler+0x48>)
     156:	701a      	strb	r2, [r3, #0]
     158:	2300      	movs	r3, #0
     15a:	4910      	ldr	r1, [pc, #64]	; (19c <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     15c:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     15e:	4e10      	ldr	r6, [pc, #64]	; (1a0 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     160:	4c0d      	ldr	r4, [pc, #52]	; (198 <EIC_Handler+0x48>)
     162:	e00a      	b.n	17a <EIC_Handler+0x2a>
		return eics[eic_index];
     164:	490d      	ldr	r1, [pc, #52]	; (19c <EIC_Handler+0x4c>)
     166:	e008      	b.n	17a <EIC_Handler+0x2a>
     168:	7823      	ldrb	r3, [r4, #0]
     16a:	3301      	adds	r3, #1
     16c:	b2db      	uxtb	r3, r3
     16e:	7023      	strb	r3, [r4, #0]
     170:	2b0f      	cmp	r3, #15
     172:	d810      	bhi.n	196 <EIC_Handler+0x46>
		return NULL;
     174:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     176:	2b1f      	cmp	r3, #31
     178:	d9f4      	bls.n	164 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     17a:	0028      	movs	r0, r5
     17c:	4018      	ands	r0, r3
     17e:	2201      	movs	r2, #1
     180:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     182:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     184:	4210      	tst	r0, r2
     186:	d0ef      	beq.n	168 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     188:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     18a:	009b      	lsls	r3, r3, #2
     18c:	599b      	ldr	r3, [r3, r6]
     18e:	2b00      	cmp	r3, #0
     190:	d0ea      	beq.n	168 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     192:	4798      	blx	r3
     194:	e7e8      	b.n	168 <EIC_Handler+0x18>
			}
		}
	}
}
     196:	bd70      	pop	{r4, r5, r6, pc}
     198:	20000060 	.word	0x20000060
     19c:	40001800 	.word	0x40001800
     1a0:	20000064 	.word	0x20000064

000001a4 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     1a4:	4a04      	ldr	r2, [pc, #16]	; (1b8 <_extint_enable+0x14>)
     1a6:	7813      	ldrb	r3, [r2, #0]
     1a8:	2102      	movs	r1, #2
     1aa:	430b      	orrs	r3, r1
     1ac:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     1ae:	7853      	ldrb	r3, [r2, #1]
     1b0:	b25b      	sxtb	r3, r3
     1b2:	2b00      	cmp	r3, #0
     1b4:	dbfb      	blt.n	1ae <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     1b6:	4770      	bx	lr
     1b8:	40001800 	.word	0x40001800

000001bc <_system_extint_init>:
{
     1bc:	b500      	push	{lr}
     1be:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     1c0:	4a12      	ldr	r2, [pc, #72]	; (20c <_system_extint_init+0x50>)
     1c2:	6993      	ldr	r3, [r2, #24]
     1c4:	2140      	movs	r1, #64	; 0x40
     1c6:	430b      	orrs	r3, r1
     1c8:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     1ca:	a901      	add	r1, sp, #4
     1cc:	2300      	movs	r3, #0
     1ce:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     1d0:	2003      	movs	r0, #3
     1d2:	4b0f      	ldr	r3, [pc, #60]	; (210 <_system_extint_init+0x54>)
     1d4:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     1d6:	2003      	movs	r0, #3
     1d8:	4b0e      	ldr	r3, [pc, #56]	; (214 <_system_extint_init+0x58>)
     1da:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     1dc:	4a0e      	ldr	r2, [pc, #56]	; (218 <_system_extint_init+0x5c>)
     1de:	7813      	ldrb	r3, [r2, #0]
     1e0:	2101      	movs	r1, #1
     1e2:	430b      	orrs	r3, r1
     1e4:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     1e6:	7853      	ldrb	r3, [r2, #1]
     1e8:	b25b      	sxtb	r3, r3
     1ea:	2b00      	cmp	r3, #0
     1ec:	dbfb      	blt.n	1e6 <_system_extint_init+0x2a>
     1ee:	4b0b      	ldr	r3, [pc, #44]	; (21c <_system_extint_init+0x60>)
     1f0:	0019      	movs	r1, r3
     1f2:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     1f4:	2200      	movs	r2, #0
     1f6:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     1f8:	4299      	cmp	r1, r3
     1fa:	d1fc      	bne.n	1f6 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     1fc:	2210      	movs	r2, #16
     1fe:	4b08      	ldr	r3, [pc, #32]	; (220 <_system_extint_init+0x64>)
     200:	601a      	str	r2, [r3, #0]
	_extint_enable();
     202:	4b08      	ldr	r3, [pc, #32]	; (224 <_system_extint_init+0x68>)
     204:	4798      	blx	r3
}
     206:	b003      	add	sp, #12
     208:	bd00      	pop	{pc}
     20a:	46c0      	nop			; (mov r8, r8)
     20c:	40000400 	.word	0x40000400
     210:	00001295 	.word	0x00001295
     214:	00001209 	.word	0x00001209
     218:	40001800 	.word	0x40001800
     21c:	20000064 	.word	0x20000064
     220:	e000e100 	.word	0xe000e100
     224:	000001a5 	.word	0x000001a5

00000228 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     228:	2300      	movs	r3, #0
     22a:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     22c:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     22e:	2201      	movs	r2, #1
     230:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     232:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     234:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     236:	3302      	adds	r3, #2
     238:	72c3      	strb	r3, [r0, #11]
}
     23a:	4770      	bx	lr

0000023c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     23c:	b5f0      	push	{r4, r5, r6, r7, lr}
     23e:	b083      	sub	sp, #12
     240:	0005      	movs	r5, r0
     242:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     244:	a901      	add	r1, sp, #4
     246:	2300      	movs	r3, #0
     248:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     24a:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     24c:	7923      	ldrb	r3, [r4, #4]
     24e:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     250:	7a23      	ldrb	r3, [r4, #8]
     252:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     254:	7820      	ldrb	r0, [r4, #0]
     256:	4b15      	ldr	r3, [pc, #84]	; (2ac <extint_chan_set_config+0x70>)
     258:	4798      	blx	r3
		return NULL;
     25a:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
     25c:	2d1f      	cmp	r5, #31
     25e:	d800      	bhi.n	262 <extint_chan_set_config+0x26>
		return eics[eic_index];
     260:	4813      	ldr	r0, [pc, #76]	; (2b0 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     262:	2207      	movs	r2, #7
     264:	402a      	ands	r2, r5
     266:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     268:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     26a:	7aa3      	ldrb	r3, [r4, #10]
     26c:	2b00      	cmp	r3, #0
     26e:	d001      	beq.n	274 <extint_chan_set_config+0x38>
     270:	2308      	movs	r3, #8
     272:	431f      	orrs	r7, r3
     274:	08eb      	lsrs	r3, r5, #3
     276:	009b      	lsls	r3, r3, #2
     278:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     27a:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     27c:	260f      	movs	r6, #15
     27e:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     280:	43b1      	bics	r1, r6
			(new_config << config_pos);
     282:	4097      	lsls	r7, r2
     284:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     286:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     288:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     28a:	7a63      	ldrb	r3, [r4, #9]
     28c:	2b00      	cmp	r3, #0
     28e:	d106      	bne.n	29e <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     290:	6943      	ldr	r3, [r0, #20]
     292:	2201      	movs	r2, #1
     294:	40aa      	lsls	r2, r5
     296:	4393      	bics	r3, r2
     298:	6143      	str	r3, [r0, #20]
	}
}
     29a:	b003      	add	sp, #12
     29c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     29e:	6942      	ldr	r2, [r0, #20]
     2a0:	2301      	movs	r3, #1
     2a2:	40ab      	lsls	r3, r5
     2a4:	4313      	orrs	r3, r2
     2a6:	6143      	str	r3, [r0, #20]
     2a8:	e7f7      	b.n	29a <extint_chan_set_config+0x5e>
     2aa:	46c0      	nop			; (mov r8, r8)
     2ac:	0000138d 	.word	0x0000138d
     2b0:	40001800 	.word	0x40001800

000002b4 <i2c_slave_init>:
 */
enum status_code i2c_slave_init(
		struct i2c_slave_module *const module,
		Sercom *const hw,
		const struct i2c_slave_config *const config)
{
     2b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     2b6:	46ce      	mov	lr, r9
     2b8:	4647      	mov	r7, r8
     2ba:	b580      	push	{r7, lr}
     2bc:	b083      	sub	sp, #12
     2be:	0005      	movs	r5, r0
     2c0:	000c      	movs	r4, r1
     2c2:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     2c4:	6029      	str	r1, [r5, #0]

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);

	/* Check if module is enabled. */
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_ENABLE) {
     2c6:	680b      	ldr	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     2c8:	201c      	movs	r0, #28
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_ENABLE) {
     2ca:	079b      	lsls	r3, r3, #30
     2cc:	d504      	bpl.n	2d8 <i2c_slave_init+0x24>
	/* Set SERCOM module to operate in I2C slave mode. */
	i2c_hw->CTRLA.reg = SERCOM_I2CS_CTRLA_MODE_I2C_SLAVE;

	/* Set config and return status. */
	return _i2c_slave_set_config(module, config);
}
     2ce:	b003      	add	sp, #12
     2d0:	bc0c      	pop	{r2, r3}
     2d2:	4690      	mov	r8, r2
     2d4:	4699      	mov	r9, r3
     2d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_SWRST) {
     2d8:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     2da:	3817      	subs	r0, #23
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_SWRST) {
     2dc:	07db      	lsls	r3, r3, #31
     2de:	d4f6      	bmi.n	2ce <i2c_slave_init+0x1a>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     2e0:	0008      	movs	r0, r1
     2e2:	4b41      	ldr	r3, [pc, #260]	; (3e8 <i2c_slave_init+0x134>)
     2e4:	4699      	mov	r9, r3
     2e6:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     2e8:	4a40      	ldr	r2, [pc, #256]	; (3ec <i2c_slave_init+0x138>)
     2ea:	6a11      	ldr	r1, [r2, #32]
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     2ec:	1c83      	adds	r3, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     2ee:	2701      	movs	r7, #1
     2f0:	46b8      	mov	r8, r7
     2f2:	409f      	lsls	r7, r3
     2f4:	003b      	movs	r3, r7
     2f6:	430b      	orrs	r3, r1
     2f8:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     2fa:	a901      	add	r1, sp, #4
     2fc:	7cb3      	ldrb	r3, [r6, #18]
     2fe:	700b      	strb	r3, [r1, #0]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     300:	300d      	adds	r0, #13
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     302:	b2c3      	uxtb	r3, r0
     304:	001f      	movs	r7, r3
     306:	0018      	movs	r0, r3
     308:	4b39      	ldr	r3, [pc, #228]	; (3f0 <i2c_slave_init+0x13c>)
     30a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     30c:	0038      	movs	r0, r7
     30e:	4b39      	ldr	r3, [pc, #228]	; (3f4 <i2c_slave_init+0x140>)
     310:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     312:	7cb0      	ldrb	r0, [r6, #18]
     314:	2100      	movs	r1, #0
     316:	4b38      	ldr	r3, [pc, #224]	; (3f8 <i2c_slave_init+0x144>)
     318:	4798      	blx	r3
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     31a:	6828      	ldr	r0, [r5, #0]
     31c:	47c8      	blx	r9
     31e:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _i2c_slave_interrupt_handler);
     320:	4936      	ldr	r1, [pc, #216]	; (3fc <i2c_slave_init+0x148>)
     322:	4b37      	ldr	r3, [pc, #220]	; (400 <i2c_slave_init+0x14c>)
     324:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     326:	00bf      	lsls	r7, r7, #2
     328:	4b36      	ldr	r3, [pc, #216]	; (404 <i2c_slave_init+0x150>)
     32a:	50fd      	str	r5, [r7, r3]
	module->registered_callback = 0;
     32c:	2300      	movs	r3, #0
     32e:	2224      	movs	r2, #36	; 0x24
     330:	54ab      	strb	r3, [r5, r2]
	module->enabled_callback = 0;
     332:	3201      	adds	r2, #1
     334:	54ab      	strb	r3, [r5, r2]
	module->buffer_length = 0;
     336:	84eb      	strh	r3, [r5, #38]	; 0x26
	module->nack_on_address = config->enable_nack_on_address;
     338:	7c73      	ldrb	r3, [r6, #17]
     33a:	722b      	strb	r3, [r5, #8]
	i2c_hw->CTRLA.reg = SERCOM_I2CS_CTRLA_MODE_I2C_SLAVE;
     33c:	2310      	movs	r3, #16
     33e:	6023      	str	r3, [r4, #0]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     340:	682c      	ldr	r4, [r5, #0]
	module->buffer_timeout = config->buffer_timeout;
     342:	8933      	ldrh	r3, [r6, #8]
     344:	80eb      	strh	r3, [r5, #6]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     346:	2380      	movs	r3, #128	; 0x80
     348:	466a      	mov	r2, sp
     34a:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     34c:	2300      	movs	r3, #0
     34e:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     350:	466b      	mov	r3, sp
     352:	4642      	mov	r2, r8
     354:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     356:	2300      	movs	r3, #0
     358:	466a      	mov	r2, sp
     35a:	70d3      	strb	r3, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     35c:	6970      	ldr	r0, [r6, #20]
	uint32_t pad1 = config->pinmux_pad1;
     35e:	69b5      	ldr	r5, [r6, #24]
	if (pad0 == PINMUX_DEFAULT) {
     360:	2800      	cmp	r0, #0
     362:	d035      	beq.n	3d0 <i2c_slave_init+0x11c>
	pin_conf.mux_position = pad0 & 0xFFFF;
     364:	466b      	mov	r3, sp
     366:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     368:	2302      	movs	r3, #2
     36a:	466a      	mov	r2, sp
     36c:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     36e:	0c00      	lsrs	r0, r0, #16
     370:	b2c0      	uxtb	r0, r0
     372:	4669      	mov	r1, sp
     374:	4b24      	ldr	r3, [pc, #144]	; (408 <i2c_slave_init+0x154>)
     376:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     378:	2d00      	cmp	r5, #0
     37a:	d02e      	beq.n	3da <i2c_slave_init+0x126>
	pin_conf.mux_position = pad1 & 0xFFFF;
     37c:	466b      	mov	r3, sp
     37e:	701d      	strb	r5, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     380:	2302      	movs	r3, #2
     382:	466a      	mov	r2, sp
     384:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     386:	0c2d      	lsrs	r5, r5, #16
     388:	b2e8      	uxtb	r0, r5
     38a:	4669      	mov	r1, sp
     38c:	4b1e      	ldr	r3, [pc, #120]	; (408 <i2c_slave_init+0x154>)
     38e:	4798      	blx	r3
	if (config->run_in_standby || system_is_debugger_present()) {
     390:	7cf3      	ldrb	r3, [r6, #19]
		tmp_ctrla = SERCOM_I2CS_CTRLA_RUNSTDBY;
     392:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     394:	2b00      	cmp	r3, #0
     396:	d104      	bne.n	3a2 <i2c_slave_init+0xee>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     398:	4b1c      	ldr	r3, [pc, #112]	; (40c <i2c_slave_init+0x158>)
     39a:	789b      	ldrb	r3, [r3, #2]
     39c:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CS_CTRLA_RUNSTDBY;
     39e:	0fdb      	lsrs	r3, r3, #31
     3a0:	01da      	lsls	r2, r3, #7
	i2c_hw->CTRLA.reg |= tmp_ctrla;
     3a2:	6821      	ldr	r1, [r4, #0]
			(config->scl_low_timeout << SERCOM_I2CS_CTRLA_LOWTOUT_Pos);
     3a4:	7f33      	ldrb	r3, [r6, #28]
     3a6:	079b      	lsls	r3, r3, #30
	i2c_hw->CTRLA.reg |= tmp_ctrla;
     3a8:	430b      	orrs	r3, r1
     3aa:	6871      	ldr	r1, [r6, #4]
     3ac:	430b      	orrs	r3, r1
     3ae:	4313      	orrs	r3, r2
     3b0:	6023      	str	r3, [r4, #0]
	i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_SMEN | config->address_mode;
     3b2:	8972      	ldrh	r2, [r6, #10]
     3b4:	2380      	movs	r3, #128	; 0x80
     3b6:	005b      	lsls	r3, r3, #1
     3b8:	4313      	orrs	r3, r2
     3ba:	6063      	str	r3, [r4, #4]
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
     3bc:	89b3      	ldrh	r3, [r6, #12]
     3be:	005b      	lsls	r3, r3, #1
			config->address_mask << SERCOM_I2CS_ADDR_ADDRMASK_Pos |
     3c0:	89f2      	ldrh	r2, [r6, #14]
     3c2:	0452      	lsls	r2, r2, #17
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
     3c4:	4313      	orrs	r3, r2
			config->enable_general_call_address << SERCOM_I2CS_ADDR_GENCEN_Pos;
     3c6:	7c32      	ldrb	r2, [r6, #16]
			config->address_mask << SERCOM_I2CS_ADDR_ADDRMASK_Pos |
     3c8:	4313      	orrs	r3, r2
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
     3ca:	6163      	str	r3, [r4, #20]
	return _i2c_slave_set_config(module, config);
     3cc:	2000      	movs	r0, #0
     3ce:	e77e      	b.n	2ce <i2c_slave_init+0x1a>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     3d0:	2100      	movs	r1, #0
     3d2:	0020      	movs	r0, r4
     3d4:	4b0e      	ldr	r3, [pc, #56]	; (410 <i2c_slave_init+0x15c>)
     3d6:	4798      	blx	r3
     3d8:	e7c4      	b.n	364 <i2c_slave_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     3da:	2101      	movs	r1, #1
     3dc:	0020      	movs	r0, r4
     3de:	4b0c      	ldr	r3, [pc, #48]	; (410 <i2c_slave_init+0x15c>)
     3e0:	4798      	blx	r3
     3e2:	0005      	movs	r5, r0
     3e4:	e7ca      	b.n	37c <i2c_slave_init+0xc8>
     3e6:	46c0      	nop			; (mov r8, r8)
     3e8:	00000be5 	.word	0x00000be5
     3ec:	40000400 	.word	0x40000400
     3f0:	00001295 	.word	0x00001295
     3f4:	00001209 	.word	0x00001209
     3f8:	00000a21 	.word	0x00000a21
     3fc:	00000481 	.word	0x00000481
     400:	00000c21 	.word	0x00000c21
     404:	20000130 	.word	0x20000130
     408:	0000138d 	.word	0x0000138d
     40c:	41002000 	.word	0x41002000
     410:	00000a6d 	.word	0x00000a6d

00000414 <i2c_slave_register_callback>:
 */
void i2c_slave_register_callback(
		struct i2c_slave_module *const module,
		i2c_slave_callback_t callback,
		enum i2c_slave_callback callback_type)
{
     414:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback. */
	module->callbacks[callback_type] = callback;
     416:	1c93      	adds	r3, r2, #2
     418:	009b      	lsls	r3, r3, #2
     41a:	18c3      	adds	r3, r0, r3
     41c:	6059      	str	r1, [r3, #4]

	/* Set corresponding bit to set callback as initiated. */
	module->registered_callback |= (1 << callback_type);
     41e:	2424      	movs	r4, #36	; 0x24
     420:	5d03      	ldrb	r3, [r0, r4]
     422:	2101      	movs	r1, #1
     424:	4091      	lsls	r1, r2
     426:	430b      	orrs	r3, r1
     428:	b2db      	uxtb	r3, r3
     42a:	5503      	strb	r3, [r0, r4]
}
     42c:	bd10      	pop	{r4, pc}

0000042e <i2c_slave_read_packet_job>:
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy doing async operation. */
	if (module->buffer_remaining > 0) {
     42e:	8d02      	ldrh	r2, [r0, #40]	; 0x28
		return STATUS_BUSY;
     430:	2305      	movs	r3, #5
	if (module->buffer_remaining > 0) {
     432:	2a00      	cmp	r2, #0
     434:	d001      	beq.n	43a <i2c_slave_read_packet_job+0xc>
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
			SERCOM_I2CS_INTFLAG_DRDY | SERCOM_I2CS_INTFLAG_PREC;

	/* Read will begin when master initiates the transfer */
	return STATUS_OK;
}
     436:	0018      	movs	r0, r3
     438:	4770      	bx	lr
	module->buffer           = packet->data;
     43a:	684b      	ldr	r3, [r1, #4]
     43c:	62c3      	str	r3, [r0, #44]	; 0x2c
	module->buffer_remaining = packet->data_length;
     43e:	880b      	ldrh	r3, [r1, #0]
     440:	8503      	strh	r3, [r0, #40]	; 0x28
	module->buffer_length    = packet->data_length;
     442:	880b      	ldrh	r3, [r1, #0]
     444:	84c3      	strh	r3, [r0, #38]	; 0x26
	module->status           = STATUS_BUSY;
     446:	3205      	adds	r2, #5
     448:	2331      	movs	r3, #49	; 0x31
     44a:	54c2      	strb	r2, [r0, r3]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     44c:	6803      	ldr	r3, [r0, #0]
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
     44e:	3202      	adds	r2, #2
     450:	735a      	strb	r2, [r3, #13]
	return STATUS_OK;
     452:	2300      	movs	r3, #0
     454:	e7ef      	b.n	436 <i2c_slave_read_packet_job+0x8>

00000456 <i2c_slave_write_packet_job>:
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy doing async operation. */
	if (module->buffer_remaining > 0) {
     456:	8d02      	ldrh	r2, [r0, #40]	; 0x28
		return STATUS_BUSY;
     458:	2305      	movs	r3, #5
	if (module->buffer_remaining > 0) {
     45a:	2a00      	cmp	r2, #0
     45c:	d001      	beq.n	462 <i2c_slave_write_packet_job+0xc>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
			SERCOM_I2CS_INTFLAG_DRDY | SERCOM_I2CS_INTFLAG_PREC;

	return STATUS_OK;
}
     45e:	0018      	movs	r0, r3
     460:	4770      	bx	lr
	module->buffer           = packet->data;
     462:	684b      	ldr	r3, [r1, #4]
     464:	62c3      	str	r3, [r0, #44]	; 0x2c
	module->buffer_remaining = packet->data_length;
     466:	880b      	ldrh	r3, [r1, #0]
     468:	8503      	strh	r3, [r0, #40]	; 0x28
	module->buffer_length    = packet->data_length;
     46a:	880b      	ldrh	r3, [r1, #0]
     46c:	84c3      	strh	r3, [r0, #38]	; 0x26
	module->status           = STATUS_BUSY;
     46e:	3205      	adds	r2, #5
     470:	2331      	movs	r3, #49	; 0x31
     472:	54c2      	strb	r2, [r0, r3]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     474:	6803      	ldr	r3, [r0, #0]
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
     476:	3202      	adds	r2, #2
     478:	735a      	strb	r2, [r3, #13]
	return STATUS_OK;
     47a:	2300      	movs	r3, #0
     47c:	e7ef      	b.n	45e <i2c_slave_write_packet_job+0x8>
	...

00000480 <_i2c_slave_interrupt_handler>:
 *
 * \param[in] instance Sercom instance that triggered the interrupt
 */
void _i2c_slave_interrupt_handler(
		uint8_t instance)
{
     480:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling. */
	struct i2c_slave_module *module =
     482:	0080      	lsls	r0, r0, #2
     484:	4b9a      	ldr	r3, [pc, #616]	; (6f0 <_i2c_slave_interrupt_handler+0x270>)
     486:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_slave_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     488:	6825      	ldr	r5, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
     48a:	2325      	movs	r3, #37	; 0x25
     48c:	5ce3      	ldrb	r3, [r4, r3]
     48e:	2224      	movs	r2, #36	; 0x24
     490:	5ca6      	ldrb	r6, [r4, r2]
	uint8_t callback_mask =
     492:	401e      	ands	r6, r3


	if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH) {
     494:	7bab      	ldrb	r3, [r5, #14]
     496:	079b      	lsls	r3, r3, #30
     498:	d400      	bmi.n	49c <_i2c_slave_interrupt_handler+0x1c>
     49a:	e095      	b.n	5c8 <_i2c_slave_interrupt_handler+0x148>
	/* Address match */
		/* Check if last transfer is done - repeated start */
		if (module->buffer_length != module->buffer_remaining &&
     49c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     49e:	b29b      	uxth	r3, r3
     4a0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
     4a2:	4293      	cmp	r3, r2
     4a4:	d00d      	beq.n	4c2 <_i2c_slave_interrupt_handler+0x42>
				module->transfer_direction == I2C_TRANSFER_WRITE) {
     4a6:	2330      	movs	r3, #48	; 0x30
     4a8:	5ce3      	ldrb	r3, [r4, r3]
		if (module->buffer_length != module->buffer_remaining &&
     4aa:	2b00      	cmp	r3, #0
     4ac:	d109      	bne.n	4c2 <_i2c_slave_interrupt_handler+0x42>

			module->status = STATUS_OK;
     4ae:	2231      	movs	r2, #49	; 0x31
     4b0:	54a3      	strb	r3, [r4, r2]
			module->buffer_length = 0;
     4b2:	84e3      	strh	r3, [r4, #38]	; 0x26
			module->buffer_remaining = 0;
     4b4:	8523      	strh	r3, [r4, #40]	; 0x28

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))) {
     4b6:	07b3      	lsls	r3, r6, #30
     4b8:	d50b      	bpl.n	4d2 <_i2c_slave_interrupt_handler+0x52>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_COMPLETE](module);
     4ba:	6923      	ldr	r3, [r4, #16]
     4bc:	0020      	movs	r0, r4
     4be:	4798      	blx	r3
     4c0:	e007      	b.n	4d2 <_i2c_slave_interrupt_handler+0x52>
			}
		} else if (module->buffer_length != module->buffer_remaining &&
     4c2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     4c4:	b29b      	uxth	r3, r3
     4c6:	429a      	cmp	r2, r3
     4c8:	d003      	beq.n	4d2 <_i2c_slave_interrupt_handler+0x52>
				module->transfer_direction == I2C_TRANSFER_READ) {
     4ca:	2330      	movs	r3, #48	; 0x30
     4cc:	5ce3      	ldrb	r3, [r4, r3]
		} else if (module->buffer_length != module->buffer_remaining &&
     4ce:	2b01      	cmp	r3, #1
     4d0:	d022      	beq.n	518 <_i2c_slave_interrupt_handler+0x98>
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))) {
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
			}
		}

		if (i2c_hw->STATUS.reg & (SERCOM_I2CS_STATUS_BUSERR |
     4d2:	8a2a      	ldrh	r2, [r5, #16]
     4d4:	2343      	movs	r3, #67	; 0x43
     4d6:	421a      	tst	r2, r3
     4d8:	d004      	beq.n	4e4 <_i2c_slave_interrupt_handler+0x64>
				SERCOM_I2CS_STATUS_COLL | SERCOM_I2CS_STATUS_LOWTOUT)) {
			/* An error occurred in last packet transfer */
			module->status = STATUS_ERR_IO;
     4da:	2210      	movs	r2, #16
     4dc:	3b12      	subs	r3, #18
     4de:	54e2      	strb	r2, [r4, r3]

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER))) {
     4e0:	06b3      	lsls	r3, r6, #26
     4e2:	d424      	bmi.n	52e <_i2c_slave_interrupt_handler+0xae>
				module->callbacks[I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER](module);
			}
		}
		if (module->nack_on_address) {
     4e4:	7a23      	ldrb	r3, [r4, #8]
     4e6:	2b00      	cmp	r3, #0
     4e8:	d125      	bne.n	536 <_i2c_slave_interrupt_handler+0xb6>
			/* NACK address, workaround 13574 */
			_i2c_slave_set_ctrlb_ackact(module, false);
		} else if (i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_DIR) {
     4ea:	8a2b      	ldrh	r3, [r5, #16]
     4ec:	071b      	lsls	r3, r3, #28
     4ee:	d54a      	bpl.n	586 <_i2c_slave_interrupt_handler+0x106>
			/* Set transfer direction in module instance */
			module->transfer_direction = I2C_TRANSFER_READ;
     4f0:	2201      	movs	r2, #1
     4f2:	2330      	movs	r3, #48	; 0x30
     4f4:	54e2      	strb	r2, [r4, r3]

			/* Read request from master */
			if (callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST)) {
     4f6:	0773      	lsls	r3, r6, #29
     4f8:	d438      	bmi.n	56c <_i2c_slave_interrupt_handler+0xec>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_REQUEST](module);
			}

			if (module->buffer_length == 0) {
     4fa:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     4fc:	b29b      	uxth	r3, r3
     4fe:	2b00      	cmp	r3, #0
     500:	d138      	bne.n	574 <_i2c_slave_interrupt_handler+0xf4>
		bool send_ack)
{
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     502:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     504:	4b7b      	ldr	r3, [pc, #492]	; (6f4 <_i2c_slave_interrupt_handler+0x274>)
     506:	4798      	blx	r3

#if (SAMD20 || SAMD21 || SAMD09 || SAMD10 || SAMD11 || SAML21 || SAMDA1 ||  \
		SAML22 || SAMC20 || SAMC21 || SAMHA1 || (SAMHA0) || SAMR30)
	/* Workaround, Following two write are atomic */
	system_interrupt_enter_critical_section();
	i2c_hw->STATUS.reg = 0;
     508:	2300      	movs	r3, #0
     50a:	822b      	strh	r3, [r5, #16]

	if (send_ack == true) {
		i2c_hw->CTRLB.reg = 0;
	}
	else {
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     50c:	2380      	movs	r3, #128	; 0x80
     50e:	02db      	lsls	r3, r3, #11
     510:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     512:	4b79      	ldr	r3, [pc, #484]	; (6f8 <_i2c_slave_interrupt_handler+0x278>)
     514:	4798      	blx	r3
     516:	e018      	b.n	54a <_i2c_slave_interrupt_handler+0xca>
			module->status = STATUS_OK;
     518:	2300      	movs	r3, #0
     51a:	2231      	movs	r2, #49	; 0x31
     51c:	54a3      	strb	r3, [r4, r2]
			module->buffer_length = 0;
     51e:	84e3      	strh	r3, [r4, #38]	; 0x26
			module->buffer_remaining = 0;
     520:	8523      	strh	r3, [r4, #40]	; 0x28
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))) {
     522:	07f3      	lsls	r3, r6, #31
     524:	d5d5      	bpl.n	4d2 <_i2c_slave_interrupt_handler+0x52>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
     526:	68e3      	ldr	r3, [r4, #12]
     528:	0020      	movs	r0, r4
     52a:	4798      	blx	r3
     52c:	e7d1      	b.n	4d2 <_i2c_slave_interrupt_handler+0x52>
				module->callbacks[I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER](module);
     52e:	6a23      	ldr	r3, [r4, #32]
     530:	0020      	movs	r0, r4
     532:	4798      	blx	r3
     534:	e7d6      	b.n	4e4 <_i2c_slave_interrupt_handler+0x64>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     536:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     538:	4b6e      	ldr	r3, [pc, #440]	; (6f4 <_i2c_slave_interrupt_handler+0x274>)
     53a:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     53c:	2300      	movs	r3, #0
     53e:	822b      	strh	r3, [r5, #16]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     540:	2380      	movs	r3, #128	; 0x80
     542:	02db      	lsls	r3, r3, #11
     544:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     546:	4b6c      	ldr	r3, [pc, #432]	; (6f8 <_i2c_slave_interrupt_handler+0x278>)
     548:	4798      	blx	r3
		struct i2c_slave_module *const module)
{
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     54a:	6823      	ldr	r3, [r4, #0]
	/*
	 * Below code instead i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_CMD(0x3);
	 * CMD=0x3 clears all interrupts, so to keep the result similar
	 * PREC is cleared if it was set
	 */
	if (i2c_hw->INTFLAG.bit.PREC) {
     54c:	7b9a      	ldrb	r2, [r3, #14]
     54e:	07d2      	lsls	r2, r2, #31
     550:	d501      	bpl.n	556 <_i2c_slave_interrupt_handler+0xd6>
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
     552:	2201      	movs	r2, #1
     554:	739a      	strb	r2, [r3, #14]
	}
	i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_AMATCH;
     556:	2202      	movs	r2, #2
     558:	739a      	strb	r2, [r3, #14]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     55a:	6824      	ldr	r4, [r4, #0]
	cpu_irq_enter_critical();
     55c:	4b65      	ldr	r3, [pc, #404]	; (6f4 <_i2c_slave_interrupt_handler+0x274>)
     55e:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     560:	2300      	movs	r3, #0
     562:	8223      	strh	r3, [r4, #16]
		i2c_hw->CTRLB.reg = 0;
     564:	6063      	str	r3, [r4, #4]
	cpu_irq_leave_critical();
     566:	4b64      	ldr	r3, [pc, #400]	; (6f8 <_i2c_slave_interrupt_handler+0x278>)
     568:	4798      	blx	r3
			} else {
				_i2c_slave_write(module);
			}
		}
	}
}
     56a:	bd70      	pop	{r4, r5, r6, pc}
				module->callbacks[I2C_SLAVE_CALLBACK_READ_REQUEST](module);
     56c:	6963      	ldr	r3, [r4, #20]
     56e:	0020      	movs	r0, r4
     570:	4798      	blx	r3
     572:	e7c2      	b.n	4fa <_i2c_slave_interrupt_handler+0x7a>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     574:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     576:	4b5f      	ldr	r3, [pc, #380]	; (6f4 <_i2c_slave_interrupt_handler+0x274>)
     578:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     57a:	2300      	movs	r3, #0
     57c:	822b      	strh	r3, [r5, #16]
		i2c_hw->CTRLB.reg = 0;
     57e:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     580:	4b5d      	ldr	r3, [pc, #372]	; (6f8 <_i2c_slave_interrupt_handler+0x278>)
     582:	4798      	blx	r3
     584:	e7e1      	b.n	54a <_i2c_slave_interrupt_handler+0xca>
			module->transfer_direction = I2C_TRANSFER_WRITE;
     586:	2200      	movs	r2, #0
     588:	2330      	movs	r3, #48	; 0x30
     58a:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_REQUEST)) {
     58c:	0733      	lsls	r3, r6, #28
     58e:	d40e      	bmi.n	5ae <_i2c_slave_interrupt_handler+0x12e>
			if (module->buffer_length == 0) {
     590:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     592:	b29b      	uxth	r3, r3
     594:	2b00      	cmp	r3, #0
     596:	d10e      	bne.n	5b6 <_i2c_slave_interrupt_handler+0x136>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     598:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     59a:	4b56      	ldr	r3, [pc, #344]	; (6f4 <_i2c_slave_interrupt_handler+0x274>)
     59c:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     59e:	2300      	movs	r3, #0
     5a0:	822b      	strh	r3, [r5, #16]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     5a2:	2380      	movs	r3, #128	; 0x80
     5a4:	02db      	lsls	r3, r3, #11
     5a6:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     5a8:	4b53      	ldr	r3, [pc, #332]	; (6f8 <_i2c_slave_interrupt_handler+0x278>)
     5aa:	4798      	blx	r3
     5ac:	e7cd      	b.n	54a <_i2c_slave_interrupt_handler+0xca>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_REQUEST](module);
     5ae:	69a3      	ldr	r3, [r4, #24]
     5b0:	0020      	movs	r0, r4
     5b2:	4798      	blx	r3
     5b4:	e7ec      	b.n	590 <_i2c_slave_interrupt_handler+0x110>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     5b6:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     5b8:	4b4e      	ldr	r3, [pc, #312]	; (6f4 <_i2c_slave_interrupt_handler+0x274>)
     5ba:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     5bc:	2300      	movs	r3, #0
     5be:	822b      	strh	r3, [r5, #16]
		i2c_hw->CTRLB.reg = 0;
     5c0:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     5c2:	4b4d      	ldr	r3, [pc, #308]	; (6f8 <_i2c_slave_interrupt_handler+0x278>)
     5c4:	4798      	blx	r3
     5c6:	e7c0      	b.n	54a <_i2c_slave_interrupt_handler+0xca>
	} else if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC) {
     5c8:	7bab      	ldrb	r3, [r5, #14]
     5ca:	07db      	lsls	r3, r3, #31
     5cc:	d52e      	bpl.n	62c <_i2c_slave_interrupt_handler+0x1ac>
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
     5ce:	2301      	movs	r3, #1
     5d0:	73ab      	strb	r3, [r5, #14]
		i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_PREC | SERCOM_I2CS_INTFLAG_DRDY;
     5d2:	3304      	adds	r3, #4
     5d4:	732b      	strb	r3, [r5, #12]
		if (!((module->enabled_callback & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST))
     5d6:	3320      	adds	r3, #32
     5d8:	5ce3      	ldrb	r3, [r4, r3]
     5da:	075b      	lsls	r3, r3, #29
     5dc:	d405      	bmi.n	5ea <_i2c_slave_interrupt_handler+0x16a>
				|| (module->enabled_callback & (1 << I2C_SLAVE_CALLBACK_WRITE_REQUEST)))) {
     5de:	2325      	movs	r3, #37	; 0x25
     5e0:	5ce3      	ldrb	r3, [r4, r3]
		if (!((module->enabled_callback & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST))
     5e2:	071b      	lsls	r3, r3, #28
     5e4:	d401      	bmi.n	5ea <_i2c_slave_interrupt_handler+0x16a>
			i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_AMATCH;
     5e6:	2302      	movs	r3, #2
     5e8:	732b      	strb	r3, [r5, #12]
		if (!(module->status == STATUS_ERR_OVERFLOW || module->status == STATUS_ERR_IO)) {
     5ea:	2331      	movs	r3, #49	; 0x31
     5ec:	5ce3      	ldrb	r3, [r4, r3]
     5ee:	2b1e      	cmp	r3, #30
     5f0:	d0bb      	beq.n	56a <_i2c_slave_interrupt_handler+0xea>
     5f2:	2331      	movs	r3, #49	; 0x31
     5f4:	5ce3      	ldrb	r3, [r4, r3]
     5f6:	2b10      	cmp	r3, #16
     5f8:	d0b7      	beq.n	56a <_i2c_slave_interrupt_handler+0xea>
			module->status = STATUS_OK;
     5fa:	2300      	movs	r3, #0
     5fc:	2231      	movs	r2, #49	; 0x31
     5fe:	54a3      	strb	r3, [r4, r2]
			module->buffer_length = 0;
     600:	84e3      	strh	r3, [r4, #38]	; 0x26
			module->buffer_remaining = 0;
     602:	8523      	strh	r3, [r4, #40]	; 0x28
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))
     604:	07b3      	lsls	r3, r6, #30
     606:	d503      	bpl.n	610 <_i2c_slave_interrupt_handler+0x190>
					&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     608:	2330      	movs	r3, #48	; 0x30
     60a:	5ce3      	ldrb	r3, [r4, r3]
     60c:	2b00      	cmp	r3, #0
     60e:	d009      	beq.n	624 <_i2c_slave_interrupt_handler+0x1a4>
			} else if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))
     610:	07f3      	lsls	r3, r6, #31
     612:	d5aa      	bpl.n	56a <_i2c_slave_interrupt_handler+0xea>
					&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     614:	2330      	movs	r3, #48	; 0x30
     616:	5ce3      	ldrb	r3, [r4, r3]
     618:	2b01      	cmp	r3, #1
     61a:	d1a6      	bne.n	56a <_i2c_slave_interrupt_handler+0xea>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
     61c:	68e3      	ldr	r3, [r4, #12]
     61e:	0020      	movs	r0, r4
     620:	4798      	blx	r3
     622:	e7a2      	b.n	56a <_i2c_slave_interrupt_handler+0xea>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_COMPLETE](module);
     624:	6923      	ldr	r3, [r4, #16]
     626:	0020      	movs	r0, r4
     628:	4798      	blx	r3
     62a:	e79e      	b.n	56a <_i2c_slave_interrupt_handler+0xea>
	} else if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY) {
     62c:	7bab      	ldrb	r3, [r5, #14]
     62e:	075b      	lsls	r3, r3, #29
     630:	d59b      	bpl.n	56a <_i2c_slave_interrupt_handler+0xea>
		if (module->buffer_remaining <= 0 ||
     632:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     634:	2b00      	cmp	r3, #0
     636:	d01d      	beq.n	674 <_i2c_slave_interrupt_handler+0x1f4>
				(module->transfer_direction == I2C_TRANSFER_READ &&
     638:	2230      	movs	r2, #48	; 0x30
     63a:	5ca2      	ldrb	r2, [r4, r2]
		if (module->buffer_remaining <= 0 ||
     63c:	2a01      	cmp	r2, #1
     63e:	d012      	beq.n	666 <_i2c_slave_interrupt_handler+0x1e6>
		} else if (module->buffer_length > 0 && module->buffer_remaining > 0) {
     640:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     642:	b29b      	uxth	r3, r3
     644:	2b00      	cmp	r3, #0
     646:	d100      	bne.n	64a <_i2c_slave_interrupt_handler+0x1ca>
     648:	e78f      	b.n	56a <_i2c_slave_interrupt_handler+0xea>
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     64a:	2330      	movs	r3, #48	; 0x30
     64c:	5ce3      	ldrb	r3, [r4, r3]
     64e:	2b00      	cmp	r3, #0
     650:	d043      	beq.n	6da <_i2c_slave_interrupt_handler+0x25a>
	i2c_hw->DATA.reg = *(module->buffer++);
     652:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     654:	1c5a      	adds	r2, r3, #1
     656:	62e2      	str	r2, [r4, #44]	; 0x2c
     658:	781b      	ldrb	r3, [r3, #0]
     65a:	b2db      	uxtb	r3, r3
     65c:	762b      	strb	r3, [r5, #24]
	module->buffer_remaining--;
     65e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     660:	3b01      	subs	r3, #1
     662:	8523      	strh	r3, [r4, #40]	; 0x28
}
     664:	e781      	b.n	56a <_i2c_slave_interrupt_handler+0xea>
				(module->buffer_length > module->buffer_remaining) &&
     666:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
     668:	b292      	uxth	r2, r2
				(module->transfer_direction == I2C_TRANSFER_READ &&
     66a:	4293      	cmp	r3, r2
     66c:	d2e8      	bcs.n	640 <_i2c_slave_interrupt_handler+0x1c0>
				(i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_RXNACK))) {
     66e:	8a2b      	ldrh	r3, [r5, #16]
				(module->buffer_length > module->buffer_remaining) &&
     670:	075b      	lsls	r3, r3, #29
     672:	d5e5      	bpl.n	640 <_i2c_slave_interrupt_handler+0x1c0>
			module->buffer_remaining = 0;
     674:	2300      	movs	r3, #0
     676:	8523      	strh	r3, [r4, #40]	; 0x28
			module->buffer_length = 0;
     678:	84e3      	strh	r3, [r4, #38]	; 0x26
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     67a:	3330      	adds	r3, #48	; 0x30
     67c:	5ce3      	ldrb	r3, [r4, r3]
     67e:	2b00      	cmp	r3, #0
     680:	d117      	bne.n	6b2 <_i2c_slave_interrupt_handler+0x232>
	cpu_irq_enter_critical();
     682:	4b1c      	ldr	r3, [pc, #112]	; (6f4 <_i2c_slave_interrupt_handler+0x274>)
     684:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     686:	2300      	movs	r3, #0
     688:	822b      	strh	r3, [r5, #16]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     68a:	2380      	movs	r3, #128	; 0x80
     68c:	02db      	lsls	r3, r3, #11
     68e:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     690:	4b19      	ldr	r3, [pc, #100]	; (6f8 <_i2c_slave_interrupt_handler+0x278>)
     692:	4798      	blx	r3
				i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
     694:	686a      	ldr	r2, [r5, #4]
     696:	2380      	movs	r3, #128	; 0x80
     698:	029b      	lsls	r3, r3, #10
     69a:	4313      	orrs	r3, r2
     69c:	606b      	str	r3, [r5, #4]
				module->status = STATUS_ERR_OVERFLOW;
     69e:	221e      	movs	r2, #30
     6a0:	2331      	movs	r3, #49	; 0x31
     6a2:	54e2      	strb	r2, [r4, r3]
				if (callback_mask & (1 << I2C_SLAVE_CALLBACK_ERROR)) {
     6a4:	06f3      	lsls	r3, r6, #27
     6a6:	d400      	bmi.n	6aa <_i2c_slave_interrupt_handler+0x22a>
     6a8:	e75f      	b.n	56a <_i2c_slave_interrupt_handler+0xea>
					module->callbacks[I2C_SLAVE_CALLBACK_ERROR](module);
     6aa:	69e3      	ldr	r3, [r4, #28]
     6ac:	0020      	movs	r0, r4
     6ae:	4798      	blx	r3
     6b0:	e75b      	b.n	56a <_i2c_slave_interrupt_handler+0xea>
	cpu_irq_enter_critical();
     6b2:	4b10      	ldr	r3, [pc, #64]	; (6f4 <_i2c_slave_interrupt_handler+0x274>)
     6b4:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     6b6:	2300      	movs	r3, #0
     6b8:	822b      	strh	r3, [r5, #16]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     6ba:	2380      	movs	r3, #128	; 0x80
     6bc:	02db      	lsls	r3, r3, #11
     6be:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     6c0:	4b0d      	ldr	r3, [pc, #52]	; (6f8 <_i2c_slave_interrupt_handler+0x278>)
     6c2:	4798      	blx	r3
				i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
     6c4:	686a      	ldr	r2, [r5, #4]
     6c6:	2380      	movs	r3, #128	; 0x80
     6c8:	029b      	lsls	r3, r3, #10
     6ca:	4313      	orrs	r3, r2
     6cc:	606b      	str	r3, [r5, #4]
				module->status = STATUS_OK;
     6ce:	2331      	movs	r3, #49	; 0x31
     6d0:	2200      	movs	r2, #0
     6d2:	54e2      	strb	r2, [r4, r3]
				i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_DRDY;
     6d4:	3b2d      	subs	r3, #45	; 0x2d
     6d6:	732b      	strb	r3, [r5, #12]
     6d8:	e747      	b.n	56a <_i2c_slave_interrupt_handler+0xea>
	*(module->buffer++) = i2c_hw->DATA.reg;
     6da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     6dc:	1c53      	adds	r3, r2, #1
     6de:	62e3      	str	r3, [r4, #44]	; 0x2c
     6e0:	7e2b      	ldrb	r3, [r5, #24]
     6e2:	b2db      	uxtb	r3, r3
     6e4:	7013      	strb	r3, [r2, #0]
	module->buffer_remaining--;
     6e6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     6e8:	3b01      	subs	r3, #1
     6ea:	8523      	strh	r3, [r4, #40]	; 0x28
     6ec:	e73d      	b.n	56a <_i2c_slave_interrupt_handler+0xea>
     6ee:	46c0      	nop			; (mov r8, r8)
     6f0:	20000130 	.word	0x20000130
     6f4:	00000e0d 	.word	0x00000e0d
     6f8:	00000e4d 	.word	0x00000e4d

000006fc <configMotors>:

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     6fc:	4b02      	ldr	r3, [pc, #8]	; (708 <configMotors+0xc>)
     6fe:	2201      	movs	r2, #1
     700:	615a      	str	r2, [r3, #20]
     702:	3201      	adds	r2, #1
     704:	615a      	str	r2, [r3, #20]

	//TODO: Expand Daughter Card Motor Config
	port_pin_set_output_level(DIR_PIN, LOW);
	port_pin_set_output_level(PLS_PIN, LOW);

 }
     706:	4770      	bx	lr
     708:	41004480 	.word	0x41004480

0000070c <motorCCW>:
 * @return				- void
 *
 * @note				- 
 ******************************************************************************************************/
 void motorCCW(int NumSpeed)
 {
     70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     70e:	46ce      	mov	lr, r9
     710:	4647      	mov	r7, r8
     712:	b580      	push	{r7, lr}
     714:	4681      	mov	r9, r0
	//Rotates CW, slower.
	 for(int i = 0; i < NumSpeed; i++)
     716:	2800      	cmp	r0, #0
     718:	dd12      	ble.n	740 <motorCCW+0x34>
     71a:	2600      	movs	r6, #0
     71c:	4d0a      	ldr	r5, [pc, #40]	; (748 <motorCCW+0x3c>)
     71e:	2301      	movs	r3, #1
     720:	4698      	mov	r8, r3
	 {
		port_pin_set_output_level(DIR_PIN, LOW);
		delay_ms(1);
     722:	4c0a      	ldr	r4, [pc, #40]	; (74c <motorCCW+0x40>)
     724:	4643      	mov	r3, r8
     726:	616b      	str	r3, [r5, #20]
     728:	2001      	movs	r0, #1
     72a:	47a0      	blx	r4
     72c:	2702      	movs	r7, #2
     72e:	616f      	str	r7, [r5, #20]
		port_pin_set_output_level(PLS_PIN, LOW);
		delay_ms(10);
     730:	200a      	movs	r0, #10
     732:	47a0      	blx	r4
		port_base->OUTSET.reg = pin_mask;
     734:	61af      	str	r7, [r5, #24]
		port_pin_set_output_level(PLS_PIN, HIGH);
		delay_ms(5);
     736:	2005      	movs	r0, #5
     738:	47a0      	blx	r4
	 for(int i = 0; i < NumSpeed; i++)
     73a:	3601      	adds	r6, #1
     73c:	45b1      	cmp	r9, r6
     73e:	d1f1      	bne.n	724 <motorCCW+0x18>
		}


 }
     740:	bc0c      	pop	{r2, r3}
     742:	4690      	mov	r8, r2
     744:	4699      	mov	r9, r3
     746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     748:	41004480 	.word	0x41004480
     74c:	00000d2d 	.word	0x00000d2d

00000750 <motorCW>:
 * @return				- void
 *
 * @note				- 
 ******************************************************************************************************/
 void motorCW(int NumSpeed)
 {
     750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     752:	46ce      	mov	lr, r9
     754:	4647      	mov	r7, r8
     756:	b580      	push	{r7, lr}
     758:	4681      	mov	r9, r0
	for(int i = 0; i < NumSpeed; i++)
     75a:	2800      	cmp	r0, #0
     75c:	dd12      	ble.n	784 <motorCW+0x34>
     75e:	2600      	movs	r6, #0
     760:	4d0a      	ldr	r5, [pc, #40]	; (78c <motorCW+0x3c>)
     762:	2301      	movs	r3, #1
     764:	4698      	mov	r8, r3
	{
		port_pin_set_output_level(DIR_PIN, HIGH);
		delay_ms(1);
     766:	4c0a      	ldr	r4, [pc, #40]	; (790 <motorCW+0x40>)
     768:	4643      	mov	r3, r8
     76a:	61ab      	str	r3, [r5, #24]
     76c:	2001      	movs	r0, #1
     76e:	47a0      	blx	r4
		port_base->OUTCLR.reg = pin_mask;
     770:	2702      	movs	r7, #2
     772:	616f      	str	r7, [r5, #20]
		port_pin_set_output_level(PLS_PIN, LOW);
		delay_ms(10);
     774:	200a      	movs	r0, #10
     776:	47a0      	blx	r4
		port_base->OUTSET.reg = pin_mask;
     778:	61af      	str	r7, [r5, #24]
		port_pin_set_output_level(PLS_PIN, HIGH);
		delay_ms(5);
     77a:	2005      	movs	r0, #5
     77c:	47a0      	blx	r4
	for(int i = 0; i < NumSpeed; i++)
     77e:	3601      	adds	r6, #1
     780:	45b1      	cmp	r9, r6
     782:	d1f1      	bne.n	768 <motorCW+0x18>
		}

 }
     784:	bc0c      	pop	{r2, r3}
     786:	4690      	mov	r8, r2
     788:	4699      	mov	r9, r3
     78a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     78c:	41004480 	.word	0x41004480
     790:	00000d2d 	.word	0x00000d2d

00000794 <extint_detection_callback_limitSW>:
 * @return				- void
 *
 * @note				- 
 ******************************************************************************************************/
void extint_detection_callback_limitSW(void)
{
     794:	b510      	push	{r4, lr}
	delay_ms(100);
     796:	2064      	movs	r0, #100	; 0x64
     798:	4b01      	ldr	r3, [pc, #4]	; (7a0 <extint_detection_callback_limitSW+0xc>)
     79a:	4798      	blx	r3
     79c:	bd10      	pop	{r4, pc}
     79e:	46c0      	nop			; (mov r8, r8)
     7a0:	00000d2d 	.word	0x00000d2d

000007a4 <SysTick_Handler>:
}
     7a4:	4770      	bx	lr
	...

000007a8 <config_whoami>:
 {
     7a8:	b082      	sub	sp, #8
	return (port_base->IN.reg & pin_mask);
     7aa:	4b0f      	ldr	r3, [pc, #60]	; (7e8 <config_whoami+0x40>)
     7ac:	6a1b      	ldr	r3, [r3, #32]
     7ae:	0edb      	lsrs	r3, r3, #27
     7b0:	2201      	movs	r2, #1
	strap0 = port_pin_get_input_level(I2C_STRAP_0);
     7b2:	4013      	ands	r3, r2
     7b4:	4669      	mov	r1, sp
     7b6:	71cb      	strb	r3, [r1, #7]
     7b8:	4b0c      	ldr	r3, [pc, #48]	; (7ec <config_whoami+0x44>)
     7ba:	6a1b      	ldr	r3, [r3, #32]
     7bc:	0ddb      	lsrs	r3, r3, #23
	strap1 = port_pin_get_input_level(I2C_STRAP_1);
     7be:	401a      	ands	r2, r3
     7c0:	718a      	strb	r2, [r1, #6]
	strapID = ( (strap1 << 1) | (strap0) );
     7c2:	798a      	ldrb	r2, [r1, #6]
     7c4:	79cb      	ldrb	r3, [r1, #7]
     7c6:	0052      	lsls	r2, r2, #1
     7c8:	4313      	orrs	r3, r2
     7ca:	b2db      	uxtb	r3, r3
     7cc:	466a      	mov	r2, sp
     7ce:	7153      	strb	r3, [r2, #5]
	I2C_SL_ADDR = ( I2C_BASE_SL_ADDR | (strapID << 2) );
     7d0:	7953      	ldrb	r3, [r2, #5]
     7d2:	009b      	lsls	r3, r3, #2
     7d4:	2212      	movs	r2, #18
     7d6:	4313      	orrs	r3, r2
     7d8:	b2db      	uxtb	r3, r3
     7da:	4a05      	ldr	r2, [pc, #20]	; (7f0 <config_whoami+0x48>)
     7dc:	7013      	strb	r3, [r2, #0]
	cmd_resp.ID = I2C_SL_ADDR;
     7de:	4a05      	ldr	r2, [pc, #20]	; (7f4 <config_whoami+0x4c>)
     7e0:	7193      	strb	r3, [r2, #6]
 }// config_whoami
     7e2:	b002      	add	sp, #8
     7e4:	4770      	bx	lr
     7e6:	46c0      	nop			; (mov r8, r8)
     7e8:	41004400 	.word	0x41004400
     7ec:	41004480 	.word	0x41004480
     7f0:	200000a4 	.word	0x200000a4
     7f4:	200000a8 	.word	0x200000a8

000007f8 <configure_extint_channel>:
{
     7f8:	b510      	push	{r4, lr}
     7fa:	b084      	sub	sp, #16
	extint_chan_get_config_defaults(&config_extint_chan);
     7fc:	ac01      	add	r4, sp, #4
     7fe:	0020      	movs	r0, r4
     800:	4b07      	ldr	r3, [pc, #28]	; (820 <configure_extint_channel+0x28>)
     802:	4798      	blx	r3
	config_extint_chan.gpio_pin = LIMIT_SW_EIC_PIN;
     804:	2329      	movs	r3, #41	; 0x29
     806:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = LIMIT_SW_EIC_MUX;
     808:	2300      	movs	r3, #0
     80a:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
     80c:	3301      	adds	r3, #1
     80e:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     810:	3301      	adds	r3, #1
     812:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(LIMIT_SW_EIC_LINE, &config_extint_chan);
     814:	0021      	movs	r1, r4
     816:	2009      	movs	r0, #9
     818:	4b02      	ldr	r3, [pc, #8]	; (824 <configure_extint_channel+0x2c>)
     81a:	4798      	blx	r3
}
     81c:	b004      	add	sp, #16
     81e:	bd10      	pop	{r4, pc}
     820:	00000229 	.word	0x00000229
     824:	0000023d 	.word	0x0000023d

00000828 <configure_extint_callbacks>:
{
     828:	b510      	push	{r4, lr}
	extint_register_callback(extint_detection_callback_limitSW, LIMIT_SW_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
     82a:	2200      	movs	r2, #0
     82c:	2109      	movs	r1, #9
     82e:	4804      	ldr	r0, [pc, #16]	; (840 <configure_extint_callbacks+0x18>)
     830:	4b04      	ldr	r3, [pc, #16]	; (844 <configure_extint_callbacks+0x1c>)
     832:	4798      	blx	r3
	extint_chan_enable_callback(LIMIT_SW_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
     834:	2100      	movs	r1, #0
     836:	2009      	movs	r0, #9
     838:	4b03      	ldr	r3, [pc, #12]	; (848 <configure_extint_callbacks+0x20>)
     83a:	4798      	blx	r3
}
     83c:	bd10      	pop	{r4, pc}
     83e:	46c0      	nop			; (mov r8, r8)
     840:	00000795 	.word	0x00000795
     844:	00000105 	.word	0x00000105
     848:	00000131 	.word	0x00000131

0000084c <sys_config>:
{
     84c:	b510      	push	{r4, lr}
	SysTick_Config(system_gclk_gen_get_hz(GCLK_GENERATOR_0));
     84e:	2000      	movs	r0, #0
     850:	4b12      	ldr	r3, [pc, #72]	; (89c <sys_config+0x50>)
     852:	4798      	blx	r3
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
     854:	3801      	subs	r0, #1
     856:	4b12      	ldr	r3, [pc, #72]	; (8a0 <sys_config+0x54>)
     858:	4298      	cmp	r0, r3
     85a:	d80d      	bhi.n	878 <sys_config+0x2c>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
     85c:	4a11      	ldr	r2, [pc, #68]	; (8a4 <sys_config+0x58>)
     85e:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     860:	4811      	ldr	r0, [pc, #68]	; (8a8 <sys_config+0x5c>)
     862:	6a03      	ldr	r3, [r0, #32]
     864:	021b      	lsls	r3, r3, #8
     866:	0a1b      	lsrs	r3, r3, #8
     868:	21c0      	movs	r1, #192	; 0xc0
     86a:	0609      	lsls	r1, r1, #24
     86c:	430b      	orrs	r3, r1
     86e:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
     870:	2300      	movs	r3, #0
     872:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
     874:	3307      	adds	r3, #7
     876:	6013      	str	r3, [r2, #0]
	config_whoami();	//Determine which motor board is connected to: before i2c_config
     878:	4b0c      	ldr	r3, [pc, #48]	; (8ac <sys_config+0x60>)
     87a:	4798      	blx	r3
	configure_extint_channel();
     87c:	4b0c      	ldr	r3, [pc, #48]	; (8b0 <sys_config+0x64>)
     87e:	4798      	blx	r3
	configure_extint_callbacks();
     880:	4b0c      	ldr	r3, [pc, #48]	; (8b4 <sys_config+0x68>)
     882:	4798      	blx	r3
	cpu_irq_enable();
     884:	2201      	movs	r2, #1
     886:	4b0c      	ldr	r3, [pc, #48]	; (8b8 <sys_config+0x6c>)
     888:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     88a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     88e:	b662      	cpsie	i
	configure_i2c_slave();
     890:	4b0a      	ldr	r3, [pc, #40]	; (8bc <sys_config+0x70>)
     892:	4798      	blx	r3
	configure_i2c_slave_callbacks();
     894:	4b0a      	ldr	r3, [pc, #40]	; (8c0 <sys_config+0x74>)
     896:	4798      	blx	r3
}
     898:	bd10      	pop	{r4, pc}
     89a:	46c0      	nop			; (mov r8, r8)
     89c:	0000117d 	.word	0x0000117d
     8a0:	00ffffff 	.word	0x00ffffff
     8a4:	e000e010 	.word	0xe000e010
     8a8:	e000ed00 	.word	0xe000ed00
     8ac:	000007a9 	.word	0x000007a9
     8b0:	000007f9 	.word	0x000007f9
     8b4:	00000829 	.word	0x00000829
     8b8:	20000008 	.word	0x20000008
     8bc:	00000939 	.word	0x00000939
     8c0:	000009b5 	.word	0x000009b5

000008c4 <i2c_write_complete_callback>:
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
     8c4:	2280      	movs	r2, #128	; 0x80
     8c6:	0392      	lsls	r2, r2, #14
     8c8:	4b01      	ldr	r3, [pc, #4]	; (8d0 <i2c_write_complete_callback+0xc>)
     8ca:	61da      	str	r2, [r3, #28]
 **********************************************************************/
void i2c_write_complete_callback(struct i2c_slave_module *const module)
{
	LED_Toggle(LED0);
	//Never happens
}
     8cc:	4770      	bx	lr
     8ce:	46c0      	nop			; (mov r8, r8)
     8d0:	41004400 	.word	0x41004400

000008d4 <i2c_read_complete_callback>:
     8d4:	2280      	movs	r2, #128	; 0x80
     8d6:	0392      	lsls	r2, r2, #14
     8d8:	4b04      	ldr	r3, [pc, #16]	; (8ec <i2c_read_complete_callback+0x18>)
     8da:	61da      	str	r2, [r3, #28]
 *						This is also triggered for master-write-addr prior to read
 **********************************************************************/
void i2c_read_complete_callback(struct i2c_slave_module *const module)
{
	LED_Toggle(LED0);
	if (cmd_sent.cmdID != 0)
     8dc:	4b04      	ldr	r3, [pc, #16]	; (8f0 <i2c_read_complete_callback+0x1c>)
     8de:	791b      	ldrb	r3, [r3, #4]
     8e0:	2b00      	cmp	r3, #0
     8e2:	d002      	beq.n	8ea <i2c_read_complete_callback+0x16>
	{
		//If new data, set flag to process data.
		flgcmdRx = TRUE;			
     8e4:	2201      	movs	r2, #1
     8e6:	4b03      	ldr	r3, [pc, #12]	; (8f4 <i2c_read_complete_callback+0x20>)
     8e8:	701a      	strb	r2, [r3, #0]
	}

}
     8ea:	4770      	bx	lr
     8ec:	41004400 	.word	0x41004400
     8f0:	200000c8 	.word	0x200000c8
     8f4:	200000d0 	.word	0x200000d0

000008f8 <i2c_read_request_callback>:
 * @return				- void
 *
 * @note				- I2C Read Callback
 **********************************************************************/
void i2c_read_request_callback(	struct i2c_slave_module *const module)
{
     8f8:	b510      	push	{r4, lr}
	/* Init i2c packet */
	//rw_packet.data_length = DATA_LENGTH;
	//rw_packet.data        = write_buffer;

	rw_packet.data_length = sizeof(cmd_resp);
     8fa:	4904      	ldr	r1, [pc, #16]	; (90c <i2c_read_request_callback+0x14>)
     8fc:	230c      	movs	r3, #12
     8fe:	800b      	strh	r3, [r1, #0]
	rw_packet.data = (uint8_t *)&cmd_resp;
     900:	4b03      	ldr	r3, [pc, #12]	; (910 <i2c_read_request_callback+0x18>)
     902:	604b      	str	r3, [r1, #4]

	/* Write buffer to master */
	i2c_slave_write_packet_job(module, &rw_packet);
     904:	4b03      	ldr	r3, [pc, #12]	; (914 <i2c_read_request_callback+0x1c>)
     906:	4798      	blx	r3
	
	//LED_Toggle(LED0);
}
     908:	bd10      	pop	{r4, pc}
     90a:	46c0      	nop			; (mov r8, r8)
     90c:	200000d4 	.word	0x200000d4
     910:	200000a8 	.word	0x200000a8
     914:	00000457 	.word	0x00000457

00000918 <i2c_write_request_callback>:
 * @return				- void
 *
 * @note				- I2C Write Callback
 **********************************************************************/
void i2c_write_request_callback(struct i2c_slave_module *const module)
{
     918:	b510      	push	{r4, lr}
	/* Init i2c packet */
	//rw_packet.data_length = DATA_LENGTH;
	//rw_packet.data        = read_buffer;
	rw_packet.data_length = sizeof(cmd_sent);
     91a:	4904      	ldr	r1, [pc, #16]	; (92c <i2c_write_request_callback+0x14>)
     91c:	2308      	movs	r3, #8
     91e:	800b      	strh	r3, [r1, #0]
	rw_packet.data = (uint8_t *)&cmd_sent;
     920:	4b03      	ldr	r3, [pc, #12]	; (930 <i2c_write_request_callback+0x18>)
     922:	604b      	str	r3, [r1, #4]


	/* Read buffer from master */
	if (i2c_slave_read_packet_job(module, &rw_packet) != STATUS_OK)
     924:	4b03      	ldr	r3, [pc, #12]	; (934 <i2c_write_request_callback+0x1c>)
     926:	4798      	blx	r3
	{
	}

}
     928:	bd10      	pop	{r4, pc}
     92a:	46c0      	nop			; (mov r8, r8)
     92c:	200000d4 	.word	0x200000d4
     930:	200000c8 	.word	0x200000c8
     934:	0000042f 	.word	0x0000042f

00000938 <configure_i2c_slave>:
{
     938:	b570      	push	{r4, r5, r6, lr}
static inline void i2c_slave_get_config_defaults(
		struct i2c_slave_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->enable_scl_low_timeout = false;
     93a:	4a17      	ldr	r2, [pc, #92]	; (998 <configure_i2c_slave+0x60>)
     93c:	2100      	movs	r1, #0
     93e:	7011      	strb	r1, [r2, #0]
	config->sda_hold_time = I2C_SLAVE_SDA_HOLD_TIME_300NS_600NS;
     940:	2380      	movs	r3, #128	; 0x80
     942:	039b      	lsls	r3, r3, #14
     944:	6053      	str	r3, [r2, #4]
	config->buffer_timeout = 65535;
     946:	2301      	movs	r3, #1
     948:	425b      	negs	r3, r3
     94a:	8113      	strh	r3, [r2, #8]
	config->address_mode = I2C_SLAVE_ADDRESS_MODE_MASK;
     94c:	2300      	movs	r3, #0
     94e:	8151      	strh	r1, [r2, #10]
	config->address = 0;
	config->address_mask = 0;
     950:	81d1      	strh	r1, [r2, #14]
#ifdef FEATURE_I2C_10_BIT_ADDRESS
	config->ten_bit_address = false;
#endif
	config->enable_general_call_address = false;
     952:	7413      	strb	r3, [r2, #16]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->transfer_speed = I2C_SLAVE_SPEED_STANDARD_AND_FAST;
#endif
#if I2C_SLAVE_CALLBACK_MODE == true
	config->enable_nack_on_address = false;
     954:	7453      	strb	r3, [r2, #17]
#endif
	config->generator_source = GCLK_GENERATOR_0;
     956:	7493      	strb	r3, [r2, #18]
	config->run_in_standby = false;
     958:	74d3      	strb	r3, [r2, #19]
	config->pinmux_pad0 = PINMUX_DEFAULT;
     95a:	6151      	str	r1, [r2, #20]
	config->pinmux_pad1 = PINMUX_DEFAULT;
     95c:	6191      	str	r1, [r2, #24]
	config->scl_low_timeout  = false;
     95e:	7713      	strb	r3, [r2, #28]
	config_i2c_slave.address      = cmd_resp.ID;
     960:	4b0e      	ldr	r3, [pc, #56]	; (99c <configure_i2c_slave+0x64>)
     962:	799b      	ldrb	r3, [r3, #6]
     964:	8193      	strh	r3, [r2, #12]
	i2c_slave_init(&i2c_slave_instance, CONF_I2C_SLAVE_MODULE, &config_i2c_slave);
     966:	4d0e      	ldr	r5, [pc, #56]	; (9a0 <configure_i2c_slave+0x68>)
     968:	490e      	ldr	r1, [pc, #56]	; (9a4 <configure_i2c_slave+0x6c>)
     96a:	0028      	movs	r0, r5
     96c:	4b0e      	ldr	r3, [pc, #56]	; (9a8 <configure_i2c_slave+0x70>)
     96e:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     970:	682c      	ldr	r4, [r5, #0]

#if I2C_SLAVE_CALLBACK_MODE == true
	/* Enable global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     972:	0020      	movs	r0, r4
     974:	4b0d      	ldr	r3, [pc, #52]	; (9ac <configure_i2c_slave+0x74>)
     976:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     978:	231f      	movs	r3, #31
     97a:	4018      	ands	r0, r3
     97c:	3b1e      	subs	r3, #30
     97e:	4083      	lsls	r3, r0
     980:	4a0b      	ldr	r2, [pc, #44]	; (9b0 <configure_i2c_slave+0x78>)
     982:	6013      	str	r3, [r2, #0]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     984:	682a      	ldr	r2, [r5, #0]
	return (i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_SYNCBUSY);
     986:	8a13      	ldrh	r3, [r2, #16]
	while (i2c_slave_is_syncing(module)) {
     988:	b21b      	sxth	r3, r3
     98a:	2b00      	cmp	r3, #0
     98c:	dbfb      	blt.n	986 <configure_i2c_slave+0x4e>

	/* Wait for module to sync */
	_i2c_slave_wait_for_sync(module);

	/* Enable module */
	i2c_hw->CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
     98e:	6823      	ldr	r3, [r4, #0]
     990:	2202      	movs	r2, #2
     992:	4313      	orrs	r3, r2
     994:	6023      	str	r3, [r4, #0]
}
     996:	bd70      	pop	{r4, r5, r6, pc}
     998:	200000dc 	.word	0x200000dc
     99c:	200000a8 	.word	0x200000a8
     9a0:	200000fc 	.word	0x200000fc
     9a4:	42001000 	.word	0x42001000
     9a8:	000002b5 	.word	0x000002b5
     9ac:	00000c5d 	.word	0x00000c5d
     9b0:	e000e100 	.word	0xe000e100

000009b4 <configure_i2c_slave_callbacks>:
{
     9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	i2c_slave_register_callback(&i2c_slave_instance, i2c_read_request_callback,	I2C_SLAVE_CALLBACK_READ_REQUEST);
     9b6:	4c14      	ldr	r4, [pc, #80]	; (a08 <configure_i2c_slave_callbacks+0x54>)
     9b8:	2202      	movs	r2, #2
     9ba:	4914      	ldr	r1, [pc, #80]	; (a0c <configure_i2c_slave_callbacks+0x58>)
     9bc:	0020      	movs	r0, r4
     9be:	4e14      	ldr	r6, [pc, #80]	; (a10 <configure_i2c_slave_callbacks+0x5c>)
     9c0:	47b0      	blx	r6
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
     9c2:	2525      	movs	r5, #37	; 0x25
     9c4:	5d63      	ldrb	r3, [r4, r5]
     9c6:	2204      	movs	r2, #4
     9c8:	4313      	orrs	r3, r2
     9ca:	5563      	strb	r3, [r4, r5]

	/* Enable address callback */
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
	if (callback_type == I2C_SLAVE_CALLBACK_READ_REQUEST ||
			callback_type == I2C_SLAVE_CALLBACK_WRITE_REQUEST) {
		i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH;
     9cc:	2702      	movs	r7, #2
     9ce:	6823      	ldr	r3, [r4, #0]
     9d0:	735f      	strb	r7, [r3, #13]
	i2c_slave_register_callback(&i2c_slave_instance, i2c_write_request_callback, I2C_SLAVE_CALLBACK_WRITE_REQUEST);
     9d2:	3a01      	subs	r2, #1
     9d4:	490f      	ldr	r1, [pc, #60]	; (a14 <configure_i2c_slave_callbacks+0x60>)
     9d6:	0020      	movs	r0, r4
     9d8:	47b0      	blx	r6
	module->enabled_callback |= (1 << callback_type);
     9da:	5d63      	ldrb	r3, [r4, r5]
     9dc:	2208      	movs	r2, #8
     9de:	4313      	orrs	r3, r2
     9e0:	5563      	strb	r3, [r4, r5]
		i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH;
     9e2:	6823      	ldr	r3, [r4, #0]
     9e4:	735f      	strb	r7, [r3, #13]
	i2c_slave_register_callback(&i2c_slave_instance, i2c_write_complete_callback, I2C_SLAVE_CALLBACK_WRITE_COMPLETE);
     9e6:	2200      	movs	r2, #0
     9e8:	490b      	ldr	r1, [pc, #44]	; (a18 <configure_i2c_slave_callbacks+0x64>)
     9ea:	0020      	movs	r0, r4
     9ec:	47b0      	blx	r6
	module->enabled_callback |= (1 << callback_type);
     9ee:	5d63      	ldrb	r3, [r4, r5]
     9f0:	2201      	movs	r2, #1
     9f2:	4313      	orrs	r3, r2
     9f4:	5563      	strb	r3, [r4, r5]
	i2c_slave_register_callback(&i2c_slave_instance, i2c_read_complete_callback, I2C_SLAVE_CALLBACK_READ_COMPLETE);
     9f6:	4909      	ldr	r1, [pc, #36]	; (a1c <configure_i2c_slave_callbacks+0x68>)
     9f8:	0020      	movs	r0, r4
     9fa:	47b0      	blx	r6
     9fc:	5d63      	ldrb	r3, [r4, r5]
     9fe:	2202      	movs	r2, #2
     a00:	4313      	orrs	r3, r2
     a02:	5563      	strb	r3, [r4, r5]
}
     a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     a06:	46c0      	nop			; (mov r8, r8)
     a08:	200000fc 	.word	0x200000fc
     a0c:	000008f9 	.word	0x000008f9
     a10:	00000415 	.word	0x00000415
     a14:	00000919 	.word	0x00000919
     a18:	000008c5 	.word	0x000008c5
     a1c:	000008d5 	.word	0x000008d5

00000a20 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     a20:	b510      	push	{r4, lr}
     a22:	b082      	sub	sp, #8
     a24:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     a26:	4b0e      	ldr	r3, [pc, #56]	; (a60 <sercom_set_gclk_generator+0x40>)
     a28:	781b      	ldrb	r3, [r3, #0]
     a2a:	2b00      	cmp	r3, #0
     a2c:	d007      	beq.n	a3e <sercom_set_gclk_generator+0x1e>
     a2e:	2900      	cmp	r1, #0
     a30:	d105      	bne.n	a3e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     a32:	4b0b      	ldr	r3, [pc, #44]	; (a60 <sercom_set_gclk_generator+0x40>)
     a34:	785b      	ldrb	r3, [r3, #1]
     a36:	4283      	cmp	r3, r0
     a38:	d010      	beq.n	a5c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     a3a:	201d      	movs	r0, #29
     a3c:	e00c      	b.n	a58 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     a3e:	a901      	add	r1, sp, #4
     a40:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     a42:	200c      	movs	r0, #12
     a44:	4b07      	ldr	r3, [pc, #28]	; (a64 <sercom_set_gclk_generator+0x44>)
     a46:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     a48:	200c      	movs	r0, #12
     a4a:	4b07      	ldr	r3, [pc, #28]	; (a68 <sercom_set_gclk_generator+0x48>)
     a4c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     a4e:	4b04      	ldr	r3, [pc, #16]	; (a60 <sercom_set_gclk_generator+0x40>)
     a50:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     a52:	2201      	movs	r2, #1
     a54:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     a56:	2000      	movs	r0, #0
}
     a58:	b002      	add	sp, #8
     a5a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     a5c:	2000      	movs	r0, #0
     a5e:	e7fb      	b.n	a58 <sercom_set_gclk_generator+0x38>
     a60:	20000028 	.word	0x20000028
     a64:	00001295 	.word	0x00001295
     a68:	00001209 	.word	0x00001209

00000a6c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     a6c:	4b40      	ldr	r3, [pc, #256]	; (b70 <_sercom_get_default_pad+0x104>)
     a6e:	4298      	cmp	r0, r3
     a70:	d031      	beq.n	ad6 <_sercom_get_default_pad+0x6a>
     a72:	d90a      	bls.n	a8a <_sercom_get_default_pad+0x1e>
     a74:	4b3f      	ldr	r3, [pc, #252]	; (b74 <_sercom_get_default_pad+0x108>)
     a76:	4298      	cmp	r0, r3
     a78:	d04d      	beq.n	b16 <_sercom_get_default_pad+0xaa>
     a7a:	4b3f      	ldr	r3, [pc, #252]	; (b78 <_sercom_get_default_pad+0x10c>)
     a7c:	4298      	cmp	r0, r3
     a7e:	d05a      	beq.n	b36 <_sercom_get_default_pad+0xca>
     a80:	4b3e      	ldr	r3, [pc, #248]	; (b7c <_sercom_get_default_pad+0x110>)
     a82:	4298      	cmp	r0, r3
     a84:	d037      	beq.n	af6 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     a86:	2000      	movs	r0, #0
}
     a88:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     a8a:	4b3d      	ldr	r3, [pc, #244]	; (b80 <_sercom_get_default_pad+0x114>)
     a8c:	4298      	cmp	r0, r3
     a8e:	d00c      	beq.n	aaa <_sercom_get_default_pad+0x3e>
     a90:	4b3c      	ldr	r3, [pc, #240]	; (b84 <_sercom_get_default_pad+0x118>)
     a92:	4298      	cmp	r0, r3
     a94:	d1f7      	bne.n	a86 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a96:	2901      	cmp	r1, #1
     a98:	d017      	beq.n	aca <_sercom_get_default_pad+0x5e>
     a9a:	2900      	cmp	r1, #0
     a9c:	d05d      	beq.n	b5a <_sercom_get_default_pad+0xee>
     a9e:	2902      	cmp	r1, #2
     aa0:	d015      	beq.n	ace <_sercom_get_default_pad+0x62>
     aa2:	2903      	cmp	r1, #3
     aa4:	d015      	beq.n	ad2 <_sercom_get_default_pad+0x66>
	return 0;
     aa6:	2000      	movs	r0, #0
     aa8:	e7ee      	b.n	a88 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     aaa:	2901      	cmp	r1, #1
     aac:	d007      	beq.n	abe <_sercom_get_default_pad+0x52>
     aae:	2900      	cmp	r1, #0
     ab0:	d051      	beq.n	b56 <_sercom_get_default_pad+0xea>
     ab2:	2902      	cmp	r1, #2
     ab4:	d005      	beq.n	ac2 <_sercom_get_default_pad+0x56>
     ab6:	2903      	cmp	r1, #3
     ab8:	d005      	beq.n	ac6 <_sercom_get_default_pad+0x5a>
	return 0;
     aba:	2000      	movs	r0, #0
     abc:	e7e4      	b.n	a88 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     abe:	4832      	ldr	r0, [pc, #200]	; (b88 <_sercom_get_default_pad+0x11c>)
     ac0:	e7e2      	b.n	a88 <_sercom_get_default_pad+0x1c>
     ac2:	4832      	ldr	r0, [pc, #200]	; (b8c <_sercom_get_default_pad+0x120>)
     ac4:	e7e0      	b.n	a88 <_sercom_get_default_pad+0x1c>
     ac6:	4832      	ldr	r0, [pc, #200]	; (b90 <_sercom_get_default_pad+0x124>)
     ac8:	e7de      	b.n	a88 <_sercom_get_default_pad+0x1c>
     aca:	4832      	ldr	r0, [pc, #200]	; (b94 <_sercom_get_default_pad+0x128>)
     acc:	e7dc      	b.n	a88 <_sercom_get_default_pad+0x1c>
     ace:	4832      	ldr	r0, [pc, #200]	; (b98 <_sercom_get_default_pad+0x12c>)
     ad0:	e7da      	b.n	a88 <_sercom_get_default_pad+0x1c>
     ad2:	4832      	ldr	r0, [pc, #200]	; (b9c <_sercom_get_default_pad+0x130>)
     ad4:	e7d8      	b.n	a88 <_sercom_get_default_pad+0x1c>
     ad6:	2901      	cmp	r1, #1
     ad8:	d007      	beq.n	aea <_sercom_get_default_pad+0x7e>
     ada:	2900      	cmp	r1, #0
     adc:	d03f      	beq.n	b5e <_sercom_get_default_pad+0xf2>
     ade:	2902      	cmp	r1, #2
     ae0:	d005      	beq.n	aee <_sercom_get_default_pad+0x82>
     ae2:	2903      	cmp	r1, #3
     ae4:	d005      	beq.n	af2 <_sercom_get_default_pad+0x86>
	return 0;
     ae6:	2000      	movs	r0, #0
     ae8:	e7ce      	b.n	a88 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     aea:	482d      	ldr	r0, [pc, #180]	; (ba0 <_sercom_get_default_pad+0x134>)
     aec:	e7cc      	b.n	a88 <_sercom_get_default_pad+0x1c>
     aee:	482d      	ldr	r0, [pc, #180]	; (ba4 <_sercom_get_default_pad+0x138>)
     af0:	e7ca      	b.n	a88 <_sercom_get_default_pad+0x1c>
     af2:	482d      	ldr	r0, [pc, #180]	; (ba8 <_sercom_get_default_pad+0x13c>)
     af4:	e7c8      	b.n	a88 <_sercom_get_default_pad+0x1c>
     af6:	2901      	cmp	r1, #1
     af8:	d007      	beq.n	b0a <_sercom_get_default_pad+0x9e>
     afa:	2900      	cmp	r1, #0
     afc:	d031      	beq.n	b62 <_sercom_get_default_pad+0xf6>
     afe:	2902      	cmp	r1, #2
     b00:	d005      	beq.n	b0e <_sercom_get_default_pad+0xa2>
     b02:	2903      	cmp	r1, #3
     b04:	d005      	beq.n	b12 <_sercom_get_default_pad+0xa6>
	return 0;
     b06:	2000      	movs	r0, #0
     b08:	e7be      	b.n	a88 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b0a:	4828      	ldr	r0, [pc, #160]	; (bac <_sercom_get_default_pad+0x140>)
     b0c:	e7bc      	b.n	a88 <_sercom_get_default_pad+0x1c>
     b0e:	4828      	ldr	r0, [pc, #160]	; (bb0 <_sercom_get_default_pad+0x144>)
     b10:	e7ba      	b.n	a88 <_sercom_get_default_pad+0x1c>
     b12:	4828      	ldr	r0, [pc, #160]	; (bb4 <_sercom_get_default_pad+0x148>)
     b14:	e7b8      	b.n	a88 <_sercom_get_default_pad+0x1c>
     b16:	2901      	cmp	r1, #1
     b18:	d007      	beq.n	b2a <_sercom_get_default_pad+0xbe>
     b1a:	2900      	cmp	r1, #0
     b1c:	d023      	beq.n	b66 <_sercom_get_default_pad+0xfa>
     b1e:	2902      	cmp	r1, #2
     b20:	d005      	beq.n	b2e <_sercom_get_default_pad+0xc2>
     b22:	2903      	cmp	r1, #3
     b24:	d005      	beq.n	b32 <_sercom_get_default_pad+0xc6>
	return 0;
     b26:	2000      	movs	r0, #0
     b28:	e7ae      	b.n	a88 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b2a:	4823      	ldr	r0, [pc, #140]	; (bb8 <_sercom_get_default_pad+0x14c>)
     b2c:	e7ac      	b.n	a88 <_sercom_get_default_pad+0x1c>
     b2e:	4823      	ldr	r0, [pc, #140]	; (bbc <_sercom_get_default_pad+0x150>)
     b30:	e7aa      	b.n	a88 <_sercom_get_default_pad+0x1c>
     b32:	4823      	ldr	r0, [pc, #140]	; (bc0 <_sercom_get_default_pad+0x154>)
     b34:	e7a8      	b.n	a88 <_sercom_get_default_pad+0x1c>
     b36:	2901      	cmp	r1, #1
     b38:	d007      	beq.n	b4a <_sercom_get_default_pad+0xde>
     b3a:	2900      	cmp	r1, #0
     b3c:	d015      	beq.n	b6a <_sercom_get_default_pad+0xfe>
     b3e:	2902      	cmp	r1, #2
     b40:	d005      	beq.n	b4e <_sercom_get_default_pad+0xe2>
     b42:	2903      	cmp	r1, #3
     b44:	d005      	beq.n	b52 <_sercom_get_default_pad+0xe6>
	return 0;
     b46:	2000      	movs	r0, #0
     b48:	e79e      	b.n	a88 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b4a:	481e      	ldr	r0, [pc, #120]	; (bc4 <_sercom_get_default_pad+0x158>)
     b4c:	e79c      	b.n	a88 <_sercom_get_default_pad+0x1c>
     b4e:	481e      	ldr	r0, [pc, #120]	; (bc8 <_sercom_get_default_pad+0x15c>)
     b50:	e79a      	b.n	a88 <_sercom_get_default_pad+0x1c>
     b52:	481e      	ldr	r0, [pc, #120]	; (bcc <_sercom_get_default_pad+0x160>)
     b54:	e798      	b.n	a88 <_sercom_get_default_pad+0x1c>
     b56:	481e      	ldr	r0, [pc, #120]	; (bd0 <_sercom_get_default_pad+0x164>)
     b58:	e796      	b.n	a88 <_sercom_get_default_pad+0x1c>
     b5a:	2003      	movs	r0, #3
     b5c:	e794      	b.n	a88 <_sercom_get_default_pad+0x1c>
     b5e:	481d      	ldr	r0, [pc, #116]	; (bd4 <_sercom_get_default_pad+0x168>)
     b60:	e792      	b.n	a88 <_sercom_get_default_pad+0x1c>
     b62:	481d      	ldr	r0, [pc, #116]	; (bd8 <_sercom_get_default_pad+0x16c>)
     b64:	e790      	b.n	a88 <_sercom_get_default_pad+0x1c>
     b66:	481d      	ldr	r0, [pc, #116]	; (bdc <_sercom_get_default_pad+0x170>)
     b68:	e78e      	b.n	a88 <_sercom_get_default_pad+0x1c>
     b6a:	481d      	ldr	r0, [pc, #116]	; (be0 <_sercom_get_default_pad+0x174>)
     b6c:	e78c      	b.n	a88 <_sercom_get_default_pad+0x1c>
     b6e:	46c0      	nop			; (mov r8, r8)
     b70:	42001000 	.word	0x42001000
     b74:	42001800 	.word	0x42001800
     b78:	42001c00 	.word	0x42001c00
     b7c:	42001400 	.word	0x42001400
     b80:	42000800 	.word	0x42000800
     b84:	42000c00 	.word	0x42000c00
     b88:	00050003 	.word	0x00050003
     b8c:	00060003 	.word	0x00060003
     b90:	00070003 	.word	0x00070003
     b94:	00010003 	.word	0x00010003
     b98:	001e0003 	.word	0x001e0003
     b9c:	001f0003 	.word	0x001f0003
     ba0:	00090003 	.word	0x00090003
     ba4:	000a0003 	.word	0x000a0003
     ba8:	000b0003 	.word	0x000b0003
     bac:	00110003 	.word	0x00110003
     bb0:	00120003 	.word	0x00120003
     bb4:	00130003 	.word	0x00130003
     bb8:	000d0003 	.word	0x000d0003
     bbc:	000e0003 	.word	0x000e0003
     bc0:	000f0003 	.word	0x000f0003
     bc4:	00170003 	.word	0x00170003
     bc8:	00180003 	.word	0x00180003
     bcc:	00190003 	.word	0x00190003
     bd0:	00040003 	.word	0x00040003
     bd4:	00080003 	.word	0x00080003
     bd8:	00100003 	.word	0x00100003
     bdc:	000c0003 	.word	0x000c0003
     be0:	00160003 	.word	0x00160003

00000be4 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     be4:	b530      	push	{r4, r5, lr}
     be6:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     be8:	4b0b      	ldr	r3, [pc, #44]	; (c18 <_sercom_get_sercom_inst_index+0x34>)
     bea:	466a      	mov	r2, sp
     bec:	cb32      	ldmia	r3!, {r1, r4, r5}
     bee:	c232      	stmia	r2!, {r1, r4, r5}
     bf0:	cb32      	ldmia	r3!, {r1, r4, r5}
     bf2:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     bf4:	9b00      	ldr	r3, [sp, #0]
     bf6:	4283      	cmp	r3, r0
     bf8:	d00b      	beq.n	c12 <_sercom_get_sercom_inst_index+0x2e>
     bfa:	2301      	movs	r3, #1
     bfc:	009a      	lsls	r2, r3, #2
     bfe:	4669      	mov	r1, sp
     c00:	5852      	ldr	r2, [r2, r1]
     c02:	4282      	cmp	r2, r0
     c04:	d006      	beq.n	c14 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     c06:	3301      	adds	r3, #1
     c08:	2b06      	cmp	r3, #6
     c0a:	d1f7      	bne.n	bfc <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     c0c:	2000      	movs	r0, #0
}
     c0e:	b007      	add	sp, #28
     c10:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     c12:	2300      	movs	r3, #0
			return i;
     c14:	b2d8      	uxtb	r0, r3
     c16:	e7fa      	b.n	c0e <_sercom_get_sercom_inst_index+0x2a>
     c18:	000016c0 	.word	0x000016c0

00000c1c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     c1c:	4770      	bx	lr
	...

00000c20 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     c20:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     c22:	4b0a      	ldr	r3, [pc, #40]	; (c4c <_sercom_set_handler+0x2c>)
     c24:	781b      	ldrb	r3, [r3, #0]
     c26:	2b00      	cmp	r3, #0
     c28:	d10c      	bne.n	c44 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     c2a:	4f09      	ldr	r7, [pc, #36]	; (c50 <_sercom_set_handler+0x30>)
     c2c:	4e09      	ldr	r6, [pc, #36]	; (c54 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     c2e:	4d0a      	ldr	r5, [pc, #40]	; (c58 <_sercom_set_handler+0x38>)
     c30:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     c32:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     c34:	195a      	adds	r2, r3, r5
     c36:	6014      	str	r4, [r2, #0]
     c38:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     c3a:	2b18      	cmp	r3, #24
     c3c:	d1f9      	bne.n	c32 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     c3e:	2201      	movs	r2, #1
     c40:	4b02      	ldr	r3, [pc, #8]	; (c4c <_sercom_set_handler+0x2c>)
     c42:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     c44:	0080      	lsls	r0, r0, #2
     c46:	4b02      	ldr	r3, [pc, #8]	; (c50 <_sercom_set_handler+0x30>)
     c48:	50c1      	str	r1, [r0, r3]
}
     c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c4c:	2000002a 	.word	0x2000002a
     c50:	2000002c 	.word	0x2000002c
     c54:	00000c1d 	.word	0x00000c1d
     c58:	20000130 	.word	0x20000130

00000c5c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     c5c:	b500      	push	{lr}
     c5e:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     c60:	2307      	movs	r3, #7
     c62:	466a      	mov	r2, sp
     c64:	7013      	strb	r3, [r2, #0]
     c66:	3301      	adds	r3, #1
     c68:	7053      	strb	r3, [r2, #1]
     c6a:	3301      	adds	r3, #1
     c6c:	7093      	strb	r3, [r2, #2]
     c6e:	3301      	adds	r3, #1
     c70:	70d3      	strb	r3, [r2, #3]
     c72:	3301      	adds	r3, #1
     c74:	7113      	strb	r3, [r2, #4]
     c76:	3301      	adds	r3, #1
     c78:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     c7a:	4b03      	ldr	r3, [pc, #12]	; (c88 <_sercom_get_interrupt_vector+0x2c>)
     c7c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     c7e:	466b      	mov	r3, sp
     c80:	5618      	ldrsb	r0, [r3, r0]
}
     c82:	b003      	add	sp, #12
     c84:	bd00      	pop	{pc}
     c86:	46c0      	nop			; (mov r8, r8)
     c88:	00000be5 	.word	0x00000be5

00000c8c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     c8c:	b510      	push	{r4, lr}
     c8e:	4b02      	ldr	r3, [pc, #8]	; (c98 <SERCOM0_Handler+0xc>)
     c90:	681b      	ldr	r3, [r3, #0]
     c92:	2000      	movs	r0, #0
     c94:	4798      	blx	r3
     c96:	bd10      	pop	{r4, pc}
     c98:	2000002c 	.word	0x2000002c

00000c9c <SERCOM1_Handler>:
     c9c:	b510      	push	{r4, lr}
     c9e:	4b02      	ldr	r3, [pc, #8]	; (ca8 <SERCOM1_Handler+0xc>)
     ca0:	685b      	ldr	r3, [r3, #4]
     ca2:	2001      	movs	r0, #1
     ca4:	4798      	blx	r3
     ca6:	bd10      	pop	{r4, pc}
     ca8:	2000002c 	.word	0x2000002c

00000cac <SERCOM2_Handler>:
     cac:	b510      	push	{r4, lr}
     cae:	4b02      	ldr	r3, [pc, #8]	; (cb8 <SERCOM2_Handler+0xc>)
     cb0:	689b      	ldr	r3, [r3, #8]
     cb2:	2002      	movs	r0, #2
     cb4:	4798      	blx	r3
     cb6:	bd10      	pop	{r4, pc}
     cb8:	2000002c 	.word	0x2000002c

00000cbc <SERCOM3_Handler>:
     cbc:	b510      	push	{r4, lr}
     cbe:	4b02      	ldr	r3, [pc, #8]	; (cc8 <SERCOM3_Handler+0xc>)
     cc0:	68db      	ldr	r3, [r3, #12]
     cc2:	2003      	movs	r0, #3
     cc4:	4798      	blx	r3
     cc6:	bd10      	pop	{r4, pc}
     cc8:	2000002c 	.word	0x2000002c

00000ccc <SERCOM4_Handler>:
     ccc:	b510      	push	{r4, lr}
     cce:	4b02      	ldr	r3, [pc, #8]	; (cd8 <SERCOM4_Handler+0xc>)
     cd0:	691b      	ldr	r3, [r3, #16]
     cd2:	2004      	movs	r0, #4
     cd4:	4798      	blx	r3
     cd6:	bd10      	pop	{r4, pc}
     cd8:	2000002c 	.word	0x2000002c

00000cdc <SERCOM5_Handler>:
     cdc:	b510      	push	{r4, lr}
     cde:	4b02      	ldr	r3, [pc, #8]	; (ce8 <SERCOM5_Handler+0xc>)
     ce0:	695b      	ldr	r3, [r3, #20]
     ce2:	2005      	movs	r0, #5
     ce4:	4798      	blx	r3
     ce6:	bd10      	pop	{r4, pc}
     ce8:	2000002c 	.word	0x2000002c

00000cec <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     cec:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     cee:	2000      	movs	r0, #0
     cf0:	4b08      	ldr	r3, [pc, #32]	; (d14 <delay_init+0x28>)
     cf2:	4798      	blx	r3
     cf4:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     cf6:	4c08      	ldr	r4, [pc, #32]	; (d18 <delay_init+0x2c>)
     cf8:	21fa      	movs	r1, #250	; 0xfa
     cfa:	0089      	lsls	r1, r1, #2
     cfc:	47a0      	blx	r4
     cfe:	4b07      	ldr	r3, [pc, #28]	; (d1c <delay_init+0x30>)
     d00:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     d02:	4907      	ldr	r1, [pc, #28]	; (d20 <delay_init+0x34>)
     d04:	0028      	movs	r0, r5
     d06:	47a0      	blx	r4
     d08:	4b06      	ldr	r3, [pc, #24]	; (d24 <delay_init+0x38>)
     d0a:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     d0c:	2205      	movs	r2, #5
     d0e:	4b06      	ldr	r3, [pc, #24]	; (d28 <delay_init+0x3c>)
     d10:	601a      	str	r2, [r3, #0]
}
     d12:	bd70      	pop	{r4, r5, r6, pc}
     d14:	0000117d 	.word	0x0000117d
     d18:	00001561 	.word	0x00001561
     d1c:	20000000 	.word	0x20000000
     d20:	000f4240 	.word	0x000f4240
     d24:	20000004 	.word	0x20000004
     d28:	e000e010 	.word	0xe000e010

00000d2c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     d2c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     d2e:	4b08      	ldr	r3, [pc, #32]	; (d50 <delay_cycles_ms+0x24>)
     d30:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     d32:	4a08      	ldr	r2, [pc, #32]	; (d54 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     d34:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     d36:	2180      	movs	r1, #128	; 0x80
     d38:	0249      	lsls	r1, r1, #9
	while (n--) {
     d3a:	3801      	subs	r0, #1
     d3c:	d307      	bcc.n	d4e <delay_cycles_ms+0x22>
	if (n > 0) {
     d3e:	2c00      	cmp	r4, #0
     d40:	d0fb      	beq.n	d3a <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     d42:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     d44:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     d46:	6813      	ldr	r3, [r2, #0]
     d48:	420b      	tst	r3, r1
     d4a:	d0fc      	beq.n	d46 <delay_cycles_ms+0x1a>
     d4c:	e7f5      	b.n	d3a <delay_cycles_ms+0xe>
	}
}
     d4e:	bd30      	pop	{r4, r5, pc}
     d50:	20000000 	.word	0x20000000
     d54:	e000e010 	.word	0xe000e010

00000d58 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     d58:	b500      	push	{lr}
     d5a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     d5c:	ab01      	add	r3, sp, #4
     d5e:	2280      	movs	r2, #128	; 0x80
     d60:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     d62:	780a      	ldrb	r2, [r1, #0]
     d64:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     d66:	784a      	ldrb	r2, [r1, #1]
     d68:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     d6a:	788a      	ldrb	r2, [r1, #2]
     d6c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     d6e:	0019      	movs	r1, r3
     d70:	4b01      	ldr	r3, [pc, #4]	; (d78 <port_pin_set_config+0x20>)
     d72:	4798      	blx	r3
}
     d74:	b003      	add	sp, #12
     d76:	bd00      	pop	{pc}
     d78:	0000138d 	.word	0x0000138d

00000d7c <config_GPIO>:
	 port_pin_set_config(LED_0_PIN, &pin_conf);
	 port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
 }

 void config_GPIO(void)
 {
     d7c:	b570      	push	{r4, r5, r6, lr}
     d7e:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
     d80:	ac01      	add	r4, sp, #4
     d82:	2301      	movs	r3, #1
     d84:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
     d86:	2600      	movs	r6, #0
     d88:	70a6      	strb	r6, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     d8a:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     d8c:	0021      	movs	r1, r4
     d8e:	2015      	movs	r0, #21
     d90:	4d08      	ldr	r5, [pc, #32]	; (db4 <config_GPIO+0x38>)
     d92:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
     d94:	2280      	movs	r2, #128	; 0x80
     d96:	0392      	lsls	r2, r2, #14
     d98:	4b07      	ldr	r3, [pc, #28]	; (db8 <config_GPIO+0x3c>)
     d9a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     d9c:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(I2C_STRAP_0, &pin_conf);
     d9e:	0021      	movs	r1, r4
     da0:	201b      	movs	r0, #27
     da2:	47a8      	blx	r5
	pin_conf.input_pull = PORT_PIN_PULL_DOWN;
     da4:	2302      	movs	r3, #2
     da6:	7063      	strb	r3, [r4, #1]

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     da8:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(I2C_STRAP_1, &pin_conf);
     daa:	0021      	movs	r1, r4
     dac:	2037      	movs	r0, #55	; 0x37
     dae:	47a8      	blx	r5
	pin_conf.input_pull = PORT_PIN_PULL_DOWN;
 }
     db0:	b002      	add	sp, #8
     db2:	bd70      	pop	{r4, r5, r6, pc}
     db4:	00000d59 	.word	0x00000d59
     db8:	41004400 	.word	0x41004400

00000dbc <system_board_init>:
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
 }
#endif

void system_board_init(void)
{
     dbc:	b510      	push	{r4, lr}
 	/*Configure system tick to generate periodic interrupts */
 	SysTick_Config(system_gclk_gen_get_hz(GCLK_GENERATOR_0));
     dbe:	2000      	movs	r0, #0
     dc0:	4b0c      	ldr	r3, [pc, #48]	; (df4 <system_board_init+0x38>)
     dc2:	4798      	blx	r3
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
     dc4:	3801      	subs	r0, #1
     dc6:	4b0c      	ldr	r3, [pc, #48]	; (df8 <system_board_init+0x3c>)
     dc8:	4298      	cmp	r0, r3
     dca:	d80d      	bhi.n	de8 <system_board_init+0x2c>
  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
     dcc:	4a0b      	ldr	r2, [pc, #44]	; (dfc <system_board_init+0x40>)
     dce:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     dd0:	480b      	ldr	r0, [pc, #44]	; (e00 <system_board_init+0x44>)
     dd2:	6a03      	ldr	r3, [r0, #32]
     dd4:	021b      	lsls	r3, r3, #8
     dd6:	0a1b      	lsrs	r3, r3, #8
     dd8:	21c0      	movs	r1, #192	; 0xc0
     dda:	0609      	lsls	r1, r1, #24
     ddc:	430b      	orrs	r3, r1
     dde:	6203      	str	r3, [r0, #32]
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
     de0:	2300      	movs	r3, #0
     de2:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
     de4:	3307      	adds	r3, #7
     de6:	6013      	str	r3, [r2, #0]
 	delay_init();
     de8:	4b06      	ldr	r3, [pc, #24]	; (e04 <system_board_init+0x48>)
     dea:	4798      	blx	r3
	config_led();
	config_btn();
	#endif

	#ifdef ROBOT_SCAN
	config_GPIO();
     dec:	4b06      	ldr	r3, [pc, #24]	; (e08 <system_board_init+0x4c>)
     dee:	4798      	blx	r3
	#endif

     df0:	bd10      	pop	{r4, pc}
     df2:	46c0      	nop			; (mov r8, r8)
     df4:	0000117d 	.word	0x0000117d
     df8:	00ffffff 	.word	0x00ffffff
     dfc:	e000e010 	.word	0xe000e010
     e00:	e000ed00 	.word	0xe000ed00
     e04:	00000ced 	.word	0x00000ced
     e08:	00000d7d 	.word	0x00000d7d

00000e0c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     e0c:	4b0c      	ldr	r3, [pc, #48]	; (e40 <cpu_irq_enter_critical+0x34>)
     e0e:	681b      	ldr	r3, [r3, #0]
     e10:	2b00      	cmp	r3, #0
     e12:	d106      	bne.n	e22 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     e14:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     e18:	2b00      	cmp	r3, #0
     e1a:	d007      	beq.n	e2c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     e1c:	2200      	movs	r2, #0
     e1e:	4b09      	ldr	r3, [pc, #36]	; (e44 <cpu_irq_enter_critical+0x38>)
     e20:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     e22:	4a07      	ldr	r2, [pc, #28]	; (e40 <cpu_irq_enter_critical+0x34>)
     e24:	6813      	ldr	r3, [r2, #0]
     e26:	3301      	adds	r3, #1
     e28:	6013      	str	r3, [r2, #0]
}
     e2a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     e2c:	b672      	cpsid	i
     e2e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     e32:	2200      	movs	r2, #0
     e34:	4b04      	ldr	r3, [pc, #16]	; (e48 <cpu_irq_enter_critical+0x3c>)
     e36:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     e38:	3201      	adds	r2, #1
     e3a:	4b02      	ldr	r3, [pc, #8]	; (e44 <cpu_irq_enter_critical+0x38>)
     e3c:	701a      	strb	r2, [r3, #0]
     e3e:	e7f0      	b.n	e22 <cpu_irq_enter_critical+0x16>
     e40:	20000044 	.word	0x20000044
     e44:	20000048 	.word	0x20000048
     e48:	20000008 	.word	0x20000008

00000e4c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     e4c:	4b08      	ldr	r3, [pc, #32]	; (e70 <cpu_irq_leave_critical+0x24>)
     e4e:	681a      	ldr	r2, [r3, #0]
     e50:	3a01      	subs	r2, #1
     e52:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     e54:	681b      	ldr	r3, [r3, #0]
     e56:	2b00      	cmp	r3, #0
     e58:	d109      	bne.n	e6e <cpu_irq_leave_critical+0x22>
     e5a:	4b06      	ldr	r3, [pc, #24]	; (e74 <cpu_irq_leave_critical+0x28>)
     e5c:	781b      	ldrb	r3, [r3, #0]
     e5e:	2b00      	cmp	r3, #0
     e60:	d005      	beq.n	e6e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     e62:	2201      	movs	r2, #1
     e64:	4b04      	ldr	r3, [pc, #16]	; (e78 <cpu_irq_leave_critical+0x2c>)
     e66:	701a      	strb	r2, [r3, #0]
     e68:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     e6c:	b662      	cpsie	i
	}
}
     e6e:	4770      	bx	lr
     e70:	20000044 	.word	0x20000044
     e74:	20000048 	.word	0x20000048
     e78:	20000008 	.word	0x20000008

00000e7c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     e7c:	b510      	push	{r4, lr}
	switch (clock_source) {
     e7e:	2807      	cmp	r0, #7
     e80:	d803      	bhi.n	e8a <system_clock_source_get_hz+0xe>
     e82:	0080      	lsls	r0, r0, #2
     e84:	4b16      	ldr	r3, [pc, #88]	; (ee0 <system_clock_source_get_hz+0x64>)
     e86:	581b      	ldr	r3, [r3, r0]
     e88:	469f      	mov	pc, r3
		}

		return 48000000UL;

	default:
		return 0;
     e8a:	2000      	movs	r0, #0
     e8c:	e027      	b.n	ede <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc.frequency;
     e8e:	4b15      	ldr	r3, [pc, #84]	; (ee4 <system_clock_source_get_hz+0x68>)
     e90:	68d8      	ldr	r0, [r3, #12]
     e92:	e024      	b.n	ede <system_clock_source_get_hz+0x62>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     e94:	4b14      	ldr	r3, [pc, #80]	; (ee8 <system_clock_source_get_hz+0x6c>)
     e96:	6a1b      	ldr	r3, [r3, #32]
     e98:	059b      	lsls	r3, r3, #22
     e9a:	0f9b      	lsrs	r3, r3, #30
     e9c:	4813      	ldr	r0, [pc, #76]	; (eec <system_clock_source_get_hz+0x70>)
     e9e:	40d8      	lsrs	r0, r3
     ea0:	e01d      	b.n	ede <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc32k.frequency;
     ea2:	4b10      	ldr	r3, [pc, #64]	; (ee4 <system_clock_source_get_hz+0x68>)
     ea4:	6918      	ldr	r0, [r3, #16]
     ea6:	e01a      	b.n	ede <system_clock_source_get_hz+0x62>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     ea8:	4b0e      	ldr	r3, [pc, #56]	; (ee4 <system_clock_source_get_hz+0x68>)
     eaa:	681b      	ldr	r3, [r3, #0]
			return 0;
     eac:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     eae:	079b      	lsls	r3, r3, #30
     eb0:	d515      	bpl.n	ede <system_clock_source_get_hz+0x62>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     eb2:	490d      	ldr	r1, [pc, #52]	; (ee8 <system_clock_source_get_hz+0x6c>)
     eb4:	2210      	movs	r2, #16
     eb6:	68cb      	ldr	r3, [r1, #12]
     eb8:	421a      	tst	r2, r3
     eba:	d0fc      	beq.n	eb6 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
     ebc:	4b09      	ldr	r3, [pc, #36]	; (ee4 <system_clock_source_get_hz+0x68>)
     ebe:	681b      	ldr	r3, [r3, #0]
     ec0:	075b      	lsls	r3, r3, #29
     ec2:	d401      	bmi.n	ec8 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
     ec4:	480a      	ldr	r0, [pc, #40]	; (ef0 <system_clock_source_get_hz+0x74>)
     ec6:	e00a      	b.n	ede <system_clock_source_get_hz+0x62>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     ec8:	2000      	movs	r0, #0
     eca:	4b0a      	ldr	r3, [pc, #40]	; (ef4 <system_clock_source_get_hz+0x78>)
     ecc:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     ece:	4b05      	ldr	r3, [pc, #20]	; (ee4 <system_clock_source_get_hz+0x68>)
     ed0:	689b      	ldr	r3, [r3, #8]
     ed2:	041b      	lsls	r3, r3, #16
     ed4:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     ed6:	4358      	muls	r0, r3
     ed8:	e001      	b.n	ede <system_clock_source_get_hz+0x62>
		return 32768UL;
     eda:	2080      	movs	r0, #128	; 0x80
     edc:	0200      	lsls	r0, r0, #8
	}
}
     ede:	bd10      	pop	{r4, pc}
     ee0:	000016d8 	.word	0x000016d8
     ee4:	2000004c 	.word	0x2000004c
     ee8:	40000800 	.word	0x40000800
     eec:	007a1200 	.word	0x007a1200
     ef0:	02dc6c00 	.word	0x02dc6c00
     ef4:	000012b1 	.word	0x000012b1

00000ef8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     ef8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     efa:	490c      	ldr	r1, [pc, #48]	; (f2c <system_clock_source_osc8m_set_config+0x34>)
     efc:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     efe:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     f00:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     f02:	7840      	ldrb	r0, [r0, #1]
     f04:	2201      	movs	r2, #1
     f06:	4010      	ands	r0, r2
     f08:	0180      	lsls	r0, r0, #6
     f0a:	2640      	movs	r6, #64	; 0x40
     f0c:	43b3      	bics	r3, r6
     f0e:	4303      	orrs	r3, r0
     f10:	402a      	ands	r2, r5
     f12:	01d2      	lsls	r2, r2, #7
     f14:	2080      	movs	r0, #128	; 0x80
     f16:	4383      	bics	r3, r0
     f18:	4313      	orrs	r3, r2
     f1a:	2203      	movs	r2, #3
     f1c:	4022      	ands	r2, r4
     f1e:	0212      	lsls	r2, r2, #8
     f20:	4803      	ldr	r0, [pc, #12]	; (f30 <system_clock_source_osc8m_set_config+0x38>)
     f22:	4003      	ands	r3, r0
     f24:	4313      	orrs	r3, r2
     f26:	620b      	str	r3, [r1, #32]
}
     f28:	bd70      	pop	{r4, r5, r6, pc}
     f2a:	46c0      	nop			; (mov r8, r8)
     f2c:	40000800 	.word	0x40000800
     f30:	fffffcff 	.word	0xfffffcff

00000f34 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     f34:	2807      	cmp	r0, #7
     f36:	d803      	bhi.n	f40 <system_clock_source_enable+0xc>
     f38:	0080      	lsls	r0, r0, #2
     f3a:	4b1e      	ldr	r3, [pc, #120]	; (fb4 <system_clock_source_enable+0x80>)
     f3c:	581b      	ldr	r3, [r3, r0]
     f3e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     f40:	2017      	movs	r0, #23
     f42:	e036      	b.n	fb2 <system_clock_source_enable+0x7e>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     f44:	4a1c      	ldr	r2, [pc, #112]	; (fb8 <system_clock_source_enable+0x84>)
     f46:	6a13      	ldr	r3, [r2, #32]
     f48:	2102      	movs	r1, #2
     f4a:	430b      	orrs	r3, r1
     f4c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     f4e:	2000      	movs	r0, #0
     f50:	e02f      	b.n	fb2 <system_clock_source_enable+0x7e>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     f52:	4a19      	ldr	r2, [pc, #100]	; (fb8 <system_clock_source_enable+0x84>)
     f54:	6993      	ldr	r3, [r2, #24]
     f56:	2102      	movs	r1, #2
     f58:	430b      	orrs	r3, r1
     f5a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     f5c:	2000      	movs	r0, #0
		break;
     f5e:	e028      	b.n	fb2 <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     f60:	4a15      	ldr	r2, [pc, #84]	; (fb8 <system_clock_source_enable+0x84>)
     f62:	8a13      	ldrh	r3, [r2, #16]
     f64:	2102      	movs	r1, #2
     f66:	430b      	orrs	r3, r1
     f68:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     f6a:	2000      	movs	r0, #0
		break;
     f6c:	e021      	b.n	fb2 <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     f6e:	4a12      	ldr	r2, [pc, #72]	; (fb8 <system_clock_source_enable+0x84>)
     f70:	8a93      	ldrh	r3, [r2, #20]
     f72:	2102      	movs	r1, #2
     f74:	430b      	orrs	r3, r1
     f76:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     f78:	2000      	movs	r0, #0
		break;
     f7a:	e01a      	b.n	fb2 <system_clock_source_enable+0x7e>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     f7c:	4b0f      	ldr	r3, [pc, #60]	; (fbc <system_clock_source_enable+0x88>)
     f7e:	681a      	ldr	r2, [r3, #0]
     f80:	2102      	movs	r1, #2
     f82:	430a      	orrs	r2, r1
     f84:	601a      	str	r2, [r3, #0]
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     f86:	681b      	ldr	r3, [r3, #0]
     f88:	4a0d      	ldr	r2, [pc, #52]	; (fc0 <system_clock_source_enable+0x8c>)
     f8a:	4013      	ands	r3, r2
     f8c:	4a0a      	ldr	r2, [pc, #40]	; (fb8 <system_clock_source_enable+0x84>)
     f8e:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     f90:	0011      	movs	r1, r2
     f92:	2210      	movs	r2, #16
     f94:	68cb      	ldr	r3, [r1, #12]
     f96:	421a      	tst	r2, r3
     f98:	d0fc      	beq.n	f94 <system_clock_source_enable+0x60>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     f9a:	4a08      	ldr	r2, [pc, #32]	; (fbc <system_clock_source_enable+0x88>)
     f9c:	6891      	ldr	r1, [r2, #8]
     f9e:	4b06      	ldr	r3, [pc, #24]	; (fb8 <system_clock_source_enable+0x84>)
     fa0:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     fa2:	6851      	ldr	r1, [r2, #4]
     fa4:	6299      	str	r1, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     fa6:	6812      	ldr	r2, [r2, #0]
     fa8:	b292      	uxth	r2, r2
     faa:	849a      	strh	r2, [r3, #36]	; 0x24
	return STATUS_OK;
     fac:	2000      	movs	r0, #0
     fae:	e000      	b.n	fb2 <system_clock_source_enable+0x7e>
		return STATUS_OK;
     fb0:	2000      	movs	r0, #0
}
     fb2:	4770      	bx	lr
     fb4:	000016f8 	.word	0x000016f8
     fb8:	40000800 	.word	0x40000800
     fbc:	2000004c 	.word	0x2000004c
     fc0:	0000ff7f 	.word	0x0000ff7f

00000fc4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     fc4:	b530      	push	{r4, r5, lr}
     fc6:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     fc8:	22c2      	movs	r2, #194	; 0xc2
     fca:	00d2      	lsls	r2, r2, #3
     fcc:	4b1a      	ldr	r3, [pc, #104]	; (1038 <system_clock_init+0x74>)
     fce:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     fd0:	4a1a      	ldr	r2, [pc, #104]	; (103c <system_clock_init+0x78>)
     fd2:	6853      	ldr	r3, [r2, #4]
     fd4:	211e      	movs	r1, #30
     fd6:	438b      	bics	r3, r1
     fd8:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     fda:	2301      	movs	r3, #1
     fdc:	466a      	mov	r2, sp
     fde:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     fe0:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     fe2:	4d17      	ldr	r5, [pc, #92]	; (1040 <system_clock_init+0x7c>)
     fe4:	b2e0      	uxtb	r0, r4
     fe6:	4669      	mov	r1, sp
     fe8:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     fea:	3401      	adds	r4, #1
     fec:	2c1c      	cmp	r4, #28
     fee:	d1f9      	bne.n	fe4 <system_clock_init+0x20>
	config->run_in_standby  = false;
     ff0:	a803      	add	r0, sp, #12
     ff2:	2400      	movs	r4, #0
     ff4:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     ff6:	2501      	movs	r5, #1
     ff8:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     ffa:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     ffc:	4b11      	ldr	r3, [pc, #68]	; (1044 <system_clock_init+0x80>)
     ffe:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1000:	2006      	movs	r0, #6
    1002:	4b11      	ldr	r3, [pc, #68]	; (1048 <system_clock_init+0x84>)
    1004:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1006:	4b11      	ldr	r3, [pc, #68]	; (104c <system_clock_init+0x88>)
    1008:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    100a:	4b11      	ldr	r3, [pc, #68]	; (1050 <system_clock_init+0x8c>)
    100c:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    100e:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1010:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1012:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    1014:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1016:	466b      	mov	r3, sp
    1018:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    101a:	2306      	movs	r3, #6
    101c:	466a      	mov	r2, sp
    101e:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
    1020:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    1022:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1024:	4669      	mov	r1, sp
    1026:	2000      	movs	r0, #0
    1028:	4b0a      	ldr	r3, [pc, #40]	; (1054 <system_clock_init+0x90>)
    102a:	4798      	blx	r3
    102c:	2000      	movs	r0, #0
    102e:	4b0a      	ldr	r3, [pc, #40]	; (1058 <system_clock_init+0x94>)
    1030:	4798      	blx	r3
#endif
}
    1032:	b005      	add	sp, #20
    1034:	bd30      	pop	{r4, r5, pc}
    1036:	46c0      	nop			; (mov r8, r8)
    1038:	40000800 	.word	0x40000800
    103c:	41004000 	.word	0x41004000
    1040:	00001295 	.word	0x00001295
    1044:	00000ef9 	.word	0x00000ef9
    1048:	00000f35 	.word	0x00000f35
    104c:	0000105d 	.word	0x0000105d
    1050:	40000400 	.word	0x40000400
    1054:	00001081 	.word	0x00001081
    1058:	00001139 	.word	0x00001139

0000105c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    105c:	4a06      	ldr	r2, [pc, #24]	; (1078 <system_gclk_init+0x1c>)
    105e:	6993      	ldr	r3, [r2, #24]
    1060:	2108      	movs	r1, #8
    1062:	430b      	orrs	r3, r1
    1064:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1066:	2201      	movs	r2, #1
    1068:	4b04      	ldr	r3, [pc, #16]	; (107c <system_gclk_init+0x20>)
    106a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    106c:	0019      	movs	r1, r3
    106e:	780b      	ldrb	r3, [r1, #0]
    1070:	4213      	tst	r3, r2
    1072:	d1fc      	bne.n	106e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1074:	4770      	bx	lr
    1076:	46c0      	nop			; (mov r8, r8)
    1078:	40000400 	.word	0x40000400
    107c:	40000c00 	.word	0x40000c00

00001080 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1080:	b570      	push	{r4, r5, r6, lr}
    1082:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1084:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1086:	780d      	ldrb	r5, [r1, #0]
    1088:	022d      	lsls	r5, r5, #8
    108a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    108c:	784b      	ldrb	r3, [r1, #1]
    108e:	2b00      	cmp	r3, #0
    1090:	d002      	beq.n	1098 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1092:	2380      	movs	r3, #128	; 0x80
    1094:	02db      	lsls	r3, r3, #11
    1096:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1098:	7a4b      	ldrb	r3, [r1, #9]
    109a:	2b00      	cmp	r3, #0
    109c:	d002      	beq.n	10a4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    109e:	2380      	movs	r3, #128	; 0x80
    10a0:	031b      	lsls	r3, r3, #12
    10a2:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    10a4:	6848      	ldr	r0, [r1, #4]
    10a6:	2801      	cmp	r0, #1
    10a8:	d910      	bls.n	10cc <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    10aa:	1e43      	subs	r3, r0, #1
    10ac:	4218      	tst	r0, r3
    10ae:	d134      	bne.n	111a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    10b0:	2802      	cmp	r0, #2
    10b2:	d930      	bls.n	1116 <system_gclk_gen_set_config+0x96>
    10b4:	2302      	movs	r3, #2
    10b6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    10b8:	3201      	adds	r2, #1
						mask <<= 1) {
    10ba:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    10bc:	4298      	cmp	r0, r3
    10be:	d8fb      	bhi.n	10b8 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    10c0:	0212      	lsls	r2, r2, #8
    10c2:	4332      	orrs	r2, r6
    10c4:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    10c6:	2380      	movs	r3, #128	; 0x80
    10c8:	035b      	lsls	r3, r3, #13
    10ca:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    10cc:	7a0b      	ldrb	r3, [r1, #8]
    10ce:	2b00      	cmp	r3, #0
    10d0:	d002      	beq.n	10d8 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    10d2:	2380      	movs	r3, #128	; 0x80
    10d4:	039b      	lsls	r3, r3, #14
    10d6:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    10d8:	4a13      	ldr	r2, [pc, #76]	; (1128 <system_gclk_gen_set_config+0xa8>)
    10da:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    10dc:	b25b      	sxtb	r3, r3
    10de:	2b00      	cmp	r3, #0
    10e0:	dbfb      	blt.n	10da <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    10e2:	4b12      	ldr	r3, [pc, #72]	; (112c <system_gclk_gen_set_config+0xac>)
    10e4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    10e6:	4b12      	ldr	r3, [pc, #72]	; (1130 <system_gclk_gen_set_config+0xb0>)
    10e8:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    10ea:	4a0f      	ldr	r2, [pc, #60]	; (1128 <system_gclk_gen_set_config+0xa8>)
    10ec:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    10ee:	b25b      	sxtb	r3, r3
    10f0:	2b00      	cmp	r3, #0
    10f2:	dbfb      	blt.n	10ec <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    10f4:	4b0c      	ldr	r3, [pc, #48]	; (1128 <system_gclk_gen_set_config+0xa8>)
    10f6:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    10f8:	001a      	movs	r2, r3
    10fa:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    10fc:	b25b      	sxtb	r3, r3
    10fe:	2b00      	cmp	r3, #0
    1100:	dbfb      	blt.n	10fa <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1102:	4a09      	ldr	r2, [pc, #36]	; (1128 <system_gclk_gen_set_config+0xa8>)
    1104:	6853      	ldr	r3, [r2, #4]
    1106:	2180      	movs	r1, #128	; 0x80
    1108:	0249      	lsls	r1, r1, #9
    110a:	400b      	ands	r3, r1
    110c:	431d      	orrs	r5, r3
    110e:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1110:	4b08      	ldr	r3, [pc, #32]	; (1134 <system_gclk_gen_set_config+0xb4>)
    1112:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1114:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1116:	2200      	movs	r2, #0
    1118:	e7d2      	b.n	10c0 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    111a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    111c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    111e:	2380      	movs	r3, #128	; 0x80
    1120:	029b      	lsls	r3, r3, #10
    1122:	431d      	orrs	r5, r3
    1124:	e7d2      	b.n	10cc <system_gclk_gen_set_config+0x4c>
    1126:	46c0      	nop			; (mov r8, r8)
    1128:	40000c00 	.word	0x40000c00
    112c:	00000e0d 	.word	0x00000e0d
    1130:	40000c08 	.word	0x40000c08
    1134:	00000e4d 	.word	0x00000e4d

00001138 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1138:	b510      	push	{r4, lr}
    113a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    113c:	4a0b      	ldr	r2, [pc, #44]	; (116c <system_gclk_gen_enable+0x34>)
    113e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1140:	b25b      	sxtb	r3, r3
    1142:	2b00      	cmp	r3, #0
    1144:	dbfb      	blt.n	113e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1146:	4b0a      	ldr	r3, [pc, #40]	; (1170 <system_gclk_gen_enable+0x38>)
    1148:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    114a:	4b0a      	ldr	r3, [pc, #40]	; (1174 <system_gclk_gen_enable+0x3c>)
    114c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    114e:	4a07      	ldr	r2, [pc, #28]	; (116c <system_gclk_gen_enable+0x34>)
    1150:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1152:	b25b      	sxtb	r3, r3
    1154:	2b00      	cmp	r3, #0
    1156:	dbfb      	blt.n	1150 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1158:	4a04      	ldr	r2, [pc, #16]	; (116c <system_gclk_gen_enable+0x34>)
    115a:	6851      	ldr	r1, [r2, #4]
    115c:	2380      	movs	r3, #128	; 0x80
    115e:	025b      	lsls	r3, r3, #9
    1160:	430b      	orrs	r3, r1
    1162:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1164:	4b04      	ldr	r3, [pc, #16]	; (1178 <system_gclk_gen_enable+0x40>)
    1166:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1168:	bd10      	pop	{r4, pc}
    116a:	46c0      	nop			; (mov r8, r8)
    116c:	40000c00 	.word	0x40000c00
    1170:	00000e0d 	.word	0x00000e0d
    1174:	40000c04 	.word	0x40000c04
    1178:	00000e4d 	.word	0x00000e4d

0000117c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    117c:	b570      	push	{r4, r5, r6, lr}
    117e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1180:	4a1a      	ldr	r2, [pc, #104]	; (11ec <system_gclk_gen_get_hz+0x70>)
    1182:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1184:	b25b      	sxtb	r3, r3
    1186:	2b00      	cmp	r3, #0
    1188:	dbfb      	blt.n	1182 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    118a:	4b19      	ldr	r3, [pc, #100]	; (11f0 <system_gclk_gen_get_hz+0x74>)
    118c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    118e:	4b19      	ldr	r3, [pc, #100]	; (11f4 <system_gclk_gen_get_hz+0x78>)
    1190:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1192:	4a16      	ldr	r2, [pc, #88]	; (11ec <system_gclk_gen_get_hz+0x70>)
    1194:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1196:	b25b      	sxtb	r3, r3
    1198:	2b00      	cmp	r3, #0
    119a:	dbfb      	blt.n	1194 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    119c:	4e13      	ldr	r6, [pc, #76]	; (11ec <system_gclk_gen_get_hz+0x70>)
    119e:	6870      	ldr	r0, [r6, #4]
    11a0:	04c0      	lsls	r0, r0, #19
    11a2:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    11a4:	4b14      	ldr	r3, [pc, #80]	; (11f8 <system_gclk_gen_get_hz+0x7c>)
    11a6:	4798      	blx	r3
    11a8:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    11aa:	4b12      	ldr	r3, [pc, #72]	; (11f4 <system_gclk_gen_get_hz+0x78>)
    11ac:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    11ae:	6876      	ldr	r6, [r6, #4]
    11b0:	02f6      	lsls	r6, r6, #11
    11b2:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    11b4:	4b11      	ldr	r3, [pc, #68]	; (11fc <system_gclk_gen_get_hz+0x80>)
    11b6:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    11b8:	4a0c      	ldr	r2, [pc, #48]	; (11ec <system_gclk_gen_get_hz+0x70>)
    11ba:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    11bc:	b25b      	sxtb	r3, r3
    11be:	2b00      	cmp	r3, #0
    11c0:	dbfb      	blt.n	11ba <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    11c2:	4b0a      	ldr	r3, [pc, #40]	; (11ec <system_gclk_gen_get_hz+0x70>)
    11c4:	689c      	ldr	r4, [r3, #8]
    11c6:	0224      	lsls	r4, r4, #8
    11c8:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    11ca:	4b0d      	ldr	r3, [pc, #52]	; (1200 <system_gclk_gen_get_hz+0x84>)
    11cc:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    11ce:	2e00      	cmp	r6, #0
    11d0:	d107      	bne.n	11e2 <system_gclk_gen_get_hz+0x66>
    11d2:	2c01      	cmp	r4, #1
    11d4:	d907      	bls.n	11e6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    11d6:	0021      	movs	r1, r4
    11d8:	0028      	movs	r0, r5
    11da:	4b0a      	ldr	r3, [pc, #40]	; (1204 <system_gclk_gen_get_hz+0x88>)
    11dc:	4798      	blx	r3
    11de:	0005      	movs	r5, r0
    11e0:	e001      	b.n	11e6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    11e2:	3401      	adds	r4, #1
    11e4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    11e6:	0028      	movs	r0, r5
    11e8:	bd70      	pop	{r4, r5, r6, pc}
    11ea:	46c0      	nop			; (mov r8, r8)
    11ec:	40000c00 	.word	0x40000c00
    11f0:	00000e0d 	.word	0x00000e0d
    11f4:	40000c04 	.word	0x40000c04
    11f8:	00000e7d 	.word	0x00000e7d
    11fc:	40000c08 	.word	0x40000c08
    1200:	00000e4d 	.word	0x00000e4d
    1204:	00001561 	.word	0x00001561

00001208 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1208:	b510      	push	{r4, lr}
    120a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    120c:	4b06      	ldr	r3, [pc, #24]	; (1228 <system_gclk_chan_enable+0x20>)
    120e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1210:	4b06      	ldr	r3, [pc, #24]	; (122c <system_gclk_chan_enable+0x24>)
    1212:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1214:	4a06      	ldr	r2, [pc, #24]	; (1230 <system_gclk_chan_enable+0x28>)
    1216:	8853      	ldrh	r3, [r2, #2]
    1218:	2180      	movs	r1, #128	; 0x80
    121a:	01c9      	lsls	r1, r1, #7
    121c:	430b      	orrs	r3, r1
    121e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1220:	4b04      	ldr	r3, [pc, #16]	; (1234 <system_gclk_chan_enable+0x2c>)
    1222:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1224:	bd10      	pop	{r4, pc}
    1226:	46c0      	nop			; (mov r8, r8)
    1228:	00000e0d 	.word	0x00000e0d
    122c:	40000c02 	.word	0x40000c02
    1230:	40000c00 	.word	0x40000c00
    1234:	00000e4d 	.word	0x00000e4d

00001238 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1238:	b510      	push	{r4, lr}
    123a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    123c:	4b0f      	ldr	r3, [pc, #60]	; (127c <system_gclk_chan_disable+0x44>)
    123e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1240:	4b0f      	ldr	r3, [pc, #60]	; (1280 <system_gclk_chan_disable+0x48>)
    1242:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1244:	4a0f      	ldr	r2, [pc, #60]	; (1284 <system_gclk_chan_disable+0x4c>)
    1246:	8853      	ldrh	r3, [r2, #2]
    1248:	051b      	lsls	r3, r3, #20
    124a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    124c:	8853      	ldrh	r3, [r2, #2]
    124e:	490e      	ldr	r1, [pc, #56]	; (1288 <system_gclk_chan_disable+0x50>)
    1250:	400b      	ands	r3, r1
    1252:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1254:	8853      	ldrh	r3, [r2, #2]
    1256:	490d      	ldr	r1, [pc, #52]	; (128c <system_gclk_chan_disable+0x54>)
    1258:	400b      	ands	r3, r1
    125a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    125c:	0011      	movs	r1, r2
    125e:	2280      	movs	r2, #128	; 0x80
    1260:	01d2      	lsls	r2, r2, #7
    1262:	884b      	ldrh	r3, [r1, #2]
    1264:	4213      	tst	r3, r2
    1266:	d1fc      	bne.n	1262 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1268:	4906      	ldr	r1, [pc, #24]	; (1284 <system_gclk_chan_disable+0x4c>)
    126a:	884a      	ldrh	r2, [r1, #2]
    126c:	0203      	lsls	r3, r0, #8
    126e:	4806      	ldr	r0, [pc, #24]	; (1288 <system_gclk_chan_disable+0x50>)
    1270:	4002      	ands	r2, r0
    1272:	4313      	orrs	r3, r2
    1274:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1276:	4b06      	ldr	r3, [pc, #24]	; (1290 <system_gclk_chan_disable+0x58>)
    1278:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    127a:	bd10      	pop	{r4, pc}
    127c:	00000e0d 	.word	0x00000e0d
    1280:	40000c02 	.word	0x40000c02
    1284:	40000c00 	.word	0x40000c00
    1288:	fffff0ff 	.word	0xfffff0ff
    128c:	ffffbfff 	.word	0xffffbfff
    1290:	00000e4d 	.word	0x00000e4d

00001294 <system_gclk_chan_set_config>:
{
    1294:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1296:	780c      	ldrb	r4, [r1, #0]
    1298:	0224      	lsls	r4, r4, #8
    129a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    129c:	4b02      	ldr	r3, [pc, #8]	; (12a8 <system_gclk_chan_set_config+0x14>)
    129e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    12a0:	b2a4      	uxth	r4, r4
    12a2:	4b02      	ldr	r3, [pc, #8]	; (12ac <system_gclk_chan_set_config+0x18>)
    12a4:	805c      	strh	r4, [r3, #2]
}
    12a6:	bd10      	pop	{r4, pc}
    12a8:	00001239 	.word	0x00001239
    12ac:	40000c00 	.word	0x40000c00

000012b0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    12b0:	b510      	push	{r4, lr}
    12b2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    12b4:	4b06      	ldr	r3, [pc, #24]	; (12d0 <system_gclk_chan_get_hz+0x20>)
    12b6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    12b8:	4b06      	ldr	r3, [pc, #24]	; (12d4 <system_gclk_chan_get_hz+0x24>)
    12ba:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    12bc:	4b06      	ldr	r3, [pc, #24]	; (12d8 <system_gclk_chan_get_hz+0x28>)
    12be:	885c      	ldrh	r4, [r3, #2]
    12c0:	0524      	lsls	r4, r4, #20
    12c2:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    12c4:	4b05      	ldr	r3, [pc, #20]	; (12dc <system_gclk_chan_get_hz+0x2c>)
    12c6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    12c8:	0020      	movs	r0, r4
    12ca:	4b05      	ldr	r3, [pc, #20]	; (12e0 <system_gclk_chan_get_hz+0x30>)
    12cc:	4798      	blx	r3
}
    12ce:	bd10      	pop	{r4, pc}
    12d0:	00000e0d 	.word	0x00000e0d
    12d4:	40000c02 	.word	0x40000c02
    12d8:	40000c00 	.word	0x40000c00
    12dc:	00000e4d 	.word	0x00000e4d
    12e0:	0000117d 	.word	0x0000117d

000012e4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    12e4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    12e6:	78d3      	ldrb	r3, [r2, #3]
    12e8:	2b00      	cmp	r3, #0
    12ea:	d135      	bne.n	1358 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    12ec:	7813      	ldrb	r3, [r2, #0]
    12ee:	2b80      	cmp	r3, #128	; 0x80
    12f0:	d029      	beq.n	1346 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    12f2:	061b      	lsls	r3, r3, #24
    12f4:	2480      	movs	r4, #128	; 0x80
    12f6:	0264      	lsls	r4, r4, #9
    12f8:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    12fa:	7854      	ldrb	r4, [r2, #1]
    12fc:	2502      	movs	r5, #2
    12fe:	43ac      	bics	r4, r5
    1300:	d106      	bne.n	1310 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1302:	7894      	ldrb	r4, [r2, #2]
    1304:	2c00      	cmp	r4, #0
    1306:	d120      	bne.n	134a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1308:	2480      	movs	r4, #128	; 0x80
    130a:	02a4      	lsls	r4, r4, #10
    130c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    130e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1310:	7854      	ldrb	r4, [r2, #1]
    1312:	3c01      	subs	r4, #1
    1314:	2c01      	cmp	r4, #1
    1316:	d91c      	bls.n	1352 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1318:	040d      	lsls	r5, r1, #16
    131a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    131c:	24a0      	movs	r4, #160	; 0xa0
    131e:	05e4      	lsls	r4, r4, #23
    1320:	432c      	orrs	r4, r5
    1322:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1324:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1326:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1328:	24d0      	movs	r4, #208	; 0xd0
    132a:	0624      	lsls	r4, r4, #24
    132c:	432c      	orrs	r4, r5
    132e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1330:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1332:	78d4      	ldrb	r4, [r2, #3]
    1334:	2c00      	cmp	r4, #0
    1336:	d122      	bne.n	137e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1338:	035b      	lsls	r3, r3, #13
    133a:	d51c      	bpl.n	1376 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    133c:	7893      	ldrb	r3, [r2, #2]
    133e:	2b01      	cmp	r3, #1
    1340:	d01e      	beq.n	1380 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1342:	6141      	str	r1, [r0, #20]
    1344:	e017      	b.n	1376 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1346:	2300      	movs	r3, #0
    1348:	e7d7      	b.n	12fa <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    134a:	24c0      	movs	r4, #192	; 0xc0
    134c:	02e4      	lsls	r4, r4, #11
    134e:	4323      	orrs	r3, r4
    1350:	e7dd      	b.n	130e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1352:	4c0d      	ldr	r4, [pc, #52]	; (1388 <_system_pinmux_config+0xa4>)
    1354:	4023      	ands	r3, r4
    1356:	e7df      	b.n	1318 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1358:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    135a:	040c      	lsls	r4, r1, #16
    135c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    135e:	23a0      	movs	r3, #160	; 0xa0
    1360:	05db      	lsls	r3, r3, #23
    1362:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1364:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1366:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1368:	23d0      	movs	r3, #208	; 0xd0
    136a:	061b      	lsls	r3, r3, #24
    136c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    136e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1370:	78d3      	ldrb	r3, [r2, #3]
    1372:	2b00      	cmp	r3, #0
    1374:	d103      	bne.n	137e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1376:	7853      	ldrb	r3, [r2, #1]
    1378:	3b01      	subs	r3, #1
    137a:	2b01      	cmp	r3, #1
    137c:	d902      	bls.n	1384 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    137e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1380:	6181      	str	r1, [r0, #24]
    1382:	e7f8      	b.n	1376 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1384:	6081      	str	r1, [r0, #8]
}
    1386:	e7fa      	b.n	137e <_system_pinmux_config+0x9a>
    1388:	fffbffff 	.word	0xfffbffff

0000138c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    138c:	b510      	push	{r4, lr}
    138e:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1390:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1392:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1394:	2900      	cmp	r1, #0
    1396:	d104      	bne.n	13a2 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1398:	0943      	lsrs	r3, r0, #5
    139a:	01db      	lsls	r3, r3, #7
    139c:	4905      	ldr	r1, [pc, #20]	; (13b4 <system_pinmux_pin_set_config+0x28>)
    139e:	468c      	mov	ip, r1
    13a0:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    13a2:	241f      	movs	r4, #31
    13a4:	4020      	ands	r0, r4
    13a6:	2101      	movs	r1, #1
    13a8:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    13aa:	0018      	movs	r0, r3
    13ac:	4b02      	ldr	r3, [pc, #8]	; (13b8 <system_pinmux_pin_set_config+0x2c>)
    13ae:	4798      	blx	r3
}
    13b0:	bd10      	pop	{r4, pc}
    13b2:	46c0      	nop			; (mov r8, r8)
    13b4:	41004400 	.word	0x41004400
    13b8:	000012e5 	.word	0x000012e5

000013bc <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    13bc:	4770      	bx	lr
	...

000013c0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    13c0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    13c2:	4b05      	ldr	r3, [pc, #20]	; (13d8 <system_init+0x18>)
    13c4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    13c6:	4b05      	ldr	r3, [pc, #20]	; (13dc <system_init+0x1c>)
    13c8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    13ca:	4b05      	ldr	r3, [pc, #20]	; (13e0 <system_init+0x20>)
    13cc:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    13ce:	4b05      	ldr	r3, [pc, #20]	; (13e4 <system_init+0x24>)
    13d0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    13d2:	4b05      	ldr	r3, [pc, #20]	; (13e8 <system_init+0x28>)
    13d4:	4798      	blx	r3
}
    13d6:	bd10      	pop	{r4, pc}
    13d8:	00000fc5 	.word	0x00000fc5
    13dc:	00000dbd 	.word	0x00000dbd
    13e0:	000013bd 	.word	0x000013bd
    13e4:	000001bd 	.word	0x000001bd
    13e8:	000013bd 	.word	0x000013bd

000013ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    13ec:	e7fe      	b.n	13ec <Dummy_Handler>
	...

000013f0 <Reset_Handler>:
{
    13f0:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    13f2:	4a1a      	ldr	r2, [pc, #104]	; (145c <Reset_Handler+0x6c>)
    13f4:	4b1a      	ldr	r3, [pc, #104]	; (1460 <Reset_Handler+0x70>)
    13f6:	429a      	cmp	r2, r3
    13f8:	d011      	beq.n	141e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    13fa:	001a      	movs	r2, r3
    13fc:	4b19      	ldr	r3, [pc, #100]	; (1464 <Reset_Handler+0x74>)
    13fe:	429a      	cmp	r2, r3
    1400:	d20d      	bcs.n	141e <Reset_Handler+0x2e>
    1402:	4a19      	ldr	r2, [pc, #100]	; (1468 <Reset_Handler+0x78>)
    1404:	3303      	adds	r3, #3
    1406:	1a9b      	subs	r3, r3, r2
    1408:	089b      	lsrs	r3, r3, #2
    140a:	3301      	adds	r3, #1
    140c:	009b      	lsls	r3, r3, #2
    140e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1410:	4813      	ldr	r0, [pc, #76]	; (1460 <Reset_Handler+0x70>)
    1412:	4912      	ldr	r1, [pc, #72]	; (145c <Reset_Handler+0x6c>)
    1414:	588c      	ldr	r4, [r1, r2]
    1416:	5084      	str	r4, [r0, r2]
    1418:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    141a:	429a      	cmp	r2, r3
    141c:	d1fa      	bne.n	1414 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    141e:	4a13      	ldr	r2, [pc, #76]	; (146c <Reset_Handler+0x7c>)
    1420:	4b13      	ldr	r3, [pc, #76]	; (1470 <Reset_Handler+0x80>)
    1422:	429a      	cmp	r2, r3
    1424:	d20a      	bcs.n	143c <Reset_Handler+0x4c>
    1426:	43d3      	mvns	r3, r2
    1428:	4911      	ldr	r1, [pc, #68]	; (1470 <Reset_Handler+0x80>)
    142a:	185b      	adds	r3, r3, r1
    142c:	2103      	movs	r1, #3
    142e:	438b      	bics	r3, r1
    1430:	3304      	adds	r3, #4
    1432:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1434:	2100      	movs	r1, #0
    1436:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1438:	4293      	cmp	r3, r2
    143a:	d1fc      	bne.n	1436 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    143c:	4a0d      	ldr	r2, [pc, #52]	; (1474 <Reset_Handler+0x84>)
    143e:	21ff      	movs	r1, #255	; 0xff
    1440:	4b0d      	ldr	r3, [pc, #52]	; (1478 <Reset_Handler+0x88>)
    1442:	438b      	bics	r3, r1
    1444:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1446:	4a0d      	ldr	r2, [pc, #52]	; (147c <Reset_Handler+0x8c>)
    1448:	6853      	ldr	r3, [r2, #4]
    144a:	397f      	subs	r1, #127	; 0x7f
    144c:	430b      	orrs	r3, r1
    144e:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1450:	4b0b      	ldr	r3, [pc, #44]	; (1480 <Reset_Handler+0x90>)
    1452:	4798      	blx	r3
        main();
    1454:	4b0b      	ldr	r3, [pc, #44]	; (1484 <Reset_Handler+0x94>)
    1456:	4798      	blx	r3
    1458:	e7fe      	b.n	1458 <Reset_Handler+0x68>
    145a:	46c0      	nop			; (mov r8, r8)
    145c:	00001738 	.word	0x00001738
    1460:	20000000 	.word	0x20000000
    1464:	2000000c 	.word	0x2000000c
    1468:	20000004 	.word	0x20000004
    146c:	2000000c 	.word	0x2000000c
    1470:	20000148 	.word	0x20000148
    1474:	e000ed00 	.word	0xe000ed00
    1478:	00000000 	.word	0x00000000
    147c:	41004000 	.word	0x41004000
    1480:	00001679 	.word	0x00001679
    1484:	00001489 	.word	0x00001489

00001488 <main>:
*
***************************************************************************************************************************/
#include <main.h>

int main (void)
{
    1488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    148a:	46de      	mov	lr, fp
    148c:	4657      	mov	r7, sl
    148e:	464e      	mov	r6, r9
    1490:	4645      	mov	r5, r8
    1492:	b5e0      	push	{r5, r6, r7, lr}
	system_init();
    1494:	4b27      	ldr	r3, [pc, #156]	; (1534 <main+0xac>)
    1496:	4798      	blx	r3
	sys_config();
    1498:	4b27      	ldr	r3, [pc, #156]	; (1538 <main+0xb0>)
    149a:	4798      	blx	r3
	//config_whoami(); - sysconfig
	configMotors();
    149c:	4b27      	ldr	r3, [pc, #156]	; (153c <main+0xb4>)
    149e:	4798      	blx	r3
	
		//TODO: TEST cmd_response values
		cmd_resp.lastCmdRxd = 0x11;
    14a0:	2211      	movs	r2, #17
    14a2:	4b27      	ldr	r3, [pc, #156]	; (1540 <main+0xb8>)
    14a4:	711a      	strb	r2, [r3, #4]


	while(1)
	{
		/* Process new Data */
		if(flgcmdRx == TRUE)
    14a6:	4b27      	ldr	r3, [pc, #156]	; (1544 <main+0xbc>)
    14a8:	469a      	mov	sl, r3
		{
			//Reset Flag
			flgcmdRx = FALSE;	
    14aa:	469b      	mov	fp, r3
			
			// TODO: Either set cmd_resp and reply as MS Polls for i2cread, 
			// Or setup GPIO between MS/SL to indicate dataReady
			cmd_resp.encoderLoc = 0;
    14ac:	4c24      	ldr	r4, [pc, #144]	; (1540 <main+0xb8>)
    14ae:	e004      	b.n	14ba <main+0x32>
			cmd_sent.encLocMoveTo = 0;

			port_pin_toggle_output_level(STATUSLED);
			
			// Switch Case for Motor drivers
			switch(cmd_processed.cmdID)
    14b0:	2b55      	cmp	r3, #85	; 0x55
    14b2:	d109      	bne.n	14c8 <main+0x40>
			{
				case PWR_UP:	
					motorCW(50);
    14b4:	2032      	movs	r0, #50	; 0x32
    14b6:	4b24      	ldr	r3, [pc, #144]	; (1548 <main+0xc0>)
    14b8:	4798      	blx	r3
			flgcmdRx = FALSE;	
    14ba:	2200      	movs	r2, #0
			cmd_resp.status = dWAIT;
    14bc:	23be      	movs	r3, #190	; 0xbe
    14be:	469c      	mov	ip, r3
			cmd_processed = cmd_sent;
    14c0:	4822      	ldr	r0, [pc, #136]	; (154c <main+0xc4>)
    14c2:	4923      	ldr	r1, [pc, #140]	; (1550 <main+0xc8>)
	port_base->OUTTGL.reg = pin_mask;
    14c4:	4b23      	ldr	r3, [pc, #140]	; (1554 <main+0xcc>)
    14c6:	4699      	mov	r9, r3
		if(flgcmdRx == TRUE)
    14c8:	4653      	mov	r3, sl
    14ca:	781b      	ldrb	r3, [r3, #0]
    14cc:	2b01      	cmp	r3, #1
    14ce:	d1fd      	bne.n	14cc <main+0x44>
			flgcmdRx = FALSE;	
    14d0:	465b      	mov	r3, fp
    14d2:	701a      	strb	r2, [r3, #0]
			cmd_resp.encoderLoc = 0;
    14d4:	6022      	str	r2, [r4, #0]
			cmd_resp.lastCmdStatus = 0;
    14d6:	7162      	strb	r2, [r4, #5]
			cmd_resp.config = 0;
    14d8:	71e2      	strb	r2, [r4, #7]
			cmd_resp.motorStatus = 0;
    14da:	7262      	strb	r2, [r4, #9]
			cmd_resp.status = dWAIT;
    14dc:	4663      	mov	r3, ip
    14de:	7223      	strb	r3, [r4, #8]
			cmd_processed = cmd_sent;
    14e0:	0003      	movs	r3, r0
    14e2:	000d      	movs	r5, r1
    14e4:	cdc0      	ldmia	r5!, {r6, r7}
    14e6:	c3c0      	stmia	r3!, {r6, r7}
			cmd_sent.cmdID = 0;
    14e8:	710a      	strb	r2, [r1, #4]
			cmd_sent.encLocMoveTo = 0;
    14ea:	600a      	str	r2, [r1, #0]
    14ec:	2380      	movs	r3, #128	; 0x80
    14ee:	035b      	lsls	r3, r3, #13
    14f0:	464d      	mov	r5, r9
    14f2:	61eb      	str	r3, [r5, #28]
			switch(cmd_processed.cmdID)
    14f4:	7903      	ldrb	r3, [r0, #4]
    14f6:	2b66      	cmp	r3, #102	; 0x66
    14f8:	d00b      	beq.n	1512 <main+0x8a>
    14fa:	b2dd      	uxtb	r5, r3
    14fc:	2d66      	cmp	r5, #102	; 0x66
    14fe:	d9d7      	bls.n	14b0 <main+0x28>
    1500:	b2dd      	uxtb	r5, r3
    1502:	2d86      	cmp	r5, #134	; 0x86
    1504:	d009      	beq.n	151a <main+0x92>
    1506:	2da0      	cmp	r5, #160	; 0xa0
    1508:	d1de      	bne.n	14c8 <main+0x40>
					cmd_resp.status = dRDY;
					cmd_resp.encoderLoc = endPwrDown;		
					break;
						
				case MEAS_ST:
					motorCCW(50);
    150a:	2032      	movs	r0, #50	; 0x32
    150c:	4b12      	ldr	r3, [pc, #72]	; (1558 <main+0xd0>)
    150e:	4798      	blx	r3
					cmd_resp.status = dRDY;
					cmd_resp.encoderLoc = endMeas;
					break;
    1510:	e7d3      	b.n	14ba <main+0x32>
					motorCW(50);
    1512:	2032      	movs	r0, #50	; 0x32
    1514:	4b0c      	ldr	r3, [pc, #48]	; (1548 <main+0xc0>)
    1516:	4798      	blx	r3
					break;
    1518:	e7cf      	b.n	14ba <main+0x32>
		port_base->OUTSET.reg = pin_mask;
    151a:	4f0e      	ldr	r7, [pc, #56]	; (1554 <main+0xcc>)
    151c:	2380      	movs	r3, #128	; 0x80
    151e:	035b      	lsls	r3, r3, #13
    1520:	4698      	mov	r8, r3
    1522:	61bb      	str	r3, [r7, #24]
				
				case ESTP:
					port_pin_set_output_level(STATUSLED, HIGH);
					delay_ms(500);
    1524:	20fa      	movs	r0, #250	; 0xfa
    1526:	0040      	lsls	r0, r0, #1
    1528:	4b0c      	ldr	r3, [pc, #48]	; (155c <main+0xd4>)
    152a:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    152c:	4643      	mov	r3, r8
    152e:	617b      	str	r3, [r7, #20]
					port_pin_set_output_level(STATUSLED, LOW);
					cmd_resp.status = dRDY;
					cmd_resp.encoderLoc = endESTOP;
					break;
    1530:	e7c3      	b.n	14ba <main+0x32>
    1532:	46c0      	nop			; (mov r8, r8)
    1534:	000013c1 	.word	0x000013c1
    1538:	0000084d 	.word	0x0000084d
    153c:	000006fd 	.word	0x000006fd
    1540:	200000a8 	.word	0x200000a8
    1544:	200000d0 	.word	0x200000d0
    1548:	00000751 	.word	0x00000751
    154c:	200000c0 	.word	0x200000c0
    1550:	200000c8 	.word	0x200000c8
    1554:	41004400 	.word	0x41004400
    1558:	0000070d 	.word	0x0000070d
    155c:	00000d2d 	.word	0x00000d2d

00001560 <__udivsi3>:
    1560:	2200      	movs	r2, #0
    1562:	0843      	lsrs	r3, r0, #1
    1564:	428b      	cmp	r3, r1
    1566:	d374      	bcc.n	1652 <__udivsi3+0xf2>
    1568:	0903      	lsrs	r3, r0, #4
    156a:	428b      	cmp	r3, r1
    156c:	d35f      	bcc.n	162e <__udivsi3+0xce>
    156e:	0a03      	lsrs	r3, r0, #8
    1570:	428b      	cmp	r3, r1
    1572:	d344      	bcc.n	15fe <__udivsi3+0x9e>
    1574:	0b03      	lsrs	r3, r0, #12
    1576:	428b      	cmp	r3, r1
    1578:	d328      	bcc.n	15cc <__udivsi3+0x6c>
    157a:	0c03      	lsrs	r3, r0, #16
    157c:	428b      	cmp	r3, r1
    157e:	d30d      	bcc.n	159c <__udivsi3+0x3c>
    1580:	22ff      	movs	r2, #255	; 0xff
    1582:	0209      	lsls	r1, r1, #8
    1584:	ba12      	rev	r2, r2
    1586:	0c03      	lsrs	r3, r0, #16
    1588:	428b      	cmp	r3, r1
    158a:	d302      	bcc.n	1592 <__udivsi3+0x32>
    158c:	1212      	asrs	r2, r2, #8
    158e:	0209      	lsls	r1, r1, #8
    1590:	d065      	beq.n	165e <__udivsi3+0xfe>
    1592:	0b03      	lsrs	r3, r0, #12
    1594:	428b      	cmp	r3, r1
    1596:	d319      	bcc.n	15cc <__udivsi3+0x6c>
    1598:	e000      	b.n	159c <__udivsi3+0x3c>
    159a:	0a09      	lsrs	r1, r1, #8
    159c:	0bc3      	lsrs	r3, r0, #15
    159e:	428b      	cmp	r3, r1
    15a0:	d301      	bcc.n	15a6 <__udivsi3+0x46>
    15a2:	03cb      	lsls	r3, r1, #15
    15a4:	1ac0      	subs	r0, r0, r3
    15a6:	4152      	adcs	r2, r2
    15a8:	0b83      	lsrs	r3, r0, #14
    15aa:	428b      	cmp	r3, r1
    15ac:	d301      	bcc.n	15b2 <__udivsi3+0x52>
    15ae:	038b      	lsls	r3, r1, #14
    15b0:	1ac0      	subs	r0, r0, r3
    15b2:	4152      	adcs	r2, r2
    15b4:	0b43      	lsrs	r3, r0, #13
    15b6:	428b      	cmp	r3, r1
    15b8:	d301      	bcc.n	15be <__udivsi3+0x5e>
    15ba:	034b      	lsls	r3, r1, #13
    15bc:	1ac0      	subs	r0, r0, r3
    15be:	4152      	adcs	r2, r2
    15c0:	0b03      	lsrs	r3, r0, #12
    15c2:	428b      	cmp	r3, r1
    15c4:	d301      	bcc.n	15ca <__udivsi3+0x6a>
    15c6:	030b      	lsls	r3, r1, #12
    15c8:	1ac0      	subs	r0, r0, r3
    15ca:	4152      	adcs	r2, r2
    15cc:	0ac3      	lsrs	r3, r0, #11
    15ce:	428b      	cmp	r3, r1
    15d0:	d301      	bcc.n	15d6 <__udivsi3+0x76>
    15d2:	02cb      	lsls	r3, r1, #11
    15d4:	1ac0      	subs	r0, r0, r3
    15d6:	4152      	adcs	r2, r2
    15d8:	0a83      	lsrs	r3, r0, #10
    15da:	428b      	cmp	r3, r1
    15dc:	d301      	bcc.n	15e2 <__udivsi3+0x82>
    15de:	028b      	lsls	r3, r1, #10
    15e0:	1ac0      	subs	r0, r0, r3
    15e2:	4152      	adcs	r2, r2
    15e4:	0a43      	lsrs	r3, r0, #9
    15e6:	428b      	cmp	r3, r1
    15e8:	d301      	bcc.n	15ee <__udivsi3+0x8e>
    15ea:	024b      	lsls	r3, r1, #9
    15ec:	1ac0      	subs	r0, r0, r3
    15ee:	4152      	adcs	r2, r2
    15f0:	0a03      	lsrs	r3, r0, #8
    15f2:	428b      	cmp	r3, r1
    15f4:	d301      	bcc.n	15fa <__udivsi3+0x9a>
    15f6:	020b      	lsls	r3, r1, #8
    15f8:	1ac0      	subs	r0, r0, r3
    15fa:	4152      	adcs	r2, r2
    15fc:	d2cd      	bcs.n	159a <__udivsi3+0x3a>
    15fe:	09c3      	lsrs	r3, r0, #7
    1600:	428b      	cmp	r3, r1
    1602:	d301      	bcc.n	1608 <__udivsi3+0xa8>
    1604:	01cb      	lsls	r3, r1, #7
    1606:	1ac0      	subs	r0, r0, r3
    1608:	4152      	adcs	r2, r2
    160a:	0983      	lsrs	r3, r0, #6
    160c:	428b      	cmp	r3, r1
    160e:	d301      	bcc.n	1614 <__udivsi3+0xb4>
    1610:	018b      	lsls	r3, r1, #6
    1612:	1ac0      	subs	r0, r0, r3
    1614:	4152      	adcs	r2, r2
    1616:	0943      	lsrs	r3, r0, #5
    1618:	428b      	cmp	r3, r1
    161a:	d301      	bcc.n	1620 <__udivsi3+0xc0>
    161c:	014b      	lsls	r3, r1, #5
    161e:	1ac0      	subs	r0, r0, r3
    1620:	4152      	adcs	r2, r2
    1622:	0903      	lsrs	r3, r0, #4
    1624:	428b      	cmp	r3, r1
    1626:	d301      	bcc.n	162c <__udivsi3+0xcc>
    1628:	010b      	lsls	r3, r1, #4
    162a:	1ac0      	subs	r0, r0, r3
    162c:	4152      	adcs	r2, r2
    162e:	08c3      	lsrs	r3, r0, #3
    1630:	428b      	cmp	r3, r1
    1632:	d301      	bcc.n	1638 <__udivsi3+0xd8>
    1634:	00cb      	lsls	r3, r1, #3
    1636:	1ac0      	subs	r0, r0, r3
    1638:	4152      	adcs	r2, r2
    163a:	0883      	lsrs	r3, r0, #2
    163c:	428b      	cmp	r3, r1
    163e:	d301      	bcc.n	1644 <__udivsi3+0xe4>
    1640:	008b      	lsls	r3, r1, #2
    1642:	1ac0      	subs	r0, r0, r3
    1644:	4152      	adcs	r2, r2
    1646:	0843      	lsrs	r3, r0, #1
    1648:	428b      	cmp	r3, r1
    164a:	d301      	bcc.n	1650 <__udivsi3+0xf0>
    164c:	004b      	lsls	r3, r1, #1
    164e:	1ac0      	subs	r0, r0, r3
    1650:	4152      	adcs	r2, r2
    1652:	1a41      	subs	r1, r0, r1
    1654:	d200      	bcs.n	1658 <__udivsi3+0xf8>
    1656:	4601      	mov	r1, r0
    1658:	4152      	adcs	r2, r2
    165a:	4610      	mov	r0, r2
    165c:	4770      	bx	lr
    165e:	e7ff      	b.n	1660 <__udivsi3+0x100>
    1660:	b501      	push	{r0, lr}
    1662:	2000      	movs	r0, #0
    1664:	f000 f806 	bl	1674 <__aeabi_idiv0>
    1668:	bd02      	pop	{r1, pc}
    166a:	46c0      	nop			; (mov r8, r8)

0000166c <__aeabi_uidivmod>:
    166c:	2900      	cmp	r1, #0
    166e:	d0f7      	beq.n	1660 <__udivsi3+0x100>
    1670:	e776      	b.n	1560 <__udivsi3>
    1672:	4770      	bx	lr

00001674 <__aeabi_idiv0>:
    1674:	4770      	bx	lr
    1676:	46c0      	nop			; (mov r8, r8)

00001678 <__libc_init_array>:
    1678:	b570      	push	{r4, r5, r6, lr}
    167a:	2600      	movs	r6, #0
    167c:	4d0c      	ldr	r5, [pc, #48]	; (16b0 <__libc_init_array+0x38>)
    167e:	4c0d      	ldr	r4, [pc, #52]	; (16b4 <__libc_init_array+0x3c>)
    1680:	1b64      	subs	r4, r4, r5
    1682:	10a4      	asrs	r4, r4, #2
    1684:	42a6      	cmp	r6, r4
    1686:	d109      	bne.n	169c <__libc_init_array+0x24>
    1688:	2600      	movs	r6, #0
    168a:	f000 f845 	bl	1718 <_init>
    168e:	4d0a      	ldr	r5, [pc, #40]	; (16b8 <__libc_init_array+0x40>)
    1690:	4c0a      	ldr	r4, [pc, #40]	; (16bc <__libc_init_array+0x44>)
    1692:	1b64      	subs	r4, r4, r5
    1694:	10a4      	asrs	r4, r4, #2
    1696:	42a6      	cmp	r6, r4
    1698:	d105      	bne.n	16a6 <__libc_init_array+0x2e>
    169a:	bd70      	pop	{r4, r5, r6, pc}
    169c:	00b3      	lsls	r3, r6, #2
    169e:	58eb      	ldr	r3, [r5, r3]
    16a0:	4798      	blx	r3
    16a2:	3601      	adds	r6, #1
    16a4:	e7ee      	b.n	1684 <__libc_init_array+0xc>
    16a6:	00b3      	lsls	r3, r6, #2
    16a8:	58eb      	ldr	r3, [r5, r3]
    16aa:	4798      	blx	r3
    16ac:	3601      	adds	r6, #1
    16ae:	e7f2      	b.n	1696 <__libc_init_array+0x1e>
    16b0:	00001724 	.word	0x00001724
    16b4:	00001724 	.word	0x00001724
    16b8:	00001724 	.word	0x00001724
    16bc:	00001728 	.word	0x00001728
    16c0:	42000800 	.word	0x42000800
    16c4:	42000c00 	.word	0x42000c00
    16c8:	42001000 	.word	0x42001000
    16cc:	42001400 	.word	0x42001400
    16d0:	42001800 	.word	0x42001800
    16d4:	42001c00 	.word	0x42001c00
    16d8:	00000e8e 	.word	0x00000e8e
    16dc:	00000e8a 	.word	0x00000e8a
    16e0:	00000e8a 	.word	0x00000e8a
    16e4:	00000eda 	.word	0x00000eda
    16e8:	00000eda 	.word	0x00000eda
    16ec:	00000ea2 	.word	0x00000ea2
    16f0:	00000e94 	.word	0x00000e94
    16f4:	00000ea8 	.word	0x00000ea8
    16f8:	00000f60 	.word	0x00000f60
    16fc:	00000f40 	.word	0x00000f40
    1700:	00000f40 	.word	0x00000f40
    1704:	00000fb0 	.word	0x00000fb0
    1708:	00000f52 	.word	0x00000f52
    170c:	00000f6e 	.word	0x00000f6e
    1710:	00000f44 	.word	0x00000f44
    1714:	00000f7c 	.word	0x00000f7c

00001718 <_init>:
    1718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    171a:	46c0      	nop			; (mov r8, r8)
    171c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    171e:	bc08      	pop	{r3}
    1720:	469e      	mov	lr, r3
    1722:	4770      	bx	lr

00001724 <__init_array_start>:
    1724:	000000cd 	.word	0x000000cd

00001728 <_fini>:
    1728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    172a:	46c0      	nop			; (mov r8, r8)
    172c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    172e:	bc08      	pop	{r3}
    1730:	469e      	mov	lr, r3
    1732:	4770      	bx	lr

00001734 <__fini_array_start>:
    1734:	000000a5 	.word	0x000000a5

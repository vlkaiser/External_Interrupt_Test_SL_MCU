
External_Interrupt_Test_SL_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005d8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  000005d8  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000038  20000004  000005dc  00020004  2**2
                  ALLOC
  3 .stack        00002004  2000003c  00000614  00020004  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00008ede  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000123c  00000000  00000000  00028f63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000001a8  00000000  00000000  0002a19f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000150  00000000  00000000  0002a347  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0000ffcc  00000000  00000000  0002a497  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000044b6  00000000  00000000  0003a463  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0005c8a8  00000000  00000000  0003e919  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000388  00000000  00000000  0009b1c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000013a0  00000000  00000000  0009b54c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	40 20 00 20 a9 04 00 00 a5 04 00 00 a5 04 00 00     @ . ............
	...
  2c:	a5 04 00 00 00 00 00 00 00 00 00 00 a5 04 00 00     ................
  3c:	a5 04 00 00 a5 04 00 00 a5 04 00 00 a5 04 00 00     ................
  4c:	a5 04 00 00 a5 04 00 00 a5 04 00 00 a5 04 00 00     ................
  5c:	a5 04 00 00 a5 04 00 00 a5 04 00 00 a5 04 00 00     ................
  6c:	a5 04 00 00 a5 04 00 00 a5 04 00 00 a5 04 00 00     ................
  7c:	a5 04 00 00 a5 04 00 00 a5 04 00 00 a5 04 00 00     ................
  8c:	a5 04 00 00 a5 04 00 00 a5 04 00 00 a5 04 00 00     ................
  9c:	a5 04 00 00 a5 04 00 00                             ........

000000a4 <__do_global_dtors_aux>:
  a4:	b510      	push	{r4, lr}
  a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
  a8:	7823      	ldrb	r3, [r4, #0]
  aa:	2b00      	cmp	r3, #0
  ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
  ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
  b0:	2b00      	cmp	r3, #0
  b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
  b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
  b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
  b8:	bf00      	nop
  ba:	2301      	movs	r3, #1
  bc:	7023      	strb	r3, [r4, #0]
  be:	bd10      	pop	{r4, pc}
  c0:	20000004 	.word	0x20000004
  c4:	00000000 	.word	0x00000000
  c8:	000005d8 	.word	0x000005d8

000000cc <frame_dummy>:
  cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
  ce:	b510      	push	{r4, lr}
  d0:	2b00      	cmp	r3, #0
  d2:	d003      	beq.n	dc <frame_dummy+0x10>
  d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
  d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
  d8:	e000      	b.n	dc <frame_dummy+0x10>
  da:	bf00      	nop
  dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
  de:	6803      	ldr	r3, [r0, #0]
  e0:	2b00      	cmp	r3, #0
  e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
  e4:	bd10      	pop	{r4, pc}
  e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
  e8:	2b00      	cmp	r3, #0
  ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
  ec:	4798      	blx	r3
  ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
  f0:	00000000 	.word	0x00000000
  f4:	20000008 	.word	0x20000008
  f8:	000005d8 	.word	0x000005d8
  fc:	000005d8 	.word	0x000005d8
 100:	00000000 	.word	0x00000000

00000104 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
 104:	4770      	bx	lr
	...

00000108 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
 108:	4b0c      	ldr	r3, [pc, #48]	; (13c <cpu_irq_enter_critical+0x34>)
 10a:	681b      	ldr	r3, [r3, #0]
 10c:	2b00      	cmp	r3, #0
 10e:	d106      	bne.n	11e <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 110:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
 114:	2b00      	cmp	r3, #0
 116:	d007      	beq.n	128 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
 118:	2200      	movs	r2, #0
 11a:	4b09      	ldr	r3, [pc, #36]	; (140 <cpu_irq_enter_critical+0x38>)
 11c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
 11e:	4a07      	ldr	r2, [pc, #28]	; (13c <cpu_irq_enter_critical+0x34>)
 120:	6813      	ldr	r3, [r2, #0]
 122:	3301      	adds	r3, #1
 124:	6013      	str	r3, [r2, #0]
}
 126:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
 128:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
 12a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
 12e:	2200      	movs	r2, #0
 130:	4b04      	ldr	r3, [pc, #16]	; (144 <cpu_irq_enter_critical+0x3c>)
 132:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
 134:	3201      	adds	r2, #1
 136:	4b02      	ldr	r3, [pc, #8]	; (140 <cpu_irq_enter_critical+0x38>)
 138:	701a      	strb	r2, [r3, #0]
 13a:	e7f0      	b.n	11e <cpu_irq_enter_critical+0x16>
 13c:	20000020 	.word	0x20000020
 140:	20000024 	.word	0x20000024
 144:	20000000 	.word	0x20000000

00000148 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
 148:	4b08      	ldr	r3, [pc, #32]	; (16c <cpu_irq_leave_critical+0x24>)
 14a:	681a      	ldr	r2, [r3, #0]
 14c:	3a01      	subs	r2, #1
 14e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
 150:	681b      	ldr	r3, [r3, #0]
 152:	2b00      	cmp	r3, #0
 154:	d109      	bne.n	16a <cpu_irq_leave_critical+0x22>
 156:	4b06      	ldr	r3, [pc, #24]	; (170 <cpu_irq_leave_critical+0x28>)
 158:	781b      	ldrb	r3, [r3, #0]
 15a:	2b00      	cmp	r3, #0
 15c:	d005      	beq.n	16a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
 15e:	2201      	movs	r2, #1
 160:	4b04      	ldr	r3, [pc, #16]	; (174 <cpu_irq_leave_critical+0x2c>)
 162:	701a      	strb	r2, [r3, #0]
 164:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 168:	b662      	cpsie	i
	}
}
 16a:	4770      	bx	lr
 16c:	20000020 	.word	0x20000020
 170:	20000024 	.word	0x20000024
 174:	20000000 	.word	0x20000000

00000178 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
 178:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
 17a:	490c      	ldr	r1, [pc, #48]	; (1ac <system_clock_source_osc8m_set_config+0x34>)
 17c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
 17e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
 180:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
 182:	7840      	ldrb	r0, [r0, #1]
 184:	2201      	movs	r2, #1
 186:	4010      	ands	r0, r2
 188:	0180      	lsls	r0, r0, #6
 18a:	2640      	movs	r6, #64	; 0x40
 18c:	43b3      	bics	r3, r6
 18e:	4303      	orrs	r3, r0
 190:	402a      	ands	r2, r5
 192:	01d2      	lsls	r2, r2, #7
 194:	2080      	movs	r0, #128	; 0x80
 196:	4383      	bics	r3, r0
 198:	4313      	orrs	r3, r2
 19a:	2203      	movs	r2, #3
 19c:	4022      	ands	r2, r4
 19e:	0212      	lsls	r2, r2, #8
 1a0:	4803      	ldr	r0, [pc, #12]	; (1b0 <system_clock_source_osc8m_set_config+0x38>)
 1a2:	4003      	ands	r3, r0
 1a4:	4313      	orrs	r3, r2
 1a6:	620b      	str	r3, [r1, #32]
}
 1a8:	bd70      	pop	{r4, r5, r6, pc}
 1aa:	46c0      	nop			; (mov r8, r8)
 1ac:	40000800 	.word	0x40000800
 1b0:	fffffcff 	.word	0xfffffcff

000001b4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
 1b4:	2807      	cmp	r0, #7
 1b6:	d803      	bhi.n	1c0 <system_clock_source_enable+0xc>
 1b8:	0080      	lsls	r0, r0, #2
 1ba:	4b1e      	ldr	r3, [pc, #120]	; (234 <system_clock_source_enable+0x80>)
 1bc:	581b      	ldr	r3, [r3, r0]
 1be:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
 1c0:	2017      	movs	r0, #23
 1c2:	e036      	b.n	232 <system_clock_source_enable+0x7e>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
 1c4:	4a1c      	ldr	r2, [pc, #112]	; (238 <system_clock_source_enable+0x84>)
 1c6:	6a13      	ldr	r3, [r2, #32]
 1c8:	2102      	movs	r1, #2
 1ca:	430b      	orrs	r3, r1
 1cc:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
 1ce:	2000      	movs	r0, #0
 1d0:	e02f      	b.n	232 <system_clock_source_enable+0x7e>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
 1d2:	4a19      	ldr	r2, [pc, #100]	; (238 <system_clock_source_enable+0x84>)
 1d4:	6993      	ldr	r3, [r2, #24]
 1d6:	2102      	movs	r1, #2
 1d8:	430b      	orrs	r3, r1
 1da:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
 1dc:	2000      	movs	r0, #0
		break;
 1de:	e028      	b.n	232 <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
 1e0:	4a15      	ldr	r2, [pc, #84]	; (238 <system_clock_source_enable+0x84>)
 1e2:	8a13      	ldrh	r3, [r2, #16]
 1e4:	2102      	movs	r1, #2
 1e6:	430b      	orrs	r3, r1
 1e8:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
 1ea:	2000      	movs	r0, #0
		break;
 1ec:	e021      	b.n	232 <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
 1ee:	4a12      	ldr	r2, [pc, #72]	; (238 <system_clock_source_enable+0x84>)
 1f0:	8a93      	ldrh	r3, [r2, #20]
 1f2:	2102      	movs	r1, #2
 1f4:	430b      	orrs	r3, r1
 1f6:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
 1f8:	2000      	movs	r0, #0
		break;
 1fa:	e01a      	b.n	232 <system_clock_source_enable+0x7e>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
 1fc:	4b0f      	ldr	r3, [pc, #60]	; (23c <system_clock_source_enable+0x88>)
 1fe:	681a      	ldr	r2, [r3, #0]
 200:	2102      	movs	r1, #2
 202:	430a      	orrs	r2, r1
 204:	601a      	str	r2, [r3, #0]
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
 206:	681b      	ldr	r3, [r3, #0]
 208:	4a0d      	ldr	r2, [pc, #52]	; (240 <system_clock_source_enable+0x8c>)
 20a:	4013      	ands	r3, r2
 20c:	4a0a      	ldr	r2, [pc, #40]	; (238 <system_clock_source_enable+0x84>)
 20e:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 210:	0011      	movs	r1, r2
 212:	2210      	movs	r2, #16
 214:	68cb      	ldr	r3, [r1, #12]
 216:	421a      	tst	r2, r3
 218:	d0fc      	beq.n	214 <system_clock_source_enable+0x60>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
 21a:	4a08      	ldr	r2, [pc, #32]	; (23c <system_clock_source_enable+0x88>)
 21c:	6891      	ldr	r1, [r2, #8]
 21e:	4b06      	ldr	r3, [pc, #24]	; (238 <system_clock_source_enable+0x84>)
 220:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
 222:	6851      	ldr	r1, [r2, #4]
 224:	6299      	str	r1, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
 226:	6812      	ldr	r2, [r2, #0]
 228:	b292      	uxth	r2, r2
 22a:	849a      	strh	r2, [r3, #36]	; 0x24
	return STATUS_OK;
 22c:	2000      	movs	r0, #0
 22e:	e000      	b.n	232 <system_clock_source_enable+0x7e>
		return STATUS_OK;
 230:	2000      	movs	r0, #0
}
 232:	4770      	bx	lr
 234:	00000598 	.word	0x00000598
 238:	40000800 	.word	0x40000800
 23c:	20000028 	.word	0x20000028
 240:	0000ff7f 	.word	0x0000ff7f

00000244 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
 244:	b530      	push	{r4, r5, lr}
 246:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
 248:	22c2      	movs	r2, #194	; 0xc2
 24a:	00d2      	lsls	r2, r2, #3
 24c:	4b1a      	ldr	r3, [pc, #104]	; (2b8 <system_clock_init+0x74>)
 24e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
 250:	4a1a      	ldr	r2, [pc, #104]	; (2bc <system_clock_init+0x78>)
 252:	6853      	ldr	r3, [r2, #4]
 254:	211e      	movs	r1, #30
 256:	438b      	bics	r3, r1
 258:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
 25a:	2301      	movs	r3, #1
 25c:	466a      	mov	r2, sp
 25e:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 260:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
 262:	4d17      	ldr	r5, [pc, #92]	; (2c0 <system_clock_init+0x7c>)
 264:	b2e0      	uxtb	r0, r4
 266:	4669      	mov	r1, sp
 268:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 26a:	3401      	adds	r4, #1
 26c:	2c1c      	cmp	r4, #28
 26e:	d1f9      	bne.n	264 <system_clock_init+0x20>
	config->run_in_standby  = false;
 270:	a803      	add	r0, sp, #12
 272:	2400      	movs	r4, #0
 274:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
 276:	2501      	movs	r5, #1
 278:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
 27a:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
 27c:	4b11      	ldr	r3, [pc, #68]	; (2c4 <system_clock_init+0x80>)
 27e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
 280:	2006      	movs	r0, #6
 282:	4b11      	ldr	r3, [pc, #68]	; (2c8 <system_clock_init+0x84>)
 284:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
 286:	4b11      	ldr	r3, [pc, #68]	; (2cc <system_clock_init+0x88>)
 288:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
 28a:	4b11      	ldr	r3, [pc, #68]	; (2d0 <system_clock_init+0x8c>)
 28c:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
 28e:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
 290:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
 292:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
 294:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
 296:	466b      	mov	r3, sp
 298:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
 29a:	2306      	movs	r3, #6
 29c:	466a      	mov	r2, sp
 29e:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
 2a0:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
 2a2:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
 2a4:	4669      	mov	r1, sp
 2a6:	2000      	movs	r0, #0
 2a8:	4b0a      	ldr	r3, [pc, #40]	; (2d4 <system_clock_init+0x90>)
 2aa:	4798      	blx	r3
 2ac:	2000      	movs	r0, #0
 2ae:	4b0a      	ldr	r3, [pc, #40]	; (2d8 <system_clock_init+0x94>)
 2b0:	4798      	blx	r3
#endif
}
 2b2:	b005      	add	sp, #20
 2b4:	bd30      	pop	{r4, r5, pc}
 2b6:	46c0      	nop			; (mov r8, r8)
 2b8:	40000800 	.word	0x40000800
 2bc:	41004000 	.word	0x41004000
 2c0:	00000459 	.word	0x00000459
 2c4:	00000179 	.word	0x00000179
 2c8:	000001b5 	.word	0x000001b5
 2cc:	000002dd 	.word	0x000002dd
 2d0:	40000400 	.word	0x40000400
 2d4:	00000301 	.word	0x00000301
 2d8:	000003b9 	.word	0x000003b9

000002dc <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
 2dc:	4a06      	ldr	r2, [pc, #24]	; (2f8 <system_gclk_init+0x1c>)
 2de:	6993      	ldr	r3, [r2, #24]
 2e0:	2108      	movs	r1, #8
 2e2:	430b      	orrs	r3, r1
 2e4:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
 2e6:	2201      	movs	r2, #1
 2e8:	4b04      	ldr	r3, [pc, #16]	; (2fc <system_gclk_init+0x20>)
 2ea:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
 2ec:	0019      	movs	r1, r3
 2ee:	780b      	ldrb	r3, [r1, #0]
 2f0:	4213      	tst	r3, r2
 2f2:	d1fc      	bne.n	2ee <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
 2f4:	4770      	bx	lr
 2f6:	46c0      	nop			; (mov r8, r8)
 2f8:	40000400 	.word	0x40000400
 2fc:	40000c00 	.word	0x40000c00

00000300 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
 300:	b570      	push	{r4, r5, r6, lr}
 302:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
 304:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
 306:	780d      	ldrb	r5, [r1, #0]
 308:	022d      	lsls	r5, r5, #8
 30a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
 30c:	784b      	ldrb	r3, [r1, #1]
 30e:	2b00      	cmp	r3, #0
 310:	d002      	beq.n	318 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
 312:	2380      	movs	r3, #128	; 0x80
 314:	02db      	lsls	r3, r3, #11
 316:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
 318:	7a4b      	ldrb	r3, [r1, #9]
 31a:	2b00      	cmp	r3, #0
 31c:	d002      	beq.n	324 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
 31e:	2380      	movs	r3, #128	; 0x80
 320:	031b      	lsls	r3, r3, #12
 322:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
 324:	6848      	ldr	r0, [r1, #4]
 326:	2801      	cmp	r0, #1
 328:	d910      	bls.n	34c <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
 32a:	1e43      	subs	r3, r0, #1
 32c:	4218      	tst	r0, r3
 32e:	d134      	bne.n	39a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
 330:	2802      	cmp	r0, #2
 332:	d930      	bls.n	396 <system_gclk_gen_set_config+0x96>
 334:	2302      	movs	r3, #2
 336:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
 338:	3201      	adds	r2, #1
						mask <<= 1) {
 33a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
 33c:	4298      	cmp	r0, r3
 33e:	d8fb      	bhi.n	338 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
 340:	0212      	lsls	r2, r2, #8
 342:	4332      	orrs	r2, r6
 344:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
 346:	2380      	movs	r3, #128	; 0x80
 348:	035b      	lsls	r3, r3, #13
 34a:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
 34c:	7a0b      	ldrb	r3, [r1, #8]
 34e:	2b00      	cmp	r3, #0
 350:	d002      	beq.n	358 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
 352:	2380      	movs	r3, #128	; 0x80
 354:	039b      	lsls	r3, r3, #14
 356:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 358:	4a13      	ldr	r2, [pc, #76]	; (3a8 <system_gclk_gen_set_config+0xa8>)
 35a:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
 35c:	b25b      	sxtb	r3, r3
 35e:	2b00      	cmp	r3, #0
 360:	dbfb      	blt.n	35a <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 362:	4b12      	ldr	r3, [pc, #72]	; (3ac <system_gclk_gen_set_config+0xac>)
 364:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
 366:	4b12      	ldr	r3, [pc, #72]	; (3b0 <system_gclk_gen_set_config+0xb0>)
 368:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 36a:	4a0f      	ldr	r2, [pc, #60]	; (3a8 <system_gclk_gen_set_config+0xa8>)
 36c:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
 36e:	b25b      	sxtb	r3, r3
 370:	2b00      	cmp	r3, #0
 372:	dbfb      	blt.n	36c <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
 374:	4b0c      	ldr	r3, [pc, #48]	; (3a8 <system_gclk_gen_set_config+0xa8>)
 376:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 378:	001a      	movs	r2, r3
 37a:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
 37c:	b25b      	sxtb	r3, r3
 37e:	2b00      	cmp	r3, #0
 380:	dbfb      	blt.n	37a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
 382:	4a09      	ldr	r2, [pc, #36]	; (3a8 <system_gclk_gen_set_config+0xa8>)
 384:	6853      	ldr	r3, [r2, #4]
 386:	2180      	movs	r1, #128	; 0x80
 388:	0249      	lsls	r1, r1, #9
 38a:	400b      	ands	r3, r1
 38c:	431d      	orrs	r5, r3
 38e:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 390:	4b08      	ldr	r3, [pc, #32]	; (3b4 <system_gclk_gen_set_config+0xb4>)
 392:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 394:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
 396:	2200      	movs	r2, #0
 398:	e7d2      	b.n	340 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
 39a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
 39c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
 39e:	2380      	movs	r3, #128	; 0x80
 3a0:	029b      	lsls	r3, r3, #10
 3a2:	431d      	orrs	r5, r3
 3a4:	e7d2      	b.n	34c <system_gclk_gen_set_config+0x4c>
 3a6:	46c0      	nop			; (mov r8, r8)
 3a8:	40000c00 	.word	0x40000c00
 3ac:	00000109 	.word	0x00000109
 3b0:	40000c08 	.word	0x40000c08
 3b4:	00000149 	.word	0x00000149

000003b8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
 3b8:	b510      	push	{r4, lr}
 3ba:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 3bc:	4a0b      	ldr	r2, [pc, #44]	; (3ec <system_gclk_gen_enable+0x34>)
 3be:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 3c0:	b25b      	sxtb	r3, r3
 3c2:	2b00      	cmp	r3, #0
 3c4:	dbfb      	blt.n	3be <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
 3c6:	4b0a      	ldr	r3, [pc, #40]	; (3f0 <system_gclk_gen_enable+0x38>)
 3c8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 3ca:	4b0a      	ldr	r3, [pc, #40]	; (3f4 <system_gclk_gen_enable+0x3c>)
 3cc:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 3ce:	4a07      	ldr	r2, [pc, #28]	; (3ec <system_gclk_gen_enable+0x34>)
 3d0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 3d2:	b25b      	sxtb	r3, r3
 3d4:	2b00      	cmp	r3, #0
 3d6:	dbfb      	blt.n	3d0 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
 3d8:	4a04      	ldr	r2, [pc, #16]	; (3ec <system_gclk_gen_enable+0x34>)
 3da:	6851      	ldr	r1, [r2, #4]
 3dc:	2380      	movs	r3, #128	; 0x80
 3de:	025b      	lsls	r3, r3, #9
 3e0:	430b      	orrs	r3, r1
 3e2:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
 3e4:	4b04      	ldr	r3, [pc, #16]	; (3f8 <system_gclk_gen_enable+0x40>)
 3e6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 3e8:	bd10      	pop	{r4, pc}
 3ea:	46c0      	nop			; (mov r8, r8)
 3ec:	40000c00 	.word	0x40000c00
 3f0:	00000109 	.word	0x00000109
 3f4:	40000c04 	.word	0x40000c04
 3f8:	00000149 	.word	0x00000149

000003fc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
 3fc:	b510      	push	{r4, lr}
 3fe:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
 400:	4b0f      	ldr	r3, [pc, #60]	; (440 <system_gclk_chan_disable+0x44>)
 402:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 404:	4b0f      	ldr	r3, [pc, #60]	; (444 <system_gclk_chan_disable+0x48>)
 406:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
 408:	4a0f      	ldr	r2, [pc, #60]	; (448 <system_gclk_chan_disable+0x4c>)
 40a:	8853      	ldrh	r3, [r2, #2]
 40c:	051b      	lsls	r3, r3, #20
 40e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
 410:	8853      	ldrh	r3, [r2, #2]
 412:	490e      	ldr	r1, [pc, #56]	; (44c <system_gclk_chan_disable+0x50>)
 414:	400b      	ands	r3, r1
 416:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
 418:	8853      	ldrh	r3, [r2, #2]
 41a:	490d      	ldr	r1, [pc, #52]	; (450 <system_gclk_chan_disable+0x54>)
 41c:	400b      	ands	r3, r1
 41e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
 420:	0011      	movs	r1, r2
 422:	2280      	movs	r2, #128	; 0x80
 424:	01d2      	lsls	r2, r2, #7
 426:	884b      	ldrh	r3, [r1, #2]
 428:	4213      	tst	r3, r2
 42a:	d1fc      	bne.n	426 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
 42c:	4906      	ldr	r1, [pc, #24]	; (448 <system_gclk_chan_disable+0x4c>)
 42e:	884a      	ldrh	r2, [r1, #2]
 430:	0203      	lsls	r3, r0, #8
 432:	4806      	ldr	r0, [pc, #24]	; (44c <system_gclk_chan_disable+0x50>)
 434:	4002      	ands	r2, r0
 436:	4313      	orrs	r3, r2
 438:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
 43a:	4b06      	ldr	r3, [pc, #24]	; (454 <system_gclk_chan_disable+0x58>)
 43c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 43e:	bd10      	pop	{r4, pc}
 440:	00000109 	.word	0x00000109
 444:	40000c02 	.word	0x40000c02
 448:	40000c00 	.word	0x40000c00
 44c:	fffff0ff 	.word	0xfffff0ff
 450:	ffffbfff 	.word	0xffffbfff
 454:	00000149 	.word	0x00000149

00000458 <system_gclk_chan_set_config>:
{
 458:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
 45a:	780c      	ldrb	r4, [r1, #0]
 45c:	0224      	lsls	r4, r4, #8
 45e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
 460:	4b02      	ldr	r3, [pc, #8]	; (46c <system_gclk_chan_set_config+0x14>)
 462:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
 464:	b2a4      	uxth	r4, r4
 466:	4b02      	ldr	r3, [pc, #8]	; (470 <system_gclk_chan_set_config+0x18>)
 468:	805c      	strh	r4, [r3, #2]
}
 46a:	bd10      	pop	{r4, pc}
 46c:	000003fd 	.word	0x000003fd
 470:	40000c00 	.word	0x40000c00

00000474 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
 474:	4770      	bx	lr
	...

00000478 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
 478:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
 47a:	4b05      	ldr	r3, [pc, #20]	; (490 <system_init+0x18>)
 47c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
 47e:	4b05      	ldr	r3, [pc, #20]	; (494 <system_init+0x1c>)
 480:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
 482:	4b05      	ldr	r3, [pc, #20]	; (498 <system_init+0x20>)
 484:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
 486:	4b05      	ldr	r3, [pc, #20]	; (49c <system_init+0x24>)
 488:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
 48a:	4b05      	ldr	r3, [pc, #20]	; (4a0 <system_init+0x28>)
 48c:	4798      	blx	r3
}
 48e:	bd10      	pop	{r4, pc}
 490:	00000245 	.word	0x00000245
 494:	00000105 	.word	0x00000105
 498:	00000475 	.word	0x00000475
 49c:	00000475 	.word	0x00000475
 4a0:	00000475 	.word	0x00000475

000004a4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 4a4:	e7fe      	b.n	4a4 <Dummy_Handler>
	...

000004a8 <Reset_Handler>:
{
 4a8:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
 4aa:	4a1a      	ldr	r2, [pc, #104]	; (514 <Reset_Handler+0x6c>)
 4ac:	4b1a      	ldr	r3, [pc, #104]	; (518 <Reset_Handler+0x70>)
 4ae:	429a      	cmp	r2, r3
 4b0:	d011      	beq.n	4d6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
 4b2:	001a      	movs	r2, r3
 4b4:	4b19      	ldr	r3, [pc, #100]	; (51c <Reset_Handler+0x74>)
 4b6:	429a      	cmp	r2, r3
 4b8:	d20d      	bcs.n	4d6 <Reset_Handler+0x2e>
 4ba:	4a19      	ldr	r2, [pc, #100]	; (520 <Reset_Handler+0x78>)
 4bc:	3303      	adds	r3, #3
 4be:	1a9b      	subs	r3, r3, r2
 4c0:	089b      	lsrs	r3, r3, #2
 4c2:	3301      	adds	r3, #1
 4c4:	009b      	lsls	r3, r3, #2
 4c6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 4c8:	4813      	ldr	r0, [pc, #76]	; (518 <Reset_Handler+0x70>)
 4ca:	4912      	ldr	r1, [pc, #72]	; (514 <Reset_Handler+0x6c>)
 4cc:	588c      	ldr	r4, [r1, r2]
 4ce:	5084      	str	r4, [r0, r2]
 4d0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 4d2:	429a      	cmp	r2, r3
 4d4:	d1fa      	bne.n	4cc <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 4d6:	4a13      	ldr	r2, [pc, #76]	; (524 <Reset_Handler+0x7c>)
 4d8:	4b13      	ldr	r3, [pc, #76]	; (528 <Reset_Handler+0x80>)
 4da:	429a      	cmp	r2, r3
 4dc:	d20a      	bcs.n	4f4 <Reset_Handler+0x4c>
 4de:	43d3      	mvns	r3, r2
 4e0:	4911      	ldr	r1, [pc, #68]	; (528 <Reset_Handler+0x80>)
 4e2:	185b      	adds	r3, r3, r1
 4e4:	2103      	movs	r1, #3
 4e6:	438b      	bics	r3, r1
 4e8:	3304      	adds	r3, #4
 4ea:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 4ec:	2100      	movs	r1, #0
 4ee:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 4f0:	4293      	cmp	r3, r2
 4f2:	d1fc      	bne.n	4ee <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 4f4:	4a0d      	ldr	r2, [pc, #52]	; (52c <Reset_Handler+0x84>)
 4f6:	21ff      	movs	r1, #255	; 0xff
 4f8:	4b0d      	ldr	r3, [pc, #52]	; (530 <Reset_Handler+0x88>)
 4fa:	438b      	bics	r3, r1
 4fc:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
 4fe:	4a0d      	ldr	r2, [pc, #52]	; (534 <Reset_Handler+0x8c>)
 500:	6853      	ldr	r3, [r2, #4]
 502:	397f      	subs	r1, #127	; 0x7f
 504:	430b      	orrs	r3, r1
 506:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 508:	4b0b      	ldr	r3, [pc, #44]	; (538 <Reset_Handler+0x90>)
 50a:	4798      	blx	r3
        main();
 50c:	4b0b      	ldr	r3, [pc, #44]	; (53c <Reset_Handler+0x94>)
 50e:	4798      	blx	r3
 510:	e7fe      	b.n	510 <Reset_Handler+0x68>
 512:	46c0      	nop			; (mov r8, r8)
 514:	000005d8 	.word	0x000005d8
 518:	20000000 	.word	0x20000000
 51c:	20000004 	.word	0x20000004
 520:	20000004 	.word	0x20000004
 524:	20000004 	.word	0x20000004
 528:	2000003c 	.word	0x2000003c
 52c:	e000ed00 	.word	0xe000ed00
 530:	00000000 	.word	0x00000000
 534:	41004000 	.word	0x41004000
 538:	00000551 	.word	0x00000551
 53c:	00000541 	.word	0x00000541

00000540 <main>:
*
***************************************************************************************************************************/
#include <main.h>

int main (void)
{
 540:	b510      	push	{r4, lr}
	system_init();
 542:	4b02      	ldr	r3, [pc, #8]	; (54c <main+0xc>)
 544:	4798      	blx	r3

	/* Insert application code here, after the board has been initialized. */
}
 546:	2000      	movs	r0, #0
 548:	bd10      	pop	{r4, pc}
 54a:	46c0      	nop			; (mov r8, r8)
 54c:	00000479 	.word	0x00000479

00000550 <__libc_init_array>:
 550:	b570      	push	{r4, r5, r6, lr}
 552:	2600      	movs	r6, #0
 554:	4d0c      	ldr	r5, [pc, #48]	; (588 <__libc_init_array+0x38>)
 556:	4c0d      	ldr	r4, [pc, #52]	; (58c <__libc_init_array+0x3c>)
 558:	1b64      	subs	r4, r4, r5
 55a:	10a4      	asrs	r4, r4, #2
 55c:	42a6      	cmp	r6, r4
 55e:	d109      	bne.n	574 <__libc_init_array+0x24>
 560:	2600      	movs	r6, #0
 562:	f000 f829 	bl	5b8 <_init>
 566:	4d0a      	ldr	r5, [pc, #40]	; (590 <__libc_init_array+0x40>)
 568:	4c0a      	ldr	r4, [pc, #40]	; (594 <__libc_init_array+0x44>)
 56a:	1b64      	subs	r4, r4, r5
 56c:	10a4      	asrs	r4, r4, #2
 56e:	42a6      	cmp	r6, r4
 570:	d105      	bne.n	57e <__libc_init_array+0x2e>
 572:	bd70      	pop	{r4, r5, r6, pc}
 574:	00b3      	lsls	r3, r6, #2
 576:	58eb      	ldr	r3, [r5, r3]
 578:	4798      	blx	r3
 57a:	3601      	adds	r6, #1
 57c:	e7ee      	b.n	55c <__libc_init_array+0xc>
 57e:	00b3      	lsls	r3, r6, #2
 580:	58eb      	ldr	r3, [r5, r3]
 582:	4798      	blx	r3
 584:	3601      	adds	r6, #1
 586:	e7f2      	b.n	56e <__libc_init_array+0x1e>
 588:	000005c4 	.word	0x000005c4
 58c:	000005c4 	.word	0x000005c4
 590:	000005c4 	.word	0x000005c4
 594:	000005c8 	.word	0x000005c8
 598:	000001e0 	.word	0x000001e0
 59c:	000001c0 	.word	0x000001c0
 5a0:	000001c0 	.word	0x000001c0
 5a4:	00000230 	.word	0x00000230
 5a8:	000001d2 	.word	0x000001d2
 5ac:	000001ee 	.word	0x000001ee
 5b0:	000001c4 	.word	0x000001c4
 5b4:	000001fc 	.word	0x000001fc

000005b8 <_init>:
 5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 5ba:	46c0      	nop			; (mov r8, r8)
 5bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 5be:	bc08      	pop	{r3}
 5c0:	469e      	mov	lr, r3
 5c2:	4770      	bx	lr

000005c4 <__init_array_start>:
 5c4:	000000cd 	.word	0x000000cd

000005c8 <_fini>:
 5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 5ca:	46c0      	nop			; (mov r8, r8)
 5cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 5ce:	bc08      	pop	{r3}
 5d0:	469e      	mov	lr, r3
 5d2:	4770      	bx	lr

000005d4 <__fini_array_start>:
 5d4:	000000a5 	.word	0x000000a5

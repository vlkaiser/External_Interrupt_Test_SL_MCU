
External_Interrupt_Test_SL_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ad8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00000ad8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000050  2000000c  00000ae4  0002000c  2**2
                  ALLOC
  3 .stack        00002004  2000005c  00000b34  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000fa1f  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001fb5  00000000  00000000  0002faac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001be7  00000000  00000000  00031a61  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000002a8  00000000  00000000  00033648  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000258  00000000  00000000  000338f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00003c4d  00000000  00000000  00033b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006d5e  00000000  00000000  00037795  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005e744  00000000  00000000  0003e4f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000005e8  00000000  00000000  0009cc38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	60 20 00 20 4d 08 00 00 49 08 00 00 49 08 00 00     ` . M...I...I...
	...
  2c:	49 08 00 00 00 00 00 00 00 00 00 00 49 08 00 00     I...........I...
  3c:	49 08 00 00 49 08 00 00 49 08 00 00 49 08 00 00     I...I...I...I...
  4c:	49 08 00 00 49 08 00 00 49 08 00 00 49 08 00 00     I...I...I...I...
  5c:	05 01 00 00 15 01 00 00 25 01 00 00 35 01 00 00     ........%...5...
  6c:	45 01 00 00 55 01 00 00 49 08 00 00 49 08 00 00     E...U...I...I...
  7c:	49 08 00 00 49 08 00 00 49 08 00 00 49 08 00 00     I...I...I...I...
  8c:	49 08 00 00 49 08 00 00 49 08 00 00 49 08 00 00     I...I...I...I...
  9c:	49 08 00 00 49 08 00 00                             I...I...

000000a4 <__do_global_dtors_aux>:
  a4:	b510      	push	{r4, lr}
  a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
  a8:	7823      	ldrb	r3, [r4, #0]
  aa:	2b00      	cmp	r3, #0
  ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
  ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
  b0:	2b00      	cmp	r3, #0
  b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
  b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
  b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
  b8:	bf00      	nop
  ba:	2301      	movs	r3, #1
  bc:	7023      	strb	r3, [r4, #0]
  be:	bd10      	pop	{r4, pc}
  c0:	2000000c 	.word	0x2000000c
  c4:	00000000 	.word	0x00000000
  c8:	00000ad8 	.word	0x00000ad8

000000cc <frame_dummy>:
  cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
  ce:	b510      	push	{r4, lr}
  d0:	2b00      	cmp	r3, #0
  d2:	d003      	beq.n	dc <frame_dummy+0x10>
  d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
  d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
  d8:	e000      	b.n	dc <frame_dummy+0x10>
  da:	bf00      	nop
  dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
  de:	6803      	ldr	r3, [r0, #0]
  e0:	2b00      	cmp	r3, #0
  e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
  e4:	bd10      	pop	{r4, pc}
  e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
  e8:	2b00      	cmp	r3, #0
  ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
  ec:	4798      	blx	r3
  ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
  f0:	00000000 	.word	0x00000000
  f4:	20000010 	.word	0x20000010
  f8:	00000ad8 	.word	0x00000ad8
  fc:	00000ad8 	.word	0x00000ad8
 100:	00000000 	.word	0x00000000

00000104 <SERCOM0_Handler>:
	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
}

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
 104:	b510      	push	{r4, lr}
 106:	4b02      	ldr	r3, [pc, #8]	; (110 <SERCOM0_Handler+0xc>)
 108:	681b      	ldr	r3, [r3, #0]
 10a:	2000      	movs	r0, #0
 10c:	4798      	blx	r3
 10e:	bd10      	pop	{r4, pc}
 110:	20000028 	.word	0x20000028

00000114 <SERCOM1_Handler>:
 114:	b510      	push	{r4, lr}
 116:	4b02      	ldr	r3, [pc, #8]	; (120 <SERCOM1_Handler+0xc>)
 118:	685b      	ldr	r3, [r3, #4]
 11a:	2001      	movs	r0, #1
 11c:	4798      	blx	r3
 11e:	bd10      	pop	{r4, pc}
 120:	20000028 	.word	0x20000028

00000124 <SERCOM2_Handler>:
 124:	b510      	push	{r4, lr}
 126:	4b02      	ldr	r3, [pc, #8]	; (130 <SERCOM2_Handler+0xc>)
 128:	689b      	ldr	r3, [r3, #8]
 12a:	2002      	movs	r0, #2
 12c:	4798      	blx	r3
 12e:	bd10      	pop	{r4, pc}
 130:	20000028 	.word	0x20000028

00000134 <SERCOM3_Handler>:
 134:	b510      	push	{r4, lr}
 136:	4b02      	ldr	r3, [pc, #8]	; (140 <SERCOM3_Handler+0xc>)
 138:	68db      	ldr	r3, [r3, #12]
 13a:	2003      	movs	r0, #3
 13c:	4798      	blx	r3
 13e:	bd10      	pop	{r4, pc}
 140:	20000028 	.word	0x20000028

00000144 <SERCOM4_Handler>:
 144:	b510      	push	{r4, lr}
 146:	4b02      	ldr	r3, [pc, #8]	; (150 <SERCOM4_Handler+0xc>)
 148:	691b      	ldr	r3, [r3, #16]
 14a:	2004      	movs	r0, #4
 14c:	4798      	blx	r3
 14e:	bd10      	pop	{r4, pc}
 150:	20000028 	.word	0x20000028

00000154 <SERCOM5_Handler>:
 154:	b510      	push	{r4, lr}
 156:	4b02      	ldr	r3, [pc, #8]	; (160 <SERCOM5_Handler+0xc>)
 158:	695b      	ldr	r3, [r3, #20]
 15a:	2005      	movs	r0, #5
 15c:	4798      	blx	r3
 15e:	bd10      	pop	{r4, pc}
 160:	20000028 	.word	0x20000028

00000164 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
 164:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
 166:	2000      	movs	r0, #0
 168:	4b08      	ldr	r3, [pc, #32]	; (18c <delay_init+0x28>)
 16a:	4798      	blx	r3
 16c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
 16e:	4c08      	ldr	r4, [pc, #32]	; (190 <delay_init+0x2c>)
 170:	21fa      	movs	r1, #250	; 0xfa
 172:	0089      	lsls	r1, r1, #2
 174:	47a0      	blx	r4
 176:	4b07      	ldr	r3, [pc, #28]	; (194 <delay_init+0x30>)
 178:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
 17a:	4907      	ldr	r1, [pc, #28]	; (198 <delay_init+0x34>)
 17c:	0028      	movs	r0, r5
 17e:	47a0      	blx	r4
 180:	4b06      	ldr	r3, [pc, #24]	; (19c <delay_init+0x38>)
 182:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
 184:	2205      	movs	r2, #5
 186:	4b06      	ldr	r3, [pc, #24]	; (1a0 <delay_init+0x3c>)
 188:	601a      	str	r2, [r3, #0]
}
 18a:	bd70      	pop	{r4, r5, r6, pc}
 18c:	00000609 	.word	0x00000609
 190:	00000919 	.word	0x00000919
 194:	20000000 	.word	0x20000000
 198:	000f4240 	.word	0x000f4240
 19c:	20000004 	.word	0x20000004
 1a0:	e000e010 	.word	0xe000e010

000001a4 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
 1a4:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
 1a6:	4b08      	ldr	r3, [pc, #32]	; (1c8 <delay_cycles_ms+0x24>)
 1a8:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
 1aa:	4a08      	ldr	r2, [pc, #32]	; (1cc <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
 1ac:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
 1ae:	2180      	movs	r1, #128	; 0x80
 1b0:	0249      	lsls	r1, r1, #9
	while (n--) {
 1b2:	3801      	subs	r0, #1
 1b4:	d307      	bcc.n	1c6 <delay_cycles_ms+0x22>
	if (n > 0) {
 1b6:	2c00      	cmp	r4, #0
 1b8:	d0fb      	beq.n	1b2 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
 1ba:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
 1bc:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
 1be:	6813      	ldr	r3, [r2, #0]
 1c0:	420b      	tst	r3, r1
 1c2:	d0fc      	beq.n	1be <delay_cycles_ms+0x1a>
 1c4:	e7f5      	b.n	1b2 <delay_cycles_ms+0xe>
	}
}
 1c6:	bd30      	pop	{r4, r5, pc}
 1c8:	20000000 	.word	0x20000000
 1cc:	e000e010 	.word	0xe000e010

000001d0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
 1d0:	b500      	push	{lr}
 1d2:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
 1d4:	ab01      	add	r3, sp, #4
 1d6:	2280      	movs	r2, #128	; 0x80
 1d8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
 1da:	780a      	ldrb	r2, [r1, #0]
 1dc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
 1de:	784a      	ldrb	r2, [r1, #1]
 1e0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
 1e2:	788a      	ldrb	r2, [r1, #2]
 1e4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
 1e6:	0019      	movs	r1, r3
 1e8:	4b01      	ldr	r3, [pc, #4]	; (1f0 <port_pin_set_config+0x20>)
 1ea:	4798      	blx	r3
}
 1ec:	b003      	add	sp, #12
 1ee:	bd00      	pop	{pc}
 1f0:	000007e9 	.word	0x000007e9

000001f4 <config_led>:
 * @return				- void
 *
 * @note				- 
 ******************************************************************************************************/
 void config_led(void)
 {
 1f4:	b500      	push	{lr}
 1f6:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
 1f8:	a901      	add	r1, sp, #4
 1fa:	2301      	movs	r3, #1
 1fc:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
 1fe:	2200      	movs	r2, #0
 200:	708a      	strb	r2, [r1, #2]
	 struct port_config pin_conf;
	 port_get_config_defaults(&pin_conf);

	 pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
 202:	700b      	strb	r3, [r1, #0]
	 port_pin_set_config(LED_0_PIN, &pin_conf);
 204:	200e      	movs	r0, #14
 206:	4b04      	ldr	r3, [pc, #16]	; (218 <config_led+0x24>)
 208:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
 20a:	2280      	movs	r2, #128	; 0x80
 20c:	01d2      	lsls	r2, r2, #7
 20e:	4b03      	ldr	r3, [pc, #12]	; (21c <config_led+0x28>)
 210:	619a      	str	r2, [r3, #24]
	 port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
 }
 212:	b003      	add	sp, #12
 214:	bd00      	pop	{pc}
 216:	46c0      	nop			; (mov r8, r8)
 218:	000001d1 	.word	0x000001d1
 21c:	41004400 	.word	0x41004400

00000220 <config_btn>:
 * @return				- void
 *
 * @note				- 
 ******************************************************************************************************/
 void config_btn(void)
 {
 220:	b500      	push	{lr}
 222:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
 224:	a901      	add	r1, sp, #4
 226:	2300      	movs	r3, #0
 228:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
 22a:	2201      	movs	r2, #1
 22c:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
 22e:	708b      	strb	r3, [r1, #2]
	 port_get_config_defaults(&pin_conf);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
 230:	200f      	movs	r0, #15
 232:	4b02      	ldr	r3, [pc, #8]	; (23c <config_btn+0x1c>)
 234:	4798      	blx	r3
 }
 236:	b003      	add	sp, #12
 238:	bd00      	pop	{pc}
 23a:	46c0      	nop			; (mov r8, r8)
 23c:	000001d1 	.word	0x000001d1

00000240 <system_board_init>:

void system_board_init(void)
{
 240:	b510      	push	{r4, lr}
 	/*Configure system tick to generate periodic interrupts */
 	SysTick_Config(system_gclk_gen_get_hz(GCLK_GENERATOR_0));
 242:	2000      	movs	r0, #0
 244:	4b0d      	ldr	r3, [pc, #52]	; (27c <system_board_init+0x3c>)
 246:	4798      	blx	r3
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 248:	3801      	subs	r0, #1
 24a:	4b0d      	ldr	r3, [pc, #52]	; (280 <system_board_init+0x40>)
 24c:	4298      	cmp	r0, r3
 24e:	d80d      	bhi.n	26c <system_board_init+0x2c>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 250:	4a0c      	ldr	r2, [pc, #48]	; (284 <system_board_init+0x44>)
 252:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 254:	480c      	ldr	r0, [pc, #48]	; (288 <system_board_init+0x48>)
 256:	6a03      	ldr	r3, [r0, #32]
 258:	021b      	lsls	r3, r3, #8
 25a:	0a1b      	lsrs	r3, r3, #8
 25c:	21c0      	movs	r1, #192	; 0xc0
 25e:	0609      	lsls	r1, r1, #24
 260:	430b      	orrs	r3, r1
 262:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 264:	2300      	movs	r3, #0
 266:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 268:	3307      	adds	r3, #7
 26a:	6013      	str	r3, [r2, #0]
 	delay_init();
 26c:	4b07      	ldr	r3, [pc, #28]	; (28c <system_board_init+0x4c>)
 26e:	4798      	blx	r3

	config_led();
 270:	4b07      	ldr	r3, [pc, #28]	; (290 <system_board_init+0x50>)
 272:	4798      	blx	r3
	config_btn();
 274:	4b07      	ldr	r3, [pc, #28]	; (294 <system_board_init+0x54>)
 276:	4798      	blx	r3

 278:	bd10      	pop	{r4, pc}
 27a:	46c0      	nop			; (mov r8, r8)
 27c:	00000609 	.word	0x00000609
 280:	00ffffff 	.word	0x00ffffff
 284:	e000e010 	.word	0xe000e010
 288:	e000ed00 	.word	0xe000ed00
 28c:	00000165 	.word	0x00000165
 290:	000001f5 	.word	0x000001f5
 294:	00000221 	.word	0x00000221

00000298 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
 298:	4b0c      	ldr	r3, [pc, #48]	; (2cc <cpu_irq_enter_critical+0x34>)
 29a:	681b      	ldr	r3, [r3, #0]
 29c:	2b00      	cmp	r3, #0
 29e:	d106      	bne.n	2ae <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 2a0:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
 2a4:	2b00      	cmp	r3, #0
 2a6:	d007      	beq.n	2b8 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
 2a8:	2200      	movs	r2, #0
 2aa:	4b09      	ldr	r3, [pc, #36]	; (2d0 <cpu_irq_enter_critical+0x38>)
 2ac:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
 2ae:	4a07      	ldr	r2, [pc, #28]	; (2cc <cpu_irq_enter_critical+0x34>)
 2b0:	6813      	ldr	r3, [r2, #0]
 2b2:	3301      	adds	r3, #1
 2b4:	6013      	str	r3, [r2, #0]
}
 2b6:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
 2b8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
 2ba:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
 2be:	2200      	movs	r2, #0
 2c0:	4b04      	ldr	r3, [pc, #16]	; (2d4 <cpu_irq_enter_critical+0x3c>)
 2c2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
 2c4:	3201      	adds	r2, #1
 2c6:	4b02      	ldr	r3, [pc, #8]	; (2d0 <cpu_irq_enter_critical+0x38>)
 2c8:	701a      	strb	r2, [r3, #0]
 2ca:	e7f0      	b.n	2ae <cpu_irq_enter_critical+0x16>
 2cc:	20000040 	.word	0x20000040
 2d0:	20000044 	.word	0x20000044
 2d4:	20000008 	.word	0x20000008

000002d8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
 2d8:	4b08      	ldr	r3, [pc, #32]	; (2fc <cpu_irq_leave_critical+0x24>)
 2da:	681a      	ldr	r2, [r3, #0]
 2dc:	3a01      	subs	r2, #1
 2de:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
 2e0:	681b      	ldr	r3, [r3, #0]
 2e2:	2b00      	cmp	r3, #0
 2e4:	d109      	bne.n	2fa <cpu_irq_leave_critical+0x22>
 2e6:	4b06      	ldr	r3, [pc, #24]	; (300 <cpu_irq_leave_critical+0x28>)
 2e8:	781b      	ldrb	r3, [r3, #0]
 2ea:	2b00      	cmp	r3, #0
 2ec:	d005      	beq.n	2fa <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
 2ee:	2201      	movs	r2, #1
 2f0:	4b04      	ldr	r3, [pc, #16]	; (304 <cpu_irq_leave_critical+0x2c>)
 2f2:	701a      	strb	r2, [r3, #0]
 2f4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 2f8:	b662      	cpsie	i
	}
}
 2fa:	4770      	bx	lr
 2fc:	20000040 	.word	0x20000040
 300:	20000044 	.word	0x20000044
 304:	20000008 	.word	0x20000008

00000308 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
 308:	b510      	push	{r4, lr}
	switch (clock_source) {
 30a:	2807      	cmp	r0, #7
 30c:	d803      	bhi.n	316 <system_clock_source_get_hz+0xe>
 30e:	0080      	lsls	r0, r0, #2
 310:	4b16      	ldr	r3, [pc, #88]	; (36c <system_clock_source_get_hz+0x64>)
 312:	581b      	ldr	r3, [r3, r0]
 314:	469f      	mov	pc, r3
		}

		return 48000000UL;

	default:
		return 0;
 316:	2000      	movs	r0, #0
 318:	e027      	b.n	36a <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc.frequency;
 31a:	4b15      	ldr	r3, [pc, #84]	; (370 <system_clock_source_get_hz+0x68>)
 31c:	68d8      	ldr	r0, [r3, #12]
 31e:	e024      	b.n	36a <system_clock_source_get_hz+0x62>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
 320:	4b14      	ldr	r3, [pc, #80]	; (374 <system_clock_source_get_hz+0x6c>)
 322:	6a1b      	ldr	r3, [r3, #32]
 324:	059b      	lsls	r3, r3, #22
 326:	0f9b      	lsrs	r3, r3, #30
 328:	4813      	ldr	r0, [pc, #76]	; (378 <system_clock_source_get_hz+0x70>)
 32a:	40d8      	lsrs	r0, r3
 32c:	e01d      	b.n	36a <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc32k.frequency;
 32e:	4b10      	ldr	r3, [pc, #64]	; (370 <system_clock_source_get_hz+0x68>)
 330:	6918      	ldr	r0, [r3, #16]
 332:	e01a      	b.n	36a <system_clock_source_get_hz+0x62>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
 334:	4b0e      	ldr	r3, [pc, #56]	; (370 <system_clock_source_get_hz+0x68>)
 336:	681b      	ldr	r3, [r3, #0]
			return 0;
 338:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
 33a:	079b      	lsls	r3, r3, #30
 33c:	d515      	bpl.n	36a <system_clock_source_get_hz+0x62>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 33e:	490d      	ldr	r1, [pc, #52]	; (374 <system_clock_source_get_hz+0x6c>)
 340:	2210      	movs	r2, #16
 342:	68cb      	ldr	r3, [r1, #12]
 344:	421a      	tst	r2, r3
 346:	d0fc      	beq.n	342 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
 348:	4b09      	ldr	r3, [pc, #36]	; (370 <system_clock_source_get_hz+0x68>)
 34a:	681b      	ldr	r3, [r3, #0]
 34c:	075b      	lsls	r3, r3, #29
 34e:	d401      	bmi.n	354 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
 350:	480a      	ldr	r0, [pc, #40]	; (37c <system_clock_source_get_hz+0x74>)
 352:	e00a      	b.n	36a <system_clock_source_get_hz+0x62>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
 354:	2000      	movs	r0, #0
 356:	4b0a      	ldr	r3, [pc, #40]	; (380 <system_clock_source_get_hz+0x78>)
 358:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
 35a:	4b05      	ldr	r3, [pc, #20]	; (370 <system_clock_source_get_hz+0x68>)
 35c:	689b      	ldr	r3, [r3, #8]
 35e:	041b      	lsls	r3, r3, #16
 360:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
 362:	4358      	muls	r0, r3
 364:	e001      	b.n	36a <system_clock_source_get_hz+0x62>
		return 32768UL;
 366:	2080      	movs	r0, #128	; 0x80
 368:	0200      	lsls	r0, r0, #8
	}
}
 36a:	bd10      	pop	{r4, pc}
 36c:	00000a78 	.word	0x00000a78
 370:	20000048 	.word	0x20000048
 374:	40000800 	.word	0x40000800
 378:	007a1200 	.word	0x007a1200
 37c:	02dc6c00 	.word	0x02dc6c00
 380:	0000070d 	.word	0x0000070d

00000384 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
 384:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
 386:	490c      	ldr	r1, [pc, #48]	; (3b8 <system_clock_source_osc8m_set_config+0x34>)
 388:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
 38a:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
 38c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
 38e:	7840      	ldrb	r0, [r0, #1]
 390:	2201      	movs	r2, #1
 392:	4010      	ands	r0, r2
 394:	0180      	lsls	r0, r0, #6
 396:	2640      	movs	r6, #64	; 0x40
 398:	43b3      	bics	r3, r6
 39a:	4303      	orrs	r3, r0
 39c:	402a      	ands	r2, r5
 39e:	01d2      	lsls	r2, r2, #7
 3a0:	2080      	movs	r0, #128	; 0x80
 3a2:	4383      	bics	r3, r0
 3a4:	4313      	orrs	r3, r2
 3a6:	2203      	movs	r2, #3
 3a8:	4022      	ands	r2, r4
 3aa:	0212      	lsls	r2, r2, #8
 3ac:	4803      	ldr	r0, [pc, #12]	; (3bc <system_clock_source_osc8m_set_config+0x38>)
 3ae:	4003      	ands	r3, r0
 3b0:	4313      	orrs	r3, r2
 3b2:	620b      	str	r3, [r1, #32]
}
 3b4:	bd70      	pop	{r4, r5, r6, pc}
 3b6:	46c0      	nop			; (mov r8, r8)
 3b8:	40000800 	.word	0x40000800
 3bc:	fffffcff 	.word	0xfffffcff

000003c0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
 3c0:	2807      	cmp	r0, #7
 3c2:	d803      	bhi.n	3cc <system_clock_source_enable+0xc>
 3c4:	0080      	lsls	r0, r0, #2
 3c6:	4b1e      	ldr	r3, [pc, #120]	; (440 <system_clock_source_enable+0x80>)
 3c8:	581b      	ldr	r3, [r3, r0]
 3ca:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
 3cc:	2017      	movs	r0, #23
 3ce:	e036      	b.n	43e <system_clock_source_enable+0x7e>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
 3d0:	4a1c      	ldr	r2, [pc, #112]	; (444 <system_clock_source_enable+0x84>)
 3d2:	6a13      	ldr	r3, [r2, #32]
 3d4:	2102      	movs	r1, #2
 3d6:	430b      	orrs	r3, r1
 3d8:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
 3da:	2000      	movs	r0, #0
 3dc:	e02f      	b.n	43e <system_clock_source_enable+0x7e>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
 3de:	4a19      	ldr	r2, [pc, #100]	; (444 <system_clock_source_enable+0x84>)
 3e0:	6993      	ldr	r3, [r2, #24]
 3e2:	2102      	movs	r1, #2
 3e4:	430b      	orrs	r3, r1
 3e6:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
 3e8:	2000      	movs	r0, #0
		break;
 3ea:	e028      	b.n	43e <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
 3ec:	4a15      	ldr	r2, [pc, #84]	; (444 <system_clock_source_enable+0x84>)
 3ee:	8a13      	ldrh	r3, [r2, #16]
 3f0:	2102      	movs	r1, #2
 3f2:	430b      	orrs	r3, r1
 3f4:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
 3f6:	2000      	movs	r0, #0
		break;
 3f8:	e021      	b.n	43e <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
 3fa:	4a12      	ldr	r2, [pc, #72]	; (444 <system_clock_source_enable+0x84>)
 3fc:	8a93      	ldrh	r3, [r2, #20]
 3fe:	2102      	movs	r1, #2
 400:	430b      	orrs	r3, r1
 402:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
 404:	2000      	movs	r0, #0
		break;
 406:	e01a      	b.n	43e <system_clock_source_enable+0x7e>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
 408:	4b0f      	ldr	r3, [pc, #60]	; (448 <system_clock_source_enable+0x88>)
 40a:	681a      	ldr	r2, [r3, #0]
 40c:	2102      	movs	r1, #2
 40e:	430a      	orrs	r2, r1
 410:	601a      	str	r2, [r3, #0]
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
 412:	681b      	ldr	r3, [r3, #0]
 414:	4a0d      	ldr	r2, [pc, #52]	; (44c <system_clock_source_enable+0x8c>)
 416:	4013      	ands	r3, r2
 418:	4a0a      	ldr	r2, [pc, #40]	; (444 <system_clock_source_enable+0x84>)
 41a:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 41c:	0011      	movs	r1, r2
 41e:	2210      	movs	r2, #16
 420:	68cb      	ldr	r3, [r1, #12]
 422:	421a      	tst	r2, r3
 424:	d0fc      	beq.n	420 <system_clock_source_enable+0x60>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
 426:	4a08      	ldr	r2, [pc, #32]	; (448 <system_clock_source_enable+0x88>)
 428:	6891      	ldr	r1, [r2, #8]
 42a:	4b06      	ldr	r3, [pc, #24]	; (444 <system_clock_source_enable+0x84>)
 42c:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
 42e:	6851      	ldr	r1, [r2, #4]
 430:	6299      	str	r1, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
 432:	6812      	ldr	r2, [r2, #0]
 434:	b292      	uxth	r2, r2
 436:	849a      	strh	r2, [r3, #36]	; 0x24
	return STATUS_OK;
 438:	2000      	movs	r0, #0
 43a:	e000      	b.n	43e <system_clock_source_enable+0x7e>
		return STATUS_OK;
 43c:	2000      	movs	r0, #0
}
 43e:	4770      	bx	lr
 440:	00000a98 	.word	0x00000a98
 444:	40000800 	.word	0x40000800
 448:	20000048 	.word	0x20000048
 44c:	0000ff7f 	.word	0x0000ff7f

00000450 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
 450:	b530      	push	{r4, r5, lr}
 452:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
 454:	22c2      	movs	r2, #194	; 0xc2
 456:	00d2      	lsls	r2, r2, #3
 458:	4b1a      	ldr	r3, [pc, #104]	; (4c4 <system_clock_init+0x74>)
 45a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
 45c:	4a1a      	ldr	r2, [pc, #104]	; (4c8 <system_clock_init+0x78>)
 45e:	6853      	ldr	r3, [r2, #4]
 460:	211e      	movs	r1, #30
 462:	438b      	bics	r3, r1
 464:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
 466:	2301      	movs	r3, #1
 468:	466a      	mov	r2, sp
 46a:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 46c:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
 46e:	4d17      	ldr	r5, [pc, #92]	; (4cc <system_clock_init+0x7c>)
 470:	b2e0      	uxtb	r0, r4
 472:	4669      	mov	r1, sp
 474:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 476:	3401      	adds	r4, #1
 478:	2c1c      	cmp	r4, #28
 47a:	d1f9      	bne.n	470 <system_clock_init+0x20>
	config->run_in_standby  = false;
 47c:	a803      	add	r0, sp, #12
 47e:	2400      	movs	r4, #0
 480:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
 482:	2501      	movs	r5, #1
 484:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
 486:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
 488:	4b11      	ldr	r3, [pc, #68]	; (4d0 <system_clock_init+0x80>)
 48a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
 48c:	2006      	movs	r0, #6
 48e:	4b11      	ldr	r3, [pc, #68]	; (4d4 <system_clock_init+0x84>)
 490:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
 492:	4b11      	ldr	r3, [pc, #68]	; (4d8 <system_clock_init+0x88>)
 494:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
 496:	4b11      	ldr	r3, [pc, #68]	; (4dc <system_clock_init+0x8c>)
 498:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
 49a:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
 49c:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
 49e:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
 4a0:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
 4a2:	466b      	mov	r3, sp
 4a4:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
 4a6:	2306      	movs	r3, #6
 4a8:	466a      	mov	r2, sp
 4aa:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
 4ac:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
 4ae:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
 4b0:	4669      	mov	r1, sp
 4b2:	2000      	movs	r0, #0
 4b4:	4b0a      	ldr	r3, [pc, #40]	; (4e0 <system_clock_init+0x90>)
 4b6:	4798      	blx	r3
 4b8:	2000      	movs	r0, #0
 4ba:	4b0a      	ldr	r3, [pc, #40]	; (4e4 <system_clock_init+0x94>)
 4bc:	4798      	blx	r3
#endif
}
 4be:	b005      	add	sp, #20
 4c0:	bd30      	pop	{r4, r5, pc}
 4c2:	46c0      	nop			; (mov r8, r8)
 4c4:	40000800 	.word	0x40000800
 4c8:	41004000 	.word	0x41004000
 4cc:	000006f1 	.word	0x000006f1
 4d0:	00000385 	.word	0x00000385
 4d4:	000003c1 	.word	0x000003c1
 4d8:	000004e9 	.word	0x000004e9
 4dc:	40000400 	.word	0x40000400
 4e0:	0000050d 	.word	0x0000050d
 4e4:	000005c5 	.word	0x000005c5

000004e8 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
 4e8:	4a06      	ldr	r2, [pc, #24]	; (504 <system_gclk_init+0x1c>)
 4ea:	6993      	ldr	r3, [r2, #24]
 4ec:	2108      	movs	r1, #8
 4ee:	430b      	orrs	r3, r1
 4f0:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
 4f2:	2201      	movs	r2, #1
 4f4:	4b04      	ldr	r3, [pc, #16]	; (508 <system_gclk_init+0x20>)
 4f6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
 4f8:	0019      	movs	r1, r3
 4fa:	780b      	ldrb	r3, [r1, #0]
 4fc:	4213      	tst	r3, r2
 4fe:	d1fc      	bne.n	4fa <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
 500:	4770      	bx	lr
 502:	46c0      	nop			; (mov r8, r8)
 504:	40000400 	.word	0x40000400
 508:	40000c00 	.word	0x40000c00

0000050c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
 50c:	b570      	push	{r4, r5, r6, lr}
 50e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
 510:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
 512:	780d      	ldrb	r5, [r1, #0]
 514:	022d      	lsls	r5, r5, #8
 516:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
 518:	784b      	ldrb	r3, [r1, #1]
 51a:	2b00      	cmp	r3, #0
 51c:	d002      	beq.n	524 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
 51e:	2380      	movs	r3, #128	; 0x80
 520:	02db      	lsls	r3, r3, #11
 522:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
 524:	7a4b      	ldrb	r3, [r1, #9]
 526:	2b00      	cmp	r3, #0
 528:	d002      	beq.n	530 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
 52a:	2380      	movs	r3, #128	; 0x80
 52c:	031b      	lsls	r3, r3, #12
 52e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
 530:	6848      	ldr	r0, [r1, #4]
 532:	2801      	cmp	r0, #1
 534:	d910      	bls.n	558 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
 536:	1e43      	subs	r3, r0, #1
 538:	4218      	tst	r0, r3
 53a:	d134      	bne.n	5a6 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
 53c:	2802      	cmp	r0, #2
 53e:	d930      	bls.n	5a2 <system_gclk_gen_set_config+0x96>
 540:	2302      	movs	r3, #2
 542:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
 544:	3201      	adds	r2, #1
						mask <<= 1) {
 546:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
 548:	4298      	cmp	r0, r3
 54a:	d8fb      	bhi.n	544 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
 54c:	0212      	lsls	r2, r2, #8
 54e:	4332      	orrs	r2, r6
 550:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
 552:	2380      	movs	r3, #128	; 0x80
 554:	035b      	lsls	r3, r3, #13
 556:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
 558:	7a0b      	ldrb	r3, [r1, #8]
 55a:	2b00      	cmp	r3, #0
 55c:	d002      	beq.n	564 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
 55e:	2380      	movs	r3, #128	; 0x80
 560:	039b      	lsls	r3, r3, #14
 562:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 564:	4a13      	ldr	r2, [pc, #76]	; (5b4 <system_gclk_gen_set_config+0xa8>)
 566:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
 568:	b25b      	sxtb	r3, r3
 56a:	2b00      	cmp	r3, #0
 56c:	dbfb      	blt.n	566 <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 56e:	4b12      	ldr	r3, [pc, #72]	; (5b8 <system_gclk_gen_set_config+0xac>)
 570:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
 572:	4b12      	ldr	r3, [pc, #72]	; (5bc <system_gclk_gen_set_config+0xb0>)
 574:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 576:	4a0f      	ldr	r2, [pc, #60]	; (5b4 <system_gclk_gen_set_config+0xa8>)
 578:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
 57a:	b25b      	sxtb	r3, r3
 57c:	2b00      	cmp	r3, #0
 57e:	dbfb      	blt.n	578 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
 580:	4b0c      	ldr	r3, [pc, #48]	; (5b4 <system_gclk_gen_set_config+0xa8>)
 582:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 584:	001a      	movs	r2, r3
 586:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
 588:	b25b      	sxtb	r3, r3
 58a:	2b00      	cmp	r3, #0
 58c:	dbfb      	blt.n	586 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
 58e:	4a09      	ldr	r2, [pc, #36]	; (5b4 <system_gclk_gen_set_config+0xa8>)
 590:	6853      	ldr	r3, [r2, #4]
 592:	2180      	movs	r1, #128	; 0x80
 594:	0249      	lsls	r1, r1, #9
 596:	400b      	ands	r3, r1
 598:	431d      	orrs	r5, r3
 59a:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 59c:	4b08      	ldr	r3, [pc, #32]	; (5c0 <system_gclk_gen_set_config+0xb4>)
 59e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 5a0:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
 5a2:	2200      	movs	r2, #0
 5a4:	e7d2      	b.n	54c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
 5a6:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
 5a8:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
 5aa:	2380      	movs	r3, #128	; 0x80
 5ac:	029b      	lsls	r3, r3, #10
 5ae:	431d      	orrs	r5, r3
 5b0:	e7d2      	b.n	558 <system_gclk_gen_set_config+0x4c>
 5b2:	46c0      	nop			; (mov r8, r8)
 5b4:	40000c00 	.word	0x40000c00
 5b8:	00000299 	.word	0x00000299
 5bc:	40000c08 	.word	0x40000c08
 5c0:	000002d9 	.word	0x000002d9

000005c4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
 5c4:	b510      	push	{r4, lr}
 5c6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 5c8:	4a0b      	ldr	r2, [pc, #44]	; (5f8 <system_gclk_gen_enable+0x34>)
 5ca:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 5cc:	b25b      	sxtb	r3, r3
 5ce:	2b00      	cmp	r3, #0
 5d0:	dbfb      	blt.n	5ca <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
 5d2:	4b0a      	ldr	r3, [pc, #40]	; (5fc <system_gclk_gen_enable+0x38>)
 5d4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 5d6:	4b0a      	ldr	r3, [pc, #40]	; (600 <system_gclk_gen_enable+0x3c>)
 5d8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 5da:	4a07      	ldr	r2, [pc, #28]	; (5f8 <system_gclk_gen_enable+0x34>)
 5dc:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 5de:	b25b      	sxtb	r3, r3
 5e0:	2b00      	cmp	r3, #0
 5e2:	dbfb      	blt.n	5dc <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
 5e4:	4a04      	ldr	r2, [pc, #16]	; (5f8 <system_gclk_gen_enable+0x34>)
 5e6:	6851      	ldr	r1, [r2, #4]
 5e8:	2380      	movs	r3, #128	; 0x80
 5ea:	025b      	lsls	r3, r3, #9
 5ec:	430b      	orrs	r3, r1
 5ee:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
 5f0:	4b04      	ldr	r3, [pc, #16]	; (604 <system_gclk_gen_enable+0x40>)
 5f2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 5f4:	bd10      	pop	{r4, pc}
 5f6:	46c0      	nop			; (mov r8, r8)
 5f8:	40000c00 	.word	0x40000c00
 5fc:	00000299 	.word	0x00000299
 600:	40000c04 	.word	0x40000c04
 604:	000002d9 	.word	0x000002d9

00000608 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
 608:	b570      	push	{r4, r5, r6, lr}
 60a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 60c:	4a1a      	ldr	r2, [pc, #104]	; (678 <system_gclk_gen_get_hz+0x70>)
 60e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 610:	b25b      	sxtb	r3, r3
 612:	2b00      	cmp	r3, #0
 614:	dbfb      	blt.n	60e <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
 616:	4b19      	ldr	r3, [pc, #100]	; (67c <system_gclk_gen_get_hz+0x74>)
 618:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 61a:	4b19      	ldr	r3, [pc, #100]	; (680 <system_gclk_gen_get_hz+0x78>)
 61c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 61e:	4a16      	ldr	r2, [pc, #88]	; (678 <system_gclk_gen_get_hz+0x70>)
 620:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 622:	b25b      	sxtb	r3, r3
 624:	2b00      	cmp	r3, #0
 626:	dbfb      	blt.n	620 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
 628:	4e13      	ldr	r6, [pc, #76]	; (678 <system_gclk_gen_get_hz+0x70>)
 62a:	6870      	ldr	r0, [r6, #4]
 62c:	04c0      	lsls	r0, r0, #19
 62e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
 630:	4b14      	ldr	r3, [pc, #80]	; (684 <system_gclk_gen_get_hz+0x7c>)
 632:	4798      	blx	r3
 634:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 636:	4b12      	ldr	r3, [pc, #72]	; (680 <system_gclk_gen_get_hz+0x78>)
 638:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
 63a:	6876      	ldr	r6, [r6, #4]
 63c:	02f6      	lsls	r6, r6, #11
 63e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
 640:	4b11      	ldr	r3, [pc, #68]	; (688 <system_gclk_gen_get_hz+0x80>)
 642:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 644:	4a0c      	ldr	r2, [pc, #48]	; (678 <system_gclk_gen_get_hz+0x70>)
 646:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 648:	b25b      	sxtb	r3, r3
 64a:	2b00      	cmp	r3, #0
 64c:	dbfb      	blt.n	646 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
 64e:	4b0a      	ldr	r3, [pc, #40]	; (678 <system_gclk_gen_get_hz+0x70>)
 650:	689c      	ldr	r4, [r3, #8]
 652:	0224      	lsls	r4, r4, #8
 654:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
 656:	4b0d      	ldr	r3, [pc, #52]	; (68c <system_gclk_gen_get_hz+0x84>)
 658:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
 65a:	2e00      	cmp	r6, #0
 65c:	d107      	bne.n	66e <system_gclk_gen_get_hz+0x66>
 65e:	2c01      	cmp	r4, #1
 660:	d907      	bls.n	672 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
 662:	0021      	movs	r1, r4
 664:	0028      	movs	r0, r5
 666:	4b0a      	ldr	r3, [pc, #40]	; (690 <system_gclk_gen_get_hz+0x88>)
 668:	4798      	blx	r3
 66a:	0005      	movs	r5, r0
 66c:	e001      	b.n	672 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
 66e:	3401      	adds	r4, #1
 670:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
 672:	0028      	movs	r0, r5
 674:	bd70      	pop	{r4, r5, r6, pc}
 676:	46c0      	nop			; (mov r8, r8)
 678:	40000c00 	.word	0x40000c00
 67c:	00000299 	.word	0x00000299
 680:	40000c04 	.word	0x40000c04
 684:	00000309 	.word	0x00000309
 688:	40000c08 	.word	0x40000c08
 68c:	000002d9 	.word	0x000002d9
 690:	00000919 	.word	0x00000919

00000694 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
 694:	b510      	push	{r4, lr}
 696:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
 698:	4b0f      	ldr	r3, [pc, #60]	; (6d8 <system_gclk_chan_disable+0x44>)
 69a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 69c:	4b0f      	ldr	r3, [pc, #60]	; (6dc <system_gclk_chan_disable+0x48>)
 69e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
 6a0:	4a0f      	ldr	r2, [pc, #60]	; (6e0 <system_gclk_chan_disable+0x4c>)
 6a2:	8853      	ldrh	r3, [r2, #2]
 6a4:	051b      	lsls	r3, r3, #20
 6a6:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
 6a8:	8853      	ldrh	r3, [r2, #2]
 6aa:	490e      	ldr	r1, [pc, #56]	; (6e4 <system_gclk_chan_disable+0x50>)
 6ac:	400b      	ands	r3, r1
 6ae:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
 6b0:	8853      	ldrh	r3, [r2, #2]
 6b2:	490d      	ldr	r1, [pc, #52]	; (6e8 <system_gclk_chan_disable+0x54>)
 6b4:	400b      	ands	r3, r1
 6b6:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
 6b8:	0011      	movs	r1, r2
 6ba:	2280      	movs	r2, #128	; 0x80
 6bc:	01d2      	lsls	r2, r2, #7
 6be:	884b      	ldrh	r3, [r1, #2]
 6c0:	4213      	tst	r3, r2
 6c2:	d1fc      	bne.n	6be <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
 6c4:	4906      	ldr	r1, [pc, #24]	; (6e0 <system_gclk_chan_disable+0x4c>)
 6c6:	884a      	ldrh	r2, [r1, #2]
 6c8:	0203      	lsls	r3, r0, #8
 6ca:	4806      	ldr	r0, [pc, #24]	; (6e4 <system_gclk_chan_disable+0x50>)
 6cc:	4002      	ands	r2, r0
 6ce:	4313      	orrs	r3, r2
 6d0:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
 6d2:	4b06      	ldr	r3, [pc, #24]	; (6ec <system_gclk_chan_disable+0x58>)
 6d4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 6d6:	bd10      	pop	{r4, pc}
 6d8:	00000299 	.word	0x00000299
 6dc:	40000c02 	.word	0x40000c02
 6e0:	40000c00 	.word	0x40000c00
 6e4:	fffff0ff 	.word	0xfffff0ff
 6e8:	ffffbfff 	.word	0xffffbfff
 6ec:	000002d9 	.word	0x000002d9

000006f0 <system_gclk_chan_set_config>:
{
 6f0:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
 6f2:	780c      	ldrb	r4, [r1, #0]
 6f4:	0224      	lsls	r4, r4, #8
 6f6:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
 6f8:	4b02      	ldr	r3, [pc, #8]	; (704 <system_gclk_chan_set_config+0x14>)
 6fa:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
 6fc:	b2a4      	uxth	r4, r4
 6fe:	4b02      	ldr	r3, [pc, #8]	; (708 <system_gclk_chan_set_config+0x18>)
 700:	805c      	strh	r4, [r3, #2]
}
 702:	bd10      	pop	{r4, pc}
 704:	00000695 	.word	0x00000695
 708:	40000c00 	.word	0x40000c00

0000070c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
 70c:	b510      	push	{r4, lr}
 70e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
 710:	4b06      	ldr	r3, [pc, #24]	; (72c <system_gclk_chan_get_hz+0x20>)
 712:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 714:	4b06      	ldr	r3, [pc, #24]	; (730 <system_gclk_chan_get_hz+0x24>)
 716:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
 718:	4b06      	ldr	r3, [pc, #24]	; (734 <system_gclk_chan_get_hz+0x28>)
 71a:	885c      	ldrh	r4, [r3, #2]
 71c:	0524      	lsls	r4, r4, #20
 71e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
 720:	4b05      	ldr	r3, [pc, #20]	; (738 <system_gclk_chan_get_hz+0x2c>)
 722:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
 724:	0020      	movs	r0, r4
 726:	4b05      	ldr	r3, [pc, #20]	; (73c <system_gclk_chan_get_hz+0x30>)
 728:	4798      	blx	r3
}
 72a:	bd10      	pop	{r4, pc}
 72c:	00000299 	.word	0x00000299
 730:	40000c02 	.word	0x40000c02
 734:	40000c00 	.word	0x40000c00
 738:	000002d9 	.word	0x000002d9
 73c:	00000609 	.word	0x00000609

00000740 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
 740:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
 742:	78d3      	ldrb	r3, [r2, #3]
 744:	2b00      	cmp	r3, #0
 746:	d135      	bne.n	7b4 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
 748:	7813      	ldrb	r3, [r2, #0]
 74a:	2b80      	cmp	r3, #128	; 0x80
 74c:	d029      	beq.n	7a2 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
 74e:	061b      	lsls	r3, r3, #24
 750:	2480      	movs	r4, #128	; 0x80
 752:	0264      	lsls	r4, r4, #9
 754:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
 756:	7854      	ldrb	r4, [r2, #1]
 758:	2502      	movs	r5, #2
 75a:	43ac      	bics	r4, r5
 75c:	d106      	bne.n	76c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
 75e:	7894      	ldrb	r4, [r2, #2]
 760:	2c00      	cmp	r4, #0
 762:	d120      	bne.n	7a6 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
 764:	2480      	movs	r4, #128	; 0x80
 766:	02a4      	lsls	r4, r4, #10
 768:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
 76a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 76c:	7854      	ldrb	r4, [r2, #1]
 76e:	3c01      	subs	r4, #1
 770:	2c01      	cmp	r4, #1
 772:	d91c      	bls.n	7ae <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
 774:	040d      	lsls	r5, r1, #16
 776:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 778:	24a0      	movs	r4, #160	; 0xa0
 77a:	05e4      	lsls	r4, r4, #23
 77c:	432c      	orrs	r4, r5
 77e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 780:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
 782:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 784:	24d0      	movs	r4, #208	; 0xd0
 786:	0624      	lsls	r4, r4, #24
 788:	432c      	orrs	r4, r5
 78a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 78c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
 78e:	78d4      	ldrb	r4, [r2, #3]
 790:	2c00      	cmp	r4, #0
 792:	d122      	bne.n	7da <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
 794:	035b      	lsls	r3, r3, #13
 796:	d51c      	bpl.n	7d2 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
 798:	7893      	ldrb	r3, [r2, #2]
 79a:	2b01      	cmp	r3, #1
 79c:	d01e      	beq.n	7dc <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
 79e:	6141      	str	r1, [r0, #20]
 7a0:	e017      	b.n	7d2 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
 7a2:	2300      	movs	r3, #0
 7a4:	e7d7      	b.n	756 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
 7a6:	24c0      	movs	r4, #192	; 0xc0
 7a8:	02e4      	lsls	r4, r4, #11
 7aa:	4323      	orrs	r3, r4
 7ac:	e7dd      	b.n	76a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
 7ae:	4c0d      	ldr	r4, [pc, #52]	; (7e4 <_system_pinmux_config+0xa4>)
 7b0:	4023      	ands	r3, r4
 7b2:	e7df      	b.n	774 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
 7b4:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
 7b6:	040c      	lsls	r4, r1, #16
 7b8:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 7ba:	23a0      	movs	r3, #160	; 0xa0
 7bc:	05db      	lsls	r3, r3, #23
 7be:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 7c0:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
 7c2:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 7c4:	23d0      	movs	r3, #208	; 0xd0
 7c6:	061b      	lsls	r3, r3, #24
 7c8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 7ca:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
 7cc:	78d3      	ldrb	r3, [r2, #3]
 7ce:	2b00      	cmp	r3, #0
 7d0:	d103      	bne.n	7da <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 7d2:	7853      	ldrb	r3, [r2, #1]
 7d4:	3b01      	subs	r3, #1
 7d6:	2b01      	cmp	r3, #1
 7d8:	d902      	bls.n	7e0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
 7da:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
 7dc:	6181      	str	r1, [r0, #24]
 7de:	e7f8      	b.n	7d2 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
 7e0:	6081      	str	r1, [r0, #8]
}
 7e2:	e7fa      	b.n	7da <_system_pinmux_config+0x9a>
 7e4:	fffbffff 	.word	0xfffbffff

000007e8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
 7e8:	b510      	push	{r4, lr}
 7ea:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
 7ec:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
 7ee:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
 7f0:	2900      	cmp	r1, #0
 7f2:	d104      	bne.n	7fe <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
 7f4:	0943      	lsrs	r3, r0, #5
 7f6:	01db      	lsls	r3, r3, #7
 7f8:	4905      	ldr	r1, [pc, #20]	; (810 <system_pinmux_pin_set_config+0x28>)
 7fa:	468c      	mov	ip, r1
 7fc:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
 7fe:	241f      	movs	r4, #31
 800:	4020      	ands	r0, r4
 802:	2101      	movs	r1, #1
 804:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
 806:	0018      	movs	r0, r3
 808:	4b02      	ldr	r3, [pc, #8]	; (814 <system_pinmux_pin_set_config+0x2c>)
 80a:	4798      	blx	r3
}
 80c:	bd10      	pop	{r4, pc}
 80e:	46c0      	nop			; (mov r8, r8)
 810:	41004400 	.word	0x41004400
 814:	00000741 	.word	0x00000741

00000818 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
 818:	4770      	bx	lr
	...

0000081c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
 81c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
 81e:	4b05      	ldr	r3, [pc, #20]	; (834 <system_init+0x18>)
 820:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
 822:	4b05      	ldr	r3, [pc, #20]	; (838 <system_init+0x1c>)
 824:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
 826:	4b05      	ldr	r3, [pc, #20]	; (83c <system_init+0x20>)
 828:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
 82a:	4b05      	ldr	r3, [pc, #20]	; (840 <system_init+0x24>)
 82c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
 82e:	4b05      	ldr	r3, [pc, #20]	; (844 <system_init+0x28>)
 830:	4798      	blx	r3
}
 832:	bd10      	pop	{r4, pc}
 834:	00000451 	.word	0x00000451
 838:	00000241 	.word	0x00000241
 83c:	00000819 	.word	0x00000819
 840:	00000819 	.word	0x00000819
 844:	00000819 	.word	0x00000819

00000848 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 848:	e7fe      	b.n	848 <Dummy_Handler>
	...

0000084c <Reset_Handler>:
{
 84c:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
 84e:	4a1a      	ldr	r2, [pc, #104]	; (8b8 <Reset_Handler+0x6c>)
 850:	4b1a      	ldr	r3, [pc, #104]	; (8bc <Reset_Handler+0x70>)
 852:	429a      	cmp	r2, r3
 854:	d011      	beq.n	87a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
 856:	001a      	movs	r2, r3
 858:	4b19      	ldr	r3, [pc, #100]	; (8c0 <Reset_Handler+0x74>)
 85a:	429a      	cmp	r2, r3
 85c:	d20d      	bcs.n	87a <Reset_Handler+0x2e>
 85e:	4a19      	ldr	r2, [pc, #100]	; (8c4 <Reset_Handler+0x78>)
 860:	3303      	adds	r3, #3
 862:	1a9b      	subs	r3, r3, r2
 864:	089b      	lsrs	r3, r3, #2
 866:	3301      	adds	r3, #1
 868:	009b      	lsls	r3, r3, #2
 86a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 86c:	4813      	ldr	r0, [pc, #76]	; (8bc <Reset_Handler+0x70>)
 86e:	4912      	ldr	r1, [pc, #72]	; (8b8 <Reset_Handler+0x6c>)
 870:	588c      	ldr	r4, [r1, r2]
 872:	5084      	str	r4, [r0, r2]
 874:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 876:	429a      	cmp	r2, r3
 878:	d1fa      	bne.n	870 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 87a:	4a13      	ldr	r2, [pc, #76]	; (8c8 <Reset_Handler+0x7c>)
 87c:	4b13      	ldr	r3, [pc, #76]	; (8cc <Reset_Handler+0x80>)
 87e:	429a      	cmp	r2, r3
 880:	d20a      	bcs.n	898 <Reset_Handler+0x4c>
 882:	43d3      	mvns	r3, r2
 884:	4911      	ldr	r1, [pc, #68]	; (8cc <Reset_Handler+0x80>)
 886:	185b      	adds	r3, r3, r1
 888:	2103      	movs	r1, #3
 88a:	438b      	bics	r3, r1
 88c:	3304      	adds	r3, #4
 88e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 890:	2100      	movs	r1, #0
 892:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 894:	4293      	cmp	r3, r2
 896:	d1fc      	bne.n	892 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 898:	4a0d      	ldr	r2, [pc, #52]	; (8d0 <Reset_Handler+0x84>)
 89a:	21ff      	movs	r1, #255	; 0xff
 89c:	4b0d      	ldr	r3, [pc, #52]	; (8d4 <Reset_Handler+0x88>)
 89e:	438b      	bics	r3, r1
 8a0:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
 8a2:	4a0d      	ldr	r2, [pc, #52]	; (8d8 <Reset_Handler+0x8c>)
 8a4:	6853      	ldr	r3, [r2, #4]
 8a6:	397f      	subs	r1, #127	; 0x7f
 8a8:	430b      	orrs	r3, r1
 8aa:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 8ac:	4b0b      	ldr	r3, [pc, #44]	; (8dc <Reset_Handler+0x90>)
 8ae:	4798      	blx	r3
        main();
 8b0:	4b0b      	ldr	r3, [pc, #44]	; (8e0 <Reset_Handler+0x94>)
 8b2:	4798      	blx	r3
 8b4:	e7fe      	b.n	8b4 <Reset_Handler+0x68>
 8b6:	46c0      	nop			; (mov r8, r8)
 8b8:	00000ad8 	.word	0x00000ad8
 8bc:	20000000 	.word	0x20000000
 8c0:	2000000c 	.word	0x2000000c
 8c4:	20000004 	.word	0x20000004
 8c8:	2000000c 	.word	0x2000000c
 8cc:	2000005c 	.word	0x2000005c
 8d0:	e000ed00 	.word	0xe000ed00
 8d4:	00000000 	.word	0x00000000
 8d8:	41004000 	.word	0x41004000
 8dc:	00000a31 	.word	0x00000a31
 8e0:	000008e5 	.word	0x000008e5

000008e4 <main>:
*
***************************************************************************************************************************/
#include <main.h>

int main (void)
{
 8e4:	b570      	push	{r4, r5, r6, lr}
	system_init();
 8e6:	4b09      	ldr	r3, [pc, #36]	; (90c <main+0x28>)
 8e8:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
 8ea:	4c09      	ldr	r4, [pc, #36]	; (910 <main+0x2c>)
 8ec:	2580      	movs	r5, #128	; 0x80
 8ee:	022d      	lsls	r5, r5, #8

		if( port_pin_get_input_level(BUTTON_0_PIN) == SW0_ACTIVE )
		{

			port_pin_toggle_output_level(LED0);
			delay_ms(100);
 8f0:	4e08      	ldr	r6, [pc, #32]	; (914 <main+0x30>)
 8f2:	e004      	b.n	8fe <main+0x1a>
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
 8f4:	2380      	movs	r3, #128	; 0x80
 8f6:	01db      	lsls	r3, r3, #7
 8f8:	61e3      	str	r3, [r4, #28]
 8fa:	2064      	movs	r0, #100	; 0x64
 8fc:	47b0      	blx	r6
	return (port_base->IN.reg & pin_mask);
 8fe:	6a23      	ldr	r3, [r4, #32]
		if( port_pin_get_input_level(BUTTON_0_PIN) == SW0_ACTIVE )
 900:	422b      	tst	r3, r5
 902:	d0f7      	beq.n	8f4 <main+0x10>
		port_base->OUTSET.reg = pin_mask;
 904:	2380      	movs	r3, #128	; 0x80
 906:	01db      	lsls	r3, r3, #7
 908:	61a3      	str	r3, [r4, #24]
 90a:	e7f8      	b.n	8fe <main+0x1a>
 90c:	0000081d 	.word	0x0000081d
 910:	41004400 	.word	0x41004400
 914:	000001a5 	.word	0x000001a5

00000918 <__udivsi3>:
 918:	2200      	movs	r2, #0
 91a:	0843      	lsrs	r3, r0, #1
 91c:	428b      	cmp	r3, r1
 91e:	d374      	bcc.n	a0a <__udivsi3+0xf2>
 920:	0903      	lsrs	r3, r0, #4
 922:	428b      	cmp	r3, r1
 924:	d35f      	bcc.n	9e6 <__udivsi3+0xce>
 926:	0a03      	lsrs	r3, r0, #8
 928:	428b      	cmp	r3, r1
 92a:	d344      	bcc.n	9b6 <__udivsi3+0x9e>
 92c:	0b03      	lsrs	r3, r0, #12
 92e:	428b      	cmp	r3, r1
 930:	d328      	bcc.n	984 <__udivsi3+0x6c>
 932:	0c03      	lsrs	r3, r0, #16
 934:	428b      	cmp	r3, r1
 936:	d30d      	bcc.n	954 <__udivsi3+0x3c>
 938:	22ff      	movs	r2, #255	; 0xff
 93a:	0209      	lsls	r1, r1, #8
 93c:	ba12      	rev	r2, r2
 93e:	0c03      	lsrs	r3, r0, #16
 940:	428b      	cmp	r3, r1
 942:	d302      	bcc.n	94a <__udivsi3+0x32>
 944:	1212      	asrs	r2, r2, #8
 946:	0209      	lsls	r1, r1, #8
 948:	d065      	beq.n	a16 <__udivsi3+0xfe>
 94a:	0b03      	lsrs	r3, r0, #12
 94c:	428b      	cmp	r3, r1
 94e:	d319      	bcc.n	984 <__udivsi3+0x6c>
 950:	e000      	b.n	954 <__udivsi3+0x3c>
 952:	0a09      	lsrs	r1, r1, #8
 954:	0bc3      	lsrs	r3, r0, #15
 956:	428b      	cmp	r3, r1
 958:	d301      	bcc.n	95e <__udivsi3+0x46>
 95a:	03cb      	lsls	r3, r1, #15
 95c:	1ac0      	subs	r0, r0, r3
 95e:	4152      	adcs	r2, r2
 960:	0b83      	lsrs	r3, r0, #14
 962:	428b      	cmp	r3, r1
 964:	d301      	bcc.n	96a <__udivsi3+0x52>
 966:	038b      	lsls	r3, r1, #14
 968:	1ac0      	subs	r0, r0, r3
 96a:	4152      	adcs	r2, r2
 96c:	0b43      	lsrs	r3, r0, #13
 96e:	428b      	cmp	r3, r1
 970:	d301      	bcc.n	976 <__udivsi3+0x5e>
 972:	034b      	lsls	r3, r1, #13
 974:	1ac0      	subs	r0, r0, r3
 976:	4152      	adcs	r2, r2
 978:	0b03      	lsrs	r3, r0, #12
 97a:	428b      	cmp	r3, r1
 97c:	d301      	bcc.n	982 <__udivsi3+0x6a>
 97e:	030b      	lsls	r3, r1, #12
 980:	1ac0      	subs	r0, r0, r3
 982:	4152      	adcs	r2, r2
 984:	0ac3      	lsrs	r3, r0, #11
 986:	428b      	cmp	r3, r1
 988:	d301      	bcc.n	98e <__udivsi3+0x76>
 98a:	02cb      	lsls	r3, r1, #11
 98c:	1ac0      	subs	r0, r0, r3
 98e:	4152      	adcs	r2, r2
 990:	0a83      	lsrs	r3, r0, #10
 992:	428b      	cmp	r3, r1
 994:	d301      	bcc.n	99a <__udivsi3+0x82>
 996:	028b      	lsls	r3, r1, #10
 998:	1ac0      	subs	r0, r0, r3
 99a:	4152      	adcs	r2, r2
 99c:	0a43      	lsrs	r3, r0, #9
 99e:	428b      	cmp	r3, r1
 9a0:	d301      	bcc.n	9a6 <__udivsi3+0x8e>
 9a2:	024b      	lsls	r3, r1, #9
 9a4:	1ac0      	subs	r0, r0, r3
 9a6:	4152      	adcs	r2, r2
 9a8:	0a03      	lsrs	r3, r0, #8
 9aa:	428b      	cmp	r3, r1
 9ac:	d301      	bcc.n	9b2 <__udivsi3+0x9a>
 9ae:	020b      	lsls	r3, r1, #8
 9b0:	1ac0      	subs	r0, r0, r3
 9b2:	4152      	adcs	r2, r2
 9b4:	d2cd      	bcs.n	952 <__udivsi3+0x3a>
 9b6:	09c3      	lsrs	r3, r0, #7
 9b8:	428b      	cmp	r3, r1
 9ba:	d301      	bcc.n	9c0 <__udivsi3+0xa8>
 9bc:	01cb      	lsls	r3, r1, #7
 9be:	1ac0      	subs	r0, r0, r3
 9c0:	4152      	adcs	r2, r2
 9c2:	0983      	lsrs	r3, r0, #6
 9c4:	428b      	cmp	r3, r1
 9c6:	d301      	bcc.n	9cc <__udivsi3+0xb4>
 9c8:	018b      	lsls	r3, r1, #6
 9ca:	1ac0      	subs	r0, r0, r3
 9cc:	4152      	adcs	r2, r2
 9ce:	0943      	lsrs	r3, r0, #5
 9d0:	428b      	cmp	r3, r1
 9d2:	d301      	bcc.n	9d8 <__udivsi3+0xc0>
 9d4:	014b      	lsls	r3, r1, #5
 9d6:	1ac0      	subs	r0, r0, r3
 9d8:	4152      	adcs	r2, r2
 9da:	0903      	lsrs	r3, r0, #4
 9dc:	428b      	cmp	r3, r1
 9de:	d301      	bcc.n	9e4 <__udivsi3+0xcc>
 9e0:	010b      	lsls	r3, r1, #4
 9e2:	1ac0      	subs	r0, r0, r3
 9e4:	4152      	adcs	r2, r2
 9e6:	08c3      	lsrs	r3, r0, #3
 9e8:	428b      	cmp	r3, r1
 9ea:	d301      	bcc.n	9f0 <__udivsi3+0xd8>
 9ec:	00cb      	lsls	r3, r1, #3
 9ee:	1ac0      	subs	r0, r0, r3
 9f0:	4152      	adcs	r2, r2
 9f2:	0883      	lsrs	r3, r0, #2
 9f4:	428b      	cmp	r3, r1
 9f6:	d301      	bcc.n	9fc <__udivsi3+0xe4>
 9f8:	008b      	lsls	r3, r1, #2
 9fa:	1ac0      	subs	r0, r0, r3
 9fc:	4152      	adcs	r2, r2
 9fe:	0843      	lsrs	r3, r0, #1
 a00:	428b      	cmp	r3, r1
 a02:	d301      	bcc.n	a08 <__udivsi3+0xf0>
 a04:	004b      	lsls	r3, r1, #1
 a06:	1ac0      	subs	r0, r0, r3
 a08:	4152      	adcs	r2, r2
 a0a:	1a41      	subs	r1, r0, r1
 a0c:	d200      	bcs.n	a10 <__udivsi3+0xf8>
 a0e:	4601      	mov	r1, r0
 a10:	4152      	adcs	r2, r2
 a12:	4610      	mov	r0, r2
 a14:	4770      	bx	lr
 a16:	e7ff      	b.n	a18 <__udivsi3+0x100>
 a18:	b501      	push	{r0, lr}
 a1a:	2000      	movs	r0, #0
 a1c:	f000 f806 	bl	a2c <__aeabi_idiv0>
 a20:	bd02      	pop	{r1, pc}
 a22:	46c0      	nop			; (mov r8, r8)

00000a24 <__aeabi_uidivmod>:
 a24:	2900      	cmp	r1, #0
 a26:	d0f7      	beq.n	a18 <__udivsi3+0x100>
 a28:	e776      	b.n	918 <__udivsi3>
 a2a:	4770      	bx	lr

00000a2c <__aeabi_idiv0>:
 a2c:	4770      	bx	lr
 a2e:	46c0      	nop			; (mov r8, r8)

00000a30 <__libc_init_array>:
 a30:	b570      	push	{r4, r5, r6, lr}
 a32:	2600      	movs	r6, #0
 a34:	4d0c      	ldr	r5, [pc, #48]	; (a68 <__libc_init_array+0x38>)
 a36:	4c0d      	ldr	r4, [pc, #52]	; (a6c <__libc_init_array+0x3c>)
 a38:	1b64      	subs	r4, r4, r5
 a3a:	10a4      	asrs	r4, r4, #2
 a3c:	42a6      	cmp	r6, r4
 a3e:	d109      	bne.n	a54 <__libc_init_array+0x24>
 a40:	2600      	movs	r6, #0
 a42:	f000 f839 	bl	ab8 <_init>
 a46:	4d0a      	ldr	r5, [pc, #40]	; (a70 <__libc_init_array+0x40>)
 a48:	4c0a      	ldr	r4, [pc, #40]	; (a74 <__libc_init_array+0x44>)
 a4a:	1b64      	subs	r4, r4, r5
 a4c:	10a4      	asrs	r4, r4, #2
 a4e:	42a6      	cmp	r6, r4
 a50:	d105      	bne.n	a5e <__libc_init_array+0x2e>
 a52:	bd70      	pop	{r4, r5, r6, pc}
 a54:	00b3      	lsls	r3, r6, #2
 a56:	58eb      	ldr	r3, [r5, r3]
 a58:	4798      	blx	r3
 a5a:	3601      	adds	r6, #1
 a5c:	e7ee      	b.n	a3c <__libc_init_array+0xc>
 a5e:	00b3      	lsls	r3, r6, #2
 a60:	58eb      	ldr	r3, [r5, r3]
 a62:	4798      	blx	r3
 a64:	3601      	adds	r6, #1
 a66:	e7f2      	b.n	a4e <__libc_init_array+0x1e>
 a68:	00000ac4 	.word	0x00000ac4
 a6c:	00000ac4 	.word	0x00000ac4
 a70:	00000ac4 	.word	0x00000ac4
 a74:	00000ac8 	.word	0x00000ac8
 a78:	0000031a 	.word	0x0000031a
 a7c:	00000316 	.word	0x00000316
 a80:	00000316 	.word	0x00000316
 a84:	00000366 	.word	0x00000366
 a88:	00000366 	.word	0x00000366
 a8c:	0000032e 	.word	0x0000032e
 a90:	00000320 	.word	0x00000320
 a94:	00000334 	.word	0x00000334
 a98:	000003ec 	.word	0x000003ec
 a9c:	000003cc 	.word	0x000003cc
 aa0:	000003cc 	.word	0x000003cc
 aa4:	0000043c 	.word	0x0000043c
 aa8:	000003de 	.word	0x000003de
 aac:	000003fa 	.word	0x000003fa
 ab0:	000003d0 	.word	0x000003d0
 ab4:	00000408 	.word	0x00000408

00000ab8 <_init>:
 ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 aba:	46c0      	nop			; (mov r8, r8)
 abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 abe:	bc08      	pop	{r3}
 ac0:	469e      	mov	lr, r3
 ac2:	4770      	bx	lr

00000ac4 <__init_array_start>:
 ac4:	000000cd 	.word	0x000000cd

00000ac8 <_fini>:
 ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 aca:	46c0      	nop			; (mov r8, r8)
 acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 ace:	bc08      	pop	{r3}
 ad0:	469e      	mov	lr, r3
 ad2:	4770      	bx	lr

00000ad4 <__fini_array_start>:
 ad4:	000000a5 	.word	0x000000a5

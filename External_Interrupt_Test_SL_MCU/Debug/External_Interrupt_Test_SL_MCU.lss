
External_Interrupt_Test_SL_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001344  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000018  20000000  00001344  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000dc  20000018  0000135c  00020018  2**2
                  ALLOC
  3 .stack        00002004  200000f4  00001438  00020018  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001e0af  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003015  00000000  00000000  0003e148  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00003712  00000000  00000000  0004115d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000003e8  00000000  00000000  0004486f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000003a0  00000000  00000000  00044c57  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00012c72  00000000  00000000  00044ff7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a06e  00000000  00000000  00057c69  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005f3c5  00000000  00000000  00061cd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000904  00000000  00000000  000c109c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f8 20 00 20 99 10 00 00 95 10 00 00 95 10 00 00     . . ............
	...
      2c:	95 10 00 00 00 00 00 00 00 00 00 00 95 10 00 00     ................
      3c:	a5 05 00 00 95 10 00 00 95 10 00 00 95 10 00 00     ................
      4c:	95 10 00 00 95 10 00 00 95 10 00 00 95 10 00 00     ................
      5c:	21 09 00 00 31 09 00 00 41 09 00 00 51 09 00 00     !...1...A...Q...
      6c:	61 09 00 00 71 09 00 00 95 10 00 00 95 10 00 00     a...q...........
      7c:	95 10 00 00 95 10 00 00 95 10 00 00 95 10 00 00     ................
      8c:	95 10 00 00 95 10 00 00 95 10 00 00 95 10 00 00     ................
      9c:	95 10 00 00 95 10 00 00                             ........

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	20000018 	.word	0x20000018
      c4:	00000000 	.word	0x00000000
      c8:	00001344 	.word	0x00001344

000000cc <frame_dummy>:
      cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      ce:	b510      	push	{r4, lr}
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd10      	pop	{r4, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	2000001c 	.word	0x2000001c
      f8:	00001344 	.word	0x00001344
      fc:	00001344 	.word	0x00001344
     100:	00000000 	.word	0x00000000

00000104 <i2c_slave_init>:
		_i2c_slave_set_ctrlb_ackact(module, false);
		i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
	}
	if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC) {
		/* Clear stop flag */
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
     104:	b5f0      	push	{r4, r5, r6, r7, lr}
			i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
     106:	46ce      	mov	lr, r9
     108:	4647      	mov	r7, r8
     10a:	b580      	push	{r7, lr}
			return STATUS_ABORTED;
     10c:	b083      	sub	sp, #12
     10e:	0005      	movs	r5, r0
		bool send_ack)
{
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     110:	000c      	movs	r4, r1
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     112:	0016      	movs	r6, r2
     114:	6029      	str	r1, [r5, #0]

#if (SAMD20 || SAMD21 || SAMD09 || SAMD10 || SAMD11 || SAML21 || SAMDA1 ||  \
		SAML22 || SAMC20 || SAMC21 || SAMHA1 || (SAMHA0) || SAMR30)
	/* Workaround, Following two write are atomic */
	system_interrupt_enter_critical_section();
	i2c_hw->STATUS.reg = 0;
     116:	680b      	ldr	r3, [r1, #0]
     118:	201c      	movs	r0, #28

	if (send_ack == true) {
		i2c_hw->CTRLB.reg = 0;
	}
	else {
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     11a:	079b      	lsls	r3, r3, #30
     11c:	d504      	bpl.n	128 <i2c_slave_init+0x24>
     11e:	b003      	add	sp, #12
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     120:	bc0c      	pop	{r2, r3}
     122:	4690      	mov	r8, r2
		i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
     124:	4699      	mov	r9, r3
     126:	bdf0      	pop	{r4, r5, r6, r7, pc}
     128:	680b      	ldr	r3, [r1, #0]
     12a:	3817      	subs	r0, #23
     12c:	07db      	lsls	r3, r3, #31
     12e:	d4f6      	bmi.n	11e <i2c_slave_init+0x1a>
     130:	0008      	movs	r0, r1
     132:	4b41      	ldr	r3, [pc, #260]	; (238 <i2c_slave_init+0x134>)
     134:	4699      	mov	r9, r3
     136:	4798      	blx	r3
     138:	4a40      	ldr	r2, [pc, #256]	; (23c <i2c_slave_init+0x138>)
     13a:	6a11      	ldr	r1, [r2, #32]
     13c:	1c83      	adds	r3, r0, #2
     13e:	2701      	movs	r7, #1
     140:	46b8      	mov	r8, r7
     142:	409f      	lsls	r7, r3
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     144:	003b      	movs	r3, r7
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     146:	430b      	orrs	r3, r1
     148:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     14a:	a901      	add	r1, sp, #4
     14c:	7cb3      	ldrb	r3, [r6, #18]
     14e:	700b      	strb	r3, [r1, #0]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     150:	300d      	adds	r0, #13
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     152:	b2c3      	uxtb	r3, r0
     154:	001f      	movs	r7, r3
     156:	0018      	movs	r0, r3
     158:	4b39      	ldr	r3, [pc, #228]	; (240 <i2c_slave_init+0x13c>)
     15a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     15c:	0038      	movs	r0, r7
     15e:	4b39      	ldr	r3, [pc, #228]	; (244 <i2c_slave_init+0x140>)
     160:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     162:	7cb0      	ldrb	r0, [r6, #18]
     164:	2100      	movs	r1, #0
     166:	4b38      	ldr	r3, [pc, #224]	; (248 <i2c_slave_init+0x144>)
     168:	4798      	blx	r3
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     16a:	6828      	ldr	r0, [r5, #0]
     16c:	47c8      	blx	r9
     16e:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _i2c_slave_interrupt_handler);
     170:	4936      	ldr	r1, [pc, #216]	; (24c <i2c_slave_init+0x148>)
     172:	4b37      	ldr	r3, [pc, #220]	; (250 <i2c_slave_init+0x14c>)
     174:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     176:	00bf      	lsls	r7, r7, #2
     178:	4b36      	ldr	r3, [pc, #216]	; (254 <i2c_slave_init+0x150>)
     17a:	50fd      	str	r5, [r7, r3]
	module->registered_callback = 0;
     17c:	2300      	movs	r3, #0
     17e:	2224      	movs	r2, #36	; 0x24
     180:	54ab      	strb	r3, [r5, r2]
	module->enabled_callback = 0;
     182:	3201      	adds	r2, #1
     184:	54ab      	strb	r3, [r5, r2]
	module->buffer_length = 0;
     186:	84eb      	strh	r3, [r5, #38]	; 0x26
	module->nack_on_address = config->enable_nack_on_address;
     188:	7c73      	ldrb	r3, [r6, #17]
     18a:	722b      	strb	r3, [r5, #8]
	i2c_hw->CTRLA.reg = SERCOM_I2CS_CTRLA_MODE_I2C_SLAVE;
     18c:	2310      	movs	r3, #16
     18e:	6023      	str	r3, [r4, #0]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     190:	682c      	ldr	r4, [r5, #0]
	module->buffer_timeout = config->buffer_timeout;
     192:	8933      	ldrh	r3, [r6, #8]
     194:	80eb      	strh	r3, [r5, #6]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     196:	2380      	movs	r3, #128	; 0x80
     198:	466a      	mov	r2, sp
     19a:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     19c:	2300      	movs	r3, #0
     19e:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     1a0:	466b      	mov	r3, sp
     1a2:	4642      	mov	r2, r8
     1a4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     1a6:	2300      	movs	r3, #0
     1a8:	466a      	mov	r2, sp
     1aa:	70d3      	strb	r3, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     1ac:	6970      	ldr	r0, [r6, #20]
	uint32_t pad1 = config->pinmux_pad1;
     1ae:	69b5      	ldr	r5, [r6, #24]
	if (pad0 == PINMUX_DEFAULT) {
     1b0:	2800      	cmp	r0, #0
     1b2:	d035      	beq.n	220 <i2c_slave_init+0x11c>
	pin_conf.mux_position = pad0 & 0xFFFF;
     1b4:	466b      	mov	r3, sp
     1b6:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     1b8:	2302      	movs	r3, #2
     1ba:	466a      	mov	r2, sp
     1bc:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     1be:	0c00      	lsrs	r0, r0, #16
     1c0:	b2c0      	uxtb	r0, r0
     1c2:	4669      	mov	r1, sp
     1c4:	4b24      	ldr	r3, [pc, #144]	; (258 <i2c_slave_init+0x154>)
     1c6:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     1c8:	2d00      	cmp	r5, #0
     1ca:	d02e      	beq.n	22a <i2c_slave_init+0x126>
	pin_conf.mux_position = pad1 & 0xFFFF;
     1cc:	466b      	mov	r3, sp
     1ce:	701d      	strb	r5, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     1d0:	2302      	movs	r3, #2
     1d2:	466a      	mov	r2, sp
     1d4:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     1d6:	0c2d      	lsrs	r5, r5, #16
     1d8:	b2e8      	uxtb	r0, r5
     1da:	4669      	mov	r1, sp
     1dc:	4b1e      	ldr	r3, [pc, #120]	; (258 <i2c_slave_init+0x154>)
     1de:	4798      	blx	r3
	if (config->run_in_standby || system_is_debugger_present()) {
     1e0:	7cf3      	ldrb	r3, [r6, #19]
		tmp_ctrla = SERCOM_I2CS_CTRLA_RUNSTDBY;
     1e2:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     1e4:	2b00      	cmp	r3, #0
     1e6:	d104      	bne.n	1f2 <i2c_slave_init+0xee>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     1e8:	4b1c      	ldr	r3, [pc, #112]	; (25c <i2c_slave_init+0x158>)
     1ea:	789b      	ldrb	r3, [r3, #2]
     1ec:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CS_CTRLA_RUNSTDBY;
     1ee:	0fdb      	lsrs	r3, r3, #31
     1f0:	01da      	lsls	r2, r3, #7
	i2c_hw->CTRLA.reg |= tmp_ctrla;
     1f2:	6821      	ldr	r1, [r4, #0]
			(config->scl_low_timeout << SERCOM_I2CS_CTRLA_LOWTOUT_Pos);
     1f4:	7f33      	ldrb	r3, [r6, #28]
     1f6:	079b      	lsls	r3, r3, #30
	i2c_hw->CTRLA.reg |= tmp_ctrla;
     1f8:	430b      	orrs	r3, r1
     1fa:	6871      	ldr	r1, [r6, #4]
     1fc:	430b      	orrs	r3, r1
     1fe:	4313      	orrs	r3, r2
     200:	6023      	str	r3, [r4, #0]
	i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_SMEN | config->address_mode;
     202:	8972      	ldrh	r2, [r6, #10]
     204:	2380      	movs	r3, #128	; 0x80
     206:	005b      	lsls	r3, r3, #1
     208:	4313      	orrs	r3, r2
     20a:	6063      	str	r3, [r4, #4]
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
     20c:	89b3      	ldrh	r3, [r6, #12]
     20e:	005b      	lsls	r3, r3, #1
			config->address_mask << SERCOM_I2CS_ADDR_ADDRMASK_Pos |
     210:	89f2      	ldrh	r2, [r6, #14]
     212:	0452      	lsls	r2, r2, #17
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
     214:	4313      	orrs	r3, r2
			config->enable_general_call_address << SERCOM_I2CS_ADDR_GENCEN_Pos;
     216:	7c32      	ldrb	r2, [r6, #16]
			config->address_mask << SERCOM_I2CS_ADDR_ADDRMASK_Pos |
     218:	4313      	orrs	r3, r2
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
     21a:	6163      	str	r3, [r4, #20]
	return _i2c_slave_set_config(module, config);
     21c:	2000      	movs	r0, #0
     21e:	e77e      	b.n	11e <i2c_slave_init+0x1a>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     220:	2100      	movs	r1, #0
     222:	0020      	movs	r0, r4
     224:	4b0e      	ldr	r3, [pc, #56]	; (260 <i2c_slave_init+0x15c>)
     226:	4798      	blx	r3
     228:	e7c4      	b.n	1b4 <i2c_slave_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     22a:	2101      	movs	r1, #1
     22c:	0020      	movs	r0, r4
     22e:	4b0c      	ldr	r3, [pc, #48]	; (260 <i2c_slave_init+0x15c>)
     230:	4798      	blx	r3
     232:	0005      	movs	r5, r0
     234:	e7ca      	b.n	1cc <i2c_slave_init+0xc8>
     236:	46c0      	nop			; (mov r8, r8)
     238:	00000879 	.word	0x00000879
     23c:	40000400 	.word	0x40000400
     240:	00000f3d 	.word	0x00000f3d
     244:	00000eb1 	.word	0x00000eb1
     248:	000006b5 	.word	0x000006b5
     24c:	000002d1 	.word	0x000002d1
     250:	000008b5 	.word	0x000008b5
     254:	200000dc 	.word	0x200000dc
     258:	00001035 	.word	0x00001035
     25c:	41002000 	.word	0x41002000
     260:	00000701 	.word	0x00000701

00000264 <i2c_slave_register_callback>:
 */
void i2c_slave_register_callback(
		struct i2c_slave_module *const module,
		i2c_slave_callback_t callback,
		enum i2c_slave_callback callback_type)
{
     264:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback. */
	module->callbacks[callback_type] = callback;
     266:	1c93      	adds	r3, r2, #2
     268:	009b      	lsls	r3, r3, #2
     26a:	18c3      	adds	r3, r0, r3
     26c:	6059      	str	r1, [r3, #4]

	/* Set corresponding bit to set callback as initiated. */
	module->registered_callback |= (1 << callback_type);
     26e:	2424      	movs	r4, #36	; 0x24
     270:	5d03      	ldrb	r3, [r0, r4]
     272:	2101      	movs	r1, #1
     274:	4091      	lsls	r1, r2
     276:	430b      	orrs	r3, r1
     278:	b2db      	uxtb	r3, r3
     27a:	5503      	strb	r3, [r0, r4]
}
     27c:	bd10      	pop	{r4, pc}

0000027e <i2c_slave_read_packet_job>:
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy doing async operation. */
	if (module->buffer_remaining > 0) {
     27e:	8d02      	ldrh	r2, [r0, #40]	; 0x28
		return STATUS_BUSY;
     280:	2305      	movs	r3, #5
	if (module->buffer_remaining > 0) {
     282:	2a00      	cmp	r2, #0
     284:	d001      	beq.n	28a <i2c_slave_read_packet_job+0xc>
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
			SERCOM_I2CS_INTFLAG_DRDY | SERCOM_I2CS_INTFLAG_PREC;

	/* Read will begin when master initiates the transfer */
	return STATUS_OK;
}
     286:	0018      	movs	r0, r3
     288:	4770      	bx	lr
	module->buffer           = packet->data;
     28a:	684b      	ldr	r3, [r1, #4]
     28c:	62c3      	str	r3, [r0, #44]	; 0x2c
	module->buffer_remaining = packet->data_length;
     28e:	880b      	ldrh	r3, [r1, #0]
     290:	8503      	strh	r3, [r0, #40]	; 0x28
	module->buffer_length    = packet->data_length;
     292:	880b      	ldrh	r3, [r1, #0]
     294:	84c3      	strh	r3, [r0, #38]	; 0x26
	module->status           = STATUS_BUSY;
     296:	3205      	adds	r2, #5
     298:	2331      	movs	r3, #49	; 0x31
     29a:	54c2      	strb	r2, [r0, r3]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     29c:	6803      	ldr	r3, [r0, #0]
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
     29e:	3202      	adds	r2, #2
     2a0:	735a      	strb	r2, [r3, #13]
	return STATUS_OK;
     2a2:	2300      	movs	r3, #0
     2a4:	e7ef      	b.n	286 <i2c_slave_read_packet_job+0x8>

000002a6 <i2c_slave_write_packet_job>:
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy doing async operation. */
	if (module->buffer_remaining > 0) {
     2a6:	8d02      	ldrh	r2, [r0, #40]	; 0x28
		return STATUS_BUSY;
     2a8:	2305      	movs	r3, #5
	if (module->buffer_remaining > 0) {
     2aa:	2a00      	cmp	r2, #0
     2ac:	d001      	beq.n	2b2 <i2c_slave_write_packet_job+0xc>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
			SERCOM_I2CS_INTFLAG_DRDY | SERCOM_I2CS_INTFLAG_PREC;

	return STATUS_OK;
}
     2ae:	0018      	movs	r0, r3
     2b0:	4770      	bx	lr
	module->buffer           = packet->data;
     2b2:	684b      	ldr	r3, [r1, #4]
     2b4:	62c3      	str	r3, [r0, #44]	; 0x2c
	module->buffer_remaining = packet->data_length;
     2b6:	880b      	ldrh	r3, [r1, #0]
     2b8:	8503      	strh	r3, [r0, #40]	; 0x28
	module->buffer_length    = packet->data_length;
     2ba:	880b      	ldrh	r3, [r1, #0]
     2bc:	84c3      	strh	r3, [r0, #38]	; 0x26
	module->status           = STATUS_BUSY;
     2be:	3205      	adds	r2, #5
     2c0:	2331      	movs	r3, #49	; 0x31
     2c2:	54c2      	strb	r2, [r0, r3]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     2c4:	6803      	ldr	r3, [r0, #0]
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
     2c6:	3202      	adds	r2, #2
     2c8:	735a      	strb	r2, [r3, #13]
	return STATUS_OK;
     2ca:	2300      	movs	r3, #0
     2cc:	e7ef      	b.n	2ae <i2c_slave_write_packet_job+0x8>
	...

000002d0 <_i2c_slave_interrupt_handler>:
 *
 * \param[in] instance Sercom instance that triggered the interrupt
 */
void _i2c_slave_interrupt_handler(
		uint8_t instance)
{
     2d0:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling. */
	struct i2c_slave_module *module =
     2d2:	0080      	lsls	r0, r0, #2
     2d4:	4b9a      	ldr	r3, [pc, #616]	; (540 <_i2c_slave_interrupt_handler+0x270>)
     2d6:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_slave_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     2d8:	6825      	ldr	r5, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
     2da:	2325      	movs	r3, #37	; 0x25
     2dc:	5ce3      	ldrb	r3, [r4, r3]
     2de:	2224      	movs	r2, #36	; 0x24
     2e0:	5ca6      	ldrb	r6, [r4, r2]
	uint8_t callback_mask =
     2e2:	401e      	ands	r6, r3


	if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH) {
     2e4:	7bab      	ldrb	r3, [r5, #14]
     2e6:	079b      	lsls	r3, r3, #30
     2e8:	d400      	bmi.n	2ec <_i2c_slave_interrupt_handler+0x1c>
     2ea:	e095      	b.n	418 <_i2c_slave_interrupt_handler+0x148>
	/* Address match */
		/* Check if last transfer is done - repeated start */
		if (module->buffer_length != module->buffer_remaining &&
     2ec:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     2ee:	b29b      	uxth	r3, r3
     2f0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
     2f2:	4293      	cmp	r3, r2
     2f4:	d00d      	beq.n	312 <_i2c_slave_interrupt_handler+0x42>
				module->transfer_direction == I2C_TRANSFER_WRITE) {
     2f6:	2330      	movs	r3, #48	; 0x30
     2f8:	5ce3      	ldrb	r3, [r4, r3]
		if (module->buffer_length != module->buffer_remaining &&
     2fa:	2b00      	cmp	r3, #0
     2fc:	d109      	bne.n	312 <_i2c_slave_interrupt_handler+0x42>

			module->status = STATUS_OK;
     2fe:	2231      	movs	r2, #49	; 0x31
     300:	54a3      	strb	r3, [r4, r2]
			module->buffer_length = 0;
     302:	84e3      	strh	r3, [r4, #38]	; 0x26
			module->buffer_remaining = 0;
     304:	8523      	strh	r3, [r4, #40]	; 0x28

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))) {
     306:	07b3      	lsls	r3, r6, #30
     308:	d50b      	bpl.n	322 <_i2c_slave_interrupt_handler+0x52>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_COMPLETE](module);
     30a:	6923      	ldr	r3, [r4, #16]
     30c:	0020      	movs	r0, r4
     30e:	4798      	blx	r3
     310:	e007      	b.n	322 <_i2c_slave_interrupt_handler+0x52>
			}
		} else if (module->buffer_length != module->buffer_remaining &&
     312:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     314:	b29b      	uxth	r3, r3
     316:	429a      	cmp	r2, r3
     318:	d003      	beq.n	322 <_i2c_slave_interrupt_handler+0x52>
				module->transfer_direction == I2C_TRANSFER_READ) {
     31a:	2330      	movs	r3, #48	; 0x30
     31c:	5ce3      	ldrb	r3, [r4, r3]
		} else if (module->buffer_length != module->buffer_remaining &&
     31e:	2b01      	cmp	r3, #1
     320:	d022      	beq.n	368 <_i2c_slave_interrupt_handler+0x98>
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))) {
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
			}
		}

		if (i2c_hw->STATUS.reg & (SERCOM_I2CS_STATUS_BUSERR |
     322:	8a2a      	ldrh	r2, [r5, #16]
     324:	2343      	movs	r3, #67	; 0x43
     326:	421a      	tst	r2, r3
     328:	d004      	beq.n	334 <_i2c_slave_interrupt_handler+0x64>
				SERCOM_I2CS_STATUS_COLL | SERCOM_I2CS_STATUS_LOWTOUT)) {
			/* An error occurred in last packet transfer */
			module->status = STATUS_ERR_IO;
     32a:	2210      	movs	r2, #16
     32c:	3b12      	subs	r3, #18
     32e:	54e2      	strb	r2, [r4, r3]

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER))) {
     330:	06b3      	lsls	r3, r6, #26
     332:	d424      	bmi.n	37e <_i2c_slave_interrupt_handler+0xae>
				module->callbacks[I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER](module);
			}
		}
		if (module->nack_on_address) {
     334:	7a23      	ldrb	r3, [r4, #8]
     336:	2b00      	cmp	r3, #0
     338:	d125      	bne.n	386 <_i2c_slave_interrupt_handler+0xb6>
			/* NACK address, workaround 13574 */
			_i2c_slave_set_ctrlb_ackact(module, false);
		} else if (i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_DIR) {
     33a:	8a2b      	ldrh	r3, [r5, #16]
     33c:	071b      	lsls	r3, r3, #28
     33e:	d54a      	bpl.n	3d6 <_i2c_slave_interrupt_handler+0x106>
			/* Set transfer direction in module instance */
			module->transfer_direction = I2C_TRANSFER_READ;
     340:	2201      	movs	r2, #1
     342:	2330      	movs	r3, #48	; 0x30
     344:	54e2      	strb	r2, [r4, r3]

			/* Read request from master */
			if (callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST)) {
     346:	0773      	lsls	r3, r6, #29
     348:	d438      	bmi.n	3bc <_i2c_slave_interrupt_handler+0xec>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_REQUEST](module);
			}

			if (module->buffer_length == 0) {
     34a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     34c:	b29b      	uxth	r3, r3
     34e:	2b00      	cmp	r3, #0
     350:	d138      	bne.n	3c4 <_i2c_slave_interrupt_handler+0xf4>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     352:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     354:	4b7b      	ldr	r3, [pc, #492]	; (544 <_i2c_slave_interrupt_handler+0x274>)
     356:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     358:	2300      	movs	r3, #0
     35a:	822b      	strh	r3, [r5, #16]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     35c:	2380      	movs	r3, #128	; 0x80
     35e:	02db      	lsls	r3, r3, #11
     360:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     362:	4b79      	ldr	r3, [pc, #484]	; (548 <_i2c_slave_interrupt_handler+0x278>)
     364:	4798      	blx	r3
     366:	e018      	b.n	39a <_i2c_slave_interrupt_handler+0xca>
			module->status = STATUS_OK;
     368:	2300      	movs	r3, #0
     36a:	2231      	movs	r2, #49	; 0x31
     36c:	54a3      	strb	r3, [r4, r2]
			module->buffer_length = 0;
     36e:	84e3      	strh	r3, [r4, #38]	; 0x26
			module->buffer_remaining = 0;
     370:	8523      	strh	r3, [r4, #40]	; 0x28
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))) {
     372:	07f3      	lsls	r3, r6, #31
     374:	d5d5      	bpl.n	322 <_i2c_slave_interrupt_handler+0x52>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
     376:	68e3      	ldr	r3, [r4, #12]
     378:	0020      	movs	r0, r4
     37a:	4798      	blx	r3
     37c:	e7d1      	b.n	322 <_i2c_slave_interrupt_handler+0x52>
				module->callbacks[I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER](module);
     37e:	6a23      	ldr	r3, [r4, #32]
     380:	0020      	movs	r0, r4
     382:	4798      	blx	r3
     384:	e7d6      	b.n	334 <_i2c_slave_interrupt_handler+0x64>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     386:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     388:	4b6e      	ldr	r3, [pc, #440]	; (544 <_i2c_slave_interrupt_handler+0x274>)
     38a:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     38c:	2300      	movs	r3, #0
     38e:	822b      	strh	r3, [r5, #16]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     390:	2380      	movs	r3, #128	; 0x80
     392:	02db      	lsls	r3, r3, #11
     394:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     396:	4b6c      	ldr	r3, [pc, #432]	; (548 <_i2c_slave_interrupt_handler+0x278>)
     398:	4798      	blx	r3
		struct i2c_slave_module *const module)
{
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     39a:	6823      	ldr	r3, [r4, #0]
	/*
	 * Below code instead i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_CMD(0x3);
	 * CMD=0x3 clears all interrupts, so to keep the result similar
	 * PREC is cleared if it was set
	 */
	if (i2c_hw->INTFLAG.bit.PREC) {
     39c:	7b9a      	ldrb	r2, [r3, #14]
     39e:	07d2      	lsls	r2, r2, #31
     3a0:	d501      	bpl.n	3a6 <_i2c_slave_interrupt_handler+0xd6>
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
     3a2:	2201      	movs	r2, #1
     3a4:	739a      	strb	r2, [r3, #14]
	}
	i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_AMATCH;
     3a6:	2202      	movs	r2, #2
     3a8:	739a      	strb	r2, [r3, #14]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     3aa:	6824      	ldr	r4, [r4, #0]
	cpu_irq_enter_critical();
     3ac:	4b65      	ldr	r3, [pc, #404]	; (544 <_i2c_slave_interrupt_handler+0x274>)
     3ae:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     3b0:	2300      	movs	r3, #0
     3b2:	8223      	strh	r3, [r4, #16]
		i2c_hw->CTRLB.reg = 0;
     3b4:	6063      	str	r3, [r4, #4]
	cpu_irq_leave_critical();
     3b6:	4b64      	ldr	r3, [pc, #400]	; (548 <_i2c_slave_interrupt_handler+0x278>)
     3b8:	4798      	blx	r3
			} else {
				_i2c_slave_write(module);
			}
		}
	}
}
     3ba:	bd70      	pop	{r4, r5, r6, pc}
				module->callbacks[I2C_SLAVE_CALLBACK_READ_REQUEST](module);
     3bc:	6963      	ldr	r3, [r4, #20]
     3be:	0020      	movs	r0, r4
     3c0:	4798      	blx	r3
     3c2:	e7c2      	b.n	34a <_i2c_slave_interrupt_handler+0x7a>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     3c4:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     3c6:	4b5f      	ldr	r3, [pc, #380]	; (544 <_i2c_slave_interrupt_handler+0x274>)
     3c8:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     3ca:	2300      	movs	r3, #0
     3cc:	822b      	strh	r3, [r5, #16]
		i2c_hw->CTRLB.reg = 0;
     3ce:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     3d0:	4b5d      	ldr	r3, [pc, #372]	; (548 <_i2c_slave_interrupt_handler+0x278>)
     3d2:	4798      	blx	r3
     3d4:	e7e1      	b.n	39a <_i2c_slave_interrupt_handler+0xca>
			module->transfer_direction = I2C_TRANSFER_WRITE;
     3d6:	2200      	movs	r2, #0
     3d8:	2330      	movs	r3, #48	; 0x30
     3da:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_REQUEST)) {
     3dc:	0733      	lsls	r3, r6, #28
     3de:	d40e      	bmi.n	3fe <_i2c_slave_interrupt_handler+0x12e>
			if (module->buffer_length == 0) {
     3e0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     3e2:	b29b      	uxth	r3, r3
     3e4:	2b00      	cmp	r3, #0
     3e6:	d10e      	bne.n	406 <_i2c_slave_interrupt_handler+0x136>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     3e8:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     3ea:	4b56      	ldr	r3, [pc, #344]	; (544 <_i2c_slave_interrupt_handler+0x274>)
     3ec:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     3ee:	2300      	movs	r3, #0
     3f0:	822b      	strh	r3, [r5, #16]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     3f2:	2380      	movs	r3, #128	; 0x80
     3f4:	02db      	lsls	r3, r3, #11
     3f6:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     3f8:	4b53      	ldr	r3, [pc, #332]	; (548 <_i2c_slave_interrupt_handler+0x278>)
     3fa:	4798      	blx	r3
     3fc:	e7cd      	b.n	39a <_i2c_slave_interrupt_handler+0xca>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_REQUEST](module);
     3fe:	69a3      	ldr	r3, [r4, #24]
     400:	0020      	movs	r0, r4
     402:	4798      	blx	r3
     404:	e7ec      	b.n	3e0 <_i2c_slave_interrupt_handler+0x110>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     406:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     408:	4b4e      	ldr	r3, [pc, #312]	; (544 <_i2c_slave_interrupt_handler+0x274>)
     40a:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     40c:	2300      	movs	r3, #0
     40e:	822b      	strh	r3, [r5, #16]
		i2c_hw->CTRLB.reg = 0;
     410:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     412:	4b4d      	ldr	r3, [pc, #308]	; (548 <_i2c_slave_interrupt_handler+0x278>)
     414:	4798      	blx	r3
     416:	e7c0      	b.n	39a <_i2c_slave_interrupt_handler+0xca>
	} else if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC) {
     418:	7bab      	ldrb	r3, [r5, #14]
     41a:	07db      	lsls	r3, r3, #31
     41c:	d52e      	bpl.n	47c <_i2c_slave_interrupt_handler+0x1ac>
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
     41e:	2301      	movs	r3, #1
     420:	73ab      	strb	r3, [r5, #14]
		i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_PREC | SERCOM_I2CS_INTFLAG_DRDY;
     422:	3304      	adds	r3, #4
     424:	732b      	strb	r3, [r5, #12]
		if (!((module->enabled_callback & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST))
     426:	3320      	adds	r3, #32
     428:	5ce3      	ldrb	r3, [r4, r3]
     42a:	075b      	lsls	r3, r3, #29
     42c:	d405      	bmi.n	43a <_i2c_slave_interrupt_handler+0x16a>
				|| (module->enabled_callback & (1 << I2C_SLAVE_CALLBACK_WRITE_REQUEST)))) {
     42e:	2325      	movs	r3, #37	; 0x25
     430:	5ce3      	ldrb	r3, [r4, r3]
		if (!((module->enabled_callback & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST))
     432:	071b      	lsls	r3, r3, #28
     434:	d401      	bmi.n	43a <_i2c_slave_interrupt_handler+0x16a>
			i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_AMATCH;
     436:	2302      	movs	r3, #2
     438:	732b      	strb	r3, [r5, #12]
		if (!(module->status == STATUS_ERR_OVERFLOW || module->status == STATUS_ERR_IO)) {
     43a:	2331      	movs	r3, #49	; 0x31
     43c:	5ce3      	ldrb	r3, [r4, r3]
     43e:	2b1e      	cmp	r3, #30
     440:	d0bb      	beq.n	3ba <_i2c_slave_interrupt_handler+0xea>
     442:	2331      	movs	r3, #49	; 0x31
     444:	5ce3      	ldrb	r3, [r4, r3]
     446:	2b10      	cmp	r3, #16
     448:	d0b7      	beq.n	3ba <_i2c_slave_interrupt_handler+0xea>
			module->status = STATUS_OK;
     44a:	2300      	movs	r3, #0
     44c:	2231      	movs	r2, #49	; 0x31
     44e:	54a3      	strb	r3, [r4, r2]
			module->buffer_length = 0;
     450:	84e3      	strh	r3, [r4, #38]	; 0x26
			module->buffer_remaining = 0;
     452:	8523      	strh	r3, [r4, #40]	; 0x28
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))
     454:	07b3      	lsls	r3, r6, #30
     456:	d503      	bpl.n	460 <_i2c_slave_interrupt_handler+0x190>
					&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     458:	2330      	movs	r3, #48	; 0x30
     45a:	5ce3      	ldrb	r3, [r4, r3]
     45c:	2b00      	cmp	r3, #0
     45e:	d009      	beq.n	474 <_i2c_slave_interrupt_handler+0x1a4>
			} else if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))
     460:	07f3      	lsls	r3, r6, #31
     462:	d5aa      	bpl.n	3ba <_i2c_slave_interrupt_handler+0xea>
					&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     464:	2330      	movs	r3, #48	; 0x30
     466:	5ce3      	ldrb	r3, [r4, r3]
     468:	2b01      	cmp	r3, #1
     46a:	d1a6      	bne.n	3ba <_i2c_slave_interrupt_handler+0xea>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
     46c:	68e3      	ldr	r3, [r4, #12]
     46e:	0020      	movs	r0, r4
     470:	4798      	blx	r3
     472:	e7a2      	b.n	3ba <_i2c_slave_interrupt_handler+0xea>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_COMPLETE](module);
     474:	6923      	ldr	r3, [r4, #16]
     476:	0020      	movs	r0, r4
     478:	4798      	blx	r3
     47a:	e79e      	b.n	3ba <_i2c_slave_interrupt_handler+0xea>
	} else if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY) {
     47c:	7bab      	ldrb	r3, [r5, #14]
     47e:	075b      	lsls	r3, r3, #29
     480:	d59b      	bpl.n	3ba <_i2c_slave_interrupt_handler+0xea>
		if (module->buffer_remaining <= 0 ||
     482:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     484:	2b00      	cmp	r3, #0
     486:	d01d      	beq.n	4c4 <_i2c_slave_interrupt_handler+0x1f4>
				(module->transfer_direction == I2C_TRANSFER_READ &&
     488:	2230      	movs	r2, #48	; 0x30
     48a:	5ca2      	ldrb	r2, [r4, r2]
		if (module->buffer_remaining <= 0 ||
     48c:	2a01      	cmp	r2, #1
     48e:	d012      	beq.n	4b6 <_i2c_slave_interrupt_handler+0x1e6>
		} else if (module->buffer_length > 0 && module->buffer_remaining > 0) {
     490:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     492:	b29b      	uxth	r3, r3
     494:	2b00      	cmp	r3, #0
     496:	d100      	bne.n	49a <_i2c_slave_interrupt_handler+0x1ca>
     498:	e78f      	b.n	3ba <_i2c_slave_interrupt_handler+0xea>
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     49a:	2330      	movs	r3, #48	; 0x30
     49c:	5ce3      	ldrb	r3, [r4, r3]
     49e:	2b00      	cmp	r3, #0
     4a0:	d043      	beq.n	52a <_i2c_slave_interrupt_handler+0x25a>
	i2c_hw->DATA.reg = *(module->buffer++);
     4a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     4a4:	1c5a      	adds	r2, r3, #1
     4a6:	62e2      	str	r2, [r4, #44]	; 0x2c
     4a8:	781b      	ldrb	r3, [r3, #0]
     4aa:	b2db      	uxtb	r3, r3
     4ac:	762b      	strb	r3, [r5, #24]
	module->buffer_remaining--;
     4ae:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     4b0:	3b01      	subs	r3, #1
     4b2:	8523      	strh	r3, [r4, #40]	; 0x28
}
     4b4:	e781      	b.n	3ba <_i2c_slave_interrupt_handler+0xea>
				(module->buffer_length > module->buffer_remaining) &&
     4b6:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
     4b8:	b292      	uxth	r2, r2
				(module->transfer_direction == I2C_TRANSFER_READ &&
     4ba:	4293      	cmp	r3, r2
     4bc:	d2e8      	bcs.n	490 <_i2c_slave_interrupt_handler+0x1c0>
				(i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_RXNACK))) {
     4be:	8a2b      	ldrh	r3, [r5, #16]
				(module->buffer_length > module->buffer_remaining) &&
     4c0:	075b      	lsls	r3, r3, #29
     4c2:	d5e5      	bpl.n	490 <_i2c_slave_interrupt_handler+0x1c0>
			module->buffer_remaining = 0;
     4c4:	2300      	movs	r3, #0
     4c6:	8523      	strh	r3, [r4, #40]	; 0x28
			module->buffer_length = 0;
     4c8:	84e3      	strh	r3, [r4, #38]	; 0x26
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     4ca:	3330      	adds	r3, #48	; 0x30
     4cc:	5ce3      	ldrb	r3, [r4, r3]
     4ce:	2b00      	cmp	r3, #0
     4d0:	d117      	bne.n	502 <_i2c_slave_interrupt_handler+0x232>
	cpu_irq_enter_critical();
     4d2:	4b1c      	ldr	r3, [pc, #112]	; (544 <_i2c_slave_interrupt_handler+0x274>)
     4d4:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     4d6:	2300      	movs	r3, #0
     4d8:	822b      	strh	r3, [r5, #16]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     4da:	2380      	movs	r3, #128	; 0x80
     4dc:	02db      	lsls	r3, r3, #11
     4de:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     4e0:	4b19      	ldr	r3, [pc, #100]	; (548 <_i2c_slave_interrupt_handler+0x278>)
     4e2:	4798      	blx	r3
				i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
     4e4:	686a      	ldr	r2, [r5, #4]
     4e6:	2380      	movs	r3, #128	; 0x80
     4e8:	029b      	lsls	r3, r3, #10
     4ea:	4313      	orrs	r3, r2
     4ec:	606b      	str	r3, [r5, #4]
				module->status = STATUS_ERR_OVERFLOW;
     4ee:	221e      	movs	r2, #30
     4f0:	2331      	movs	r3, #49	; 0x31
     4f2:	54e2      	strb	r2, [r4, r3]
				if (callback_mask & (1 << I2C_SLAVE_CALLBACK_ERROR)) {
     4f4:	06f3      	lsls	r3, r6, #27
     4f6:	d400      	bmi.n	4fa <_i2c_slave_interrupt_handler+0x22a>
     4f8:	e75f      	b.n	3ba <_i2c_slave_interrupt_handler+0xea>
					module->callbacks[I2C_SLAVE_CALLBACK_ERROR](module);
     4fa:	69e3      	ldr	r3, [r4, #28]
     4fc:	0020      	movs	r0, r4
     4fe:	4798      	blx	r3
     500:	e75b      	b.n	3ba <_i2c_slave_interrupt_handler+0xea>
	cpu_irq_enter_critical();
     502:	4b10      	ldr	r3, [pc, #64]	; (544 <_i2c_slave_interrupt_handler+0x274>)
     504:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     506:	2300      	movs	r3, #0
     508:	822b      	strh	r3, [r5, #16]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     50a:	2380      	movs	r3, #128	; 0x80
     50c:	02db      	lsls	r3, r3, #11
     50e:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     510:	4b0d      	ldr	r3, [pc, #52]	; (548 <_i2c_slave_interrupt_handler+0x278>)
     512:	4798      	blx	r3
				i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
     514:	686a      	ldr	r2, [r5, #4]
     516:	2380      	movs	r3, #128	; 0x80
     518:	029b      	lsls	r3, r3, #10
     51a:	4313      	orrs	r3, r2
     51c:	606b      	str	r3, [r5, #4]
				module->status = STATUS_OK;
     51e:	2331      	movs	r3, #49	; 0x31
     520:	2200      	movs	r2, #0
     522:	54e2      	strb	r2, [r4, r3]
				i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_DRDY;
     524:	3b2d      	subs	r3, #45	; 0x2d
     526:	732b      	strb	r3, [r5, #12]
     528:	e747      	b.n	3ba <_i2c_slave_interrupt_handler+0xea>
	*(module->buffer++) = i2c_hw->DATA.reg;
     52a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     52c:	1c53      	adds	r3, r2, #1
     52e:	62e3      	str	r3, [r4, #44]	; 0x2c
     530:	7e2b      	ldrb	r3, [r5, #24]
     532:	b2db      	uxtb	r3, r3
     534:	7013      	strb	r3, [r2, #0]
	module->buffer_remaining--;
     536:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     538:	3b01      	subs	r3, #1
     53a:	8523      	strh	r3, [r4, #40]	; 0x28
     53c:	e73d      	b.n	3ba <_i2c_slave_interrupt_handler+0xea>
     53e:	46c0      	nop			; (mov r8, r8)
     540:	200000dc 	.word	0x200000dc
     544:	00000ab5 	.word	0x00000ab5
     548:	00000af5 	.word	0x00000af5

0000054c <i2c_read_request_callback>:
 * @return				- void
 *
 * @note				- I2C Read Callback
 **********************************************************************/
void i2c_read_request_callback(	struct i2c_slave_module *const module)
{
     54c:	b510      	push	{r4, lr}
	/* Init i2c packet */
	rw_packet.data_length = DATA_LENGTH;
     54e:	4906      	ldr	r1, [pc, #24]	; (568 <i2c_read_request_callback+0x1c>)
     550:	230a      	movs	r3, #10
     552:	800b      	strh	r3, [r1, #0]
	rw_packet.data        = write_buffer;
     554:	4b05      	ldr	r3, [pc, #20]	; (56c <i2c_read_request_callback+0x20>)
     556:	604b      	str	r3, [r1, #4]

	/* Write buffer to master */
	i2c_slave_write_packet_job(module, &rw_packet);
     558:	4b05      	ldr	r3, [pc, #20]	; (570 <i2c_read_request_callback+0x24>)
     55a:	4798      	blx	r3
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
     55c:	2280      	movs	r2, #128	; 0x80
     55e:	01d2      	lsls	r2, r2, #7
     560:	4b04      	ldr	r3, [pc, #16]	; (574 <i2c_read_request_callback+0x28>)
     562:	61da      	str	r2, [r3, #28]
				break;
			}
	}
	*/
	LED_Toggle(LED0);
}
     564:	bd10      	pop	{r4, pc}
     566:	46c0      	nop			; (mov r8, r8)
     568:	20000080 	.word	0x20000080
     56c:	20000000 	.word	0x20000000
     570:	000002a7 	.word	0x000002a7
     574:	41004400 	.word	0x41004400

00000578 <i2c_write_request_callback>:
 * @return				- void
 *
 * @note				- I2C Write Callback
 **********************************************************************/
void i2c_write_request_callback(struct i2c_slave_module *const module)
{
     578:	b510      	push	{r4, lr}
	/* Init i2c packet */
	rw_packet.data_length = DATA_LENGTH;
     57a:	4906      	ldr	r1, [pc, #24]	; (594 <i2c_write_request_callback+0x1c>)
     57c:	230a      	movs	r3, #10
     57e:	800b      	strh	r3, [r1, #0]
	rw_packet.data        = read_buffer;
     580:	4b05      	ldr	r3, [pc, #20]	; (598 <i2c_write_request_callback+0x20>)
     582:	604b      	str	r3, [r1, #4]


	
	/* Read buffer from master */
	i2c_slave_read_packet_job(module, &rw_packet);
     584:	4b05      	ldr	r3, [pc, #20]	; (59c <i2c_write_request_callback+0x24>)
     586:	4798      	blx	r3
     588:	2280      	movs	r2, #128	; 0x80
     58a:	01d2      	lsls	r2, r2, #7
     58c:	4b04      	ldr	r3, [pc, #16]	; (5a0 <i2c_write_request_callback+0x28>)
     58e:	61da      	str	r2, [r3, #28]
				break;
			}
		}
		*/
	LED_Toggle(LED0);
}
     590:	bd10      	pop	{r4, pc}
     592:	46c0      	nop			; (mov r8, r8)
     594:	20000080 	.word	0x20000080
     598:	20000034 	.word	0x20000034
     59c:	0000027f 	.word	0x0000027f
     5a0:	41004400 	.word	0x41004400

000005a4 <SysTick_Handler>:
}
     5a4:	4770      	bx	lr
	...

000005a8 <configure_i2c_slave>:
{
     5a8:	b570      	push	{r4, r5, r6, lr}
static inline void i2c_slave_get_config_defaults(
		struct i2c_slave_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->enable_scl_low_timeout = false;
     5aa:	4a17      	ldr	r2, [pc, #92]	; (608 <configure_i2c_slave+0x60>)
     5ac:	2100      	movs	r1, #0
     5ae:	7011      	strb	r1, [r2, #0]
	config->sda_hold_time = I2C_SLAVE_SDA_HOLD_TIME_300NS_600NS;
     5b0:	2380      	movs	r3, #128	; 0x80
     5b2:	039b      	lsls	r3, r3, #14
     5b4:	6053      	str	r3, [r2, #4]
	config->buffer_timeout = 65535;
     5b6:	2301      	movs	r3, #1
     5b8:	425b      	negs	r3, r3
     5ba:	8113      	strh	r3, [r2, #8]
	config->address_mode = I2C_SLAVE_ADDRESS_MODE_MASK;
     5bc:	2300      	movs	r3, #0
     5be:	8151      	strh	r1, [r2, #10]
	config->address = 0;
	config->address_mask = 0;
     5c0:	81d1      	strh	r1, [r2, #14]
#ifdef FEATURE_I2C_10_BIT_ADDRESS
	config->ten_bit_address = false;
#endif
	config->enable_general_call_address = false;
     5c2:	7413      	strb	r3, [r2, #16]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->transfer_speed = I2C_SLAVE_SPEED_STANDARD_AND_FAST;
#endif
#if I2C_SLAVE_CALLBACK_MODE == true
	config->enable_nack_on_address = false;
     5c4:	7453      	strb	r3, [r2, #17]
#endif
	config->generator_source = GCLK_GENERATOR_0;
     5c6:	7493      	strb	r3, [r2, #18]
	config->run_in_standby = false;
     5c8:	74d3      	strb	r3, [r2, #19]
	config->pinmux_pad0 = PINMUX_DEFAULT;
     5ca:	6151      	str	r1, [r2, #20]
	config->pinmux_pad1 = PINMUX_DEFAULT;
     5cc:	6191      	str	r1, [r2, #24]
	config->scl_low_timeout  = false;
     5ce:	7713      	strb	r3, [r2, #28]
	config_i2c_slave.address      = SLAVE_ADDRESS;
     5d0:	231a      	movs	r3, #26
     5d2:	8193      	strh	r3, [r2, #12]
	i2c_slave_init(&i2c_slave_instance, CONF_I2C_SLAVE_MODULE, &config_i2c_slave);
     5d4:	4d0d      	ldr	r5, [pc, #52]	; (60c <configure_i2c_slave+0x64>)
     5d6:	490e      	ldr	r1, [pc, #56]	; (610 <configure_i2c_slave+0x68>)
     5d8:	0028      	movs	r0, r5
     5da:	4b0e      	ldr	r3, [pc, #56]	; (614 <configure_i2c_slave+0x6c>)
     5dc:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     5de:	682c      	ldr	r4, [r5, #0]

#if I2C_SLAVE_CALLBACK_MODE == true
	/* Enable global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     5e0:	0020      	movs	r0, r4
     5e2:	4b0d      	ldr	r3, [pc, #52]	; (618 <configure_i2c_slave+0x70>)
     5e4:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     5e6:	231f      	movs	r3, #31
     5e8:	4018      	ands	r0, r3
     5ea:	3b1e      	subs	r3, #30
     5ec:	4083      	lsls	r3, r0
     5ee:	4a0b      	ldr	r2, [pc, #44]	; (61c <configure_i2c_slave+0x74>)
     5f0:	6013      	str	r3, [r2, #0]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     5f2:	682a      	ldr	r2, [r5, #0]
	return (i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_SYNCBUSY);
     5f4:	8a13      	ldrh	r3, [r2, #16]
	while (i2c_slave_is_syncing(module)) {
     5f6:	b21b      	sxth	r3, r3
     5f8:	2b00      	cmp	r3, #0
     5fa:	dbfb      	blt.n	5f4 <configure_i2c_slave+0x4c>

	/* Wait for module to sync */
	_i2c_slave_wait_for_sync(module);

	/* Enable module */
	i2c_hw->CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
     5fc:	6823      	ldr	r3, [r4, #0]
     5fe:	2202      	movs	r2, #2
     600:	4313      	orrs	r3, r2
     602:	6023      	str	r3, [r4, #0]
}
     604:	bd70      	pop	{r4, r5, r6, pc}
     606:	46c0      	nop			; (mov r8, r8)
     608:	20000088 	.word	0x20000088
     60c:	200000a8 	.word	0x200000a8
     610:	42001000 	.word	0x42001000
     614:	00000105 	.word	0x00000105
     618:	000008f1 	.word	0x000008f1
     61c:	e000e100 	.word	0xe000e100

00000620 <configure_i2c_slave_callbacks>:
{
     620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	i2c_slave_register_callback(&i2c_slave_instance, i2c_read_request_callback,	I2C_SLAVE_CALLBACK_READ_REQUEST);
     622:	4c0c      	ldr	r4, [pc, #48]	; (654 <configure_i2c_slave_callbacks+0x34>)
     624:	2202      	movs	r2, #2
     626:	490c      	ldr	r1, [pc, #48]	; (658 <configure_i2c_slave_callbacks+0x38>)
     628:	0020      	movs	r0, r4
     62a:	4f0c      	ldr	r7, [pc, #48]	; (65c <configure_i2c_slave_callbacks+0x3c>)
     62c:	47b8      	blx	r7
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
     62e:	2525      	movs	r5, #37	; 0x25
     630:	5d63      	ldrb	r3, [r4, r5]
     632:	2204      	movs	r2, #4
     634:	4313      	orrs	r3, r2
     636:	5563      	strb	r3, [r4, r5]

	/* Enable address callback */
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
	if (callback_type == I2C_SLAVE_CALLBACK_READ_REQUEST ||
			callback_type == I2C_SLAVE_CALLBACK_WRITE_REQUEST) {
		i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH;
     638:	2602      	movs	r6, #2
     63a:	6823      	ldr	r3, [r4, #0]
     63c:	735e      	strb	r6, [r3, #13]
	i2c_slave_register_callback(&i2c_slave_instance, i2c_write_request_callback, I2C_SLAVE_CALLBACK_WRITE_REQUEST);
     63e:	3a01      	subs	r2, #1
     640:	4907      	ldr	r1, [pc, #28]	; (660 <configure_i2c_slave_callbacks+0x40>)
     642:	0020      	movs	r0, r4
     644:	47b8      	blx	r7
	module->enabled_callback |= (1 << callback_type);
     646:	5d63      	ldrb	r3, [r4, r5]
     648:	2208      	movs	r2, #8
     64a:	4313      	orrs	r3, r2
     64c:	5563      	strb	r3, [r4, r5]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     64e:	6823      	ldr	r3, [r4, #0]
		i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH;
     650:	735e      	strb	r6, [r3, #13]
}
     652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     654:	200000a8 	.word	0x200000a8
     658:	0000054d 	.word	0x0000054d
     65c:	00000265 	.word	0x00000265
     660:	00000579 	.word	0x00000579

00000664 <sys_config>:
 * @return				- void
 *
 * @note				- 
 ******************************************************************************************************/
void sys_config(void)
{
     664:	b510      	push	{r4, lr}
	SysTick_Config(system_gclk_gen_get_hz(GCLK_GENERATOR_0));
     666:	2000      	movs	r0, #0
     668:	4b0c      	ldr	r3, [pc, #48]	; (69c <sys_config+0x38>)
     66a:	4798      	blx	r3
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
     66c:	3801      	subs	r0, #1
     66e:	4b0c      	ldr	r3, [pc, #48]	; (6a0 <sys_config+0x3c>)
     670:	4298      	cmp	r0, r3
     672:	d80d      	bhi.n	690 <sys_config+0x2c>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
     674:	4a0b      	ldr	r2, [pc, #44]	; (6a4 <sys_config+0x40>)
     676:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     678:	480b      	ldr	r0, [pc, #44]	; (6a8 <sys_config+0x44>)
     67a:	6a03      	ldr	r3, [r0, #32]
     67c:	021b      	lsls	r3, r3, #8
     67e:	0a1b      	lsrs	r3, r3, #8
     680:	21c0      	movs	r1, #192	; 0xc0
     682:	0609      	lsls	r1, r1, #24
     684:	430b      	orrs	r3, r1
     686:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
     688:	2300      	movs	r3, #0
     68a:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
     68c:	3307      	adds	r3, #7
     68e:	6013      	str	r3, [r2, #0]

	configure_i2c_slave();
     690:	4b06      	ldr	r3, [pc, #24]	; (6ac <sys_config+0x48>)
     692:	4798      	blx	r3
	configure_i2c_slave_callbacks();
     694:	4b06      	ldr	r3, [pc, #24]	; (6b0 <sys_config+0x4c>)
     696:	4798      	blx	r3
     698:	bd10      	pop	{r4, pc}
     69a:	46c0      	nop			; (mov r8, r8)
     69c:	00000e25 	.word	0x00000e25
     6a0:	00ffffff 	.word	0x00ffffff
     6a4:	e000e010 	.word	0xe000e010
     6a8:	e000ed00 	.word	0xe000ed00
     6ac:	000005a9 	.word	0x000005a9
     6b0:	00000621 	.word	0x00000621

000006b4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     6b4:	b510      	push	{r4, lr}
     6b6:	b082      	sub	sp, #8
     6b8:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     6ba:	4b0e      	ldr	r3, [pc, #56]	; (6f4 <sercom_set_gclk_generator+0x40>)
     6bc:	781b      	ldrb	r3, [r3, #0]
     6be:	2b00      	cmp	r3, #0
     6c0:	d007      	beq.n	6d2 <sercom_set_gclk_generator+0x1e>
     6c2:	2900      	cmp	r1, #0
     6c4:	d105      	bne.n	6d2 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     6c6:	4b0b      	ldr	r3, [pc, #44]	; (6f4 <sercom_set_gclk_generator+0x40>)
     6c8:	785b      	ldrb	r3, [r3, #1]
     6ca:	4283      	cmp	r3, r0
     6cc:	d010      	beq.n	6f0 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     6ce:	201d      	movs	r0, #29
     6d0:	e00c      	b.n	6ec <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     6d2:	a901      	add	r1, sp, #4
     6d4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     6d6:	200c      	movs	r0, #12
     6d8:	4b07      	ldr	r3, [pc, #28]	; (6f8 <sercom_set_gclk_generator+0x44>)
     6da:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     6dc:	200c      	movs	r0, #12
     6de:	4b07      	ldr	r3, [pc, #28]	; (6fc <sercom_set_gclk_generator+0x48>)
     6e0:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     6e2:	4b04      	ldr	r3, [pc, #16]	; (6f4 <sercom_set_gclk_generator+0x40>)
     6e4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     6e6:	2201      	movs	r2, #1
     6e8:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     6ea:	2000      	movs	r0, #0
}
     6ec:	b002      	add	sp, #8
     6ee:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     6f0:	2000      	movs	r0, #0
     6f2:	e7fb      	b.n	6ec <sercom_set_gclk_generator+0x38>
     6f4:	20000040 	.word	0x20000040
     6f8:	00000f3d 	.word	0x00000f3d
     6fc:	00000eb1 	.word	0x00000eb1

00000700 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     700:	4b40      	ldr	r3, [pc, #256]	; (804 <_sercom_get_default_pad+0x104>)
     702:	4298      	cmp	r0, r3
     704:	d031      	beq.n	76a <_sercom_get_default_pad+0x6a>
     706:	d90a      	bls.n	71e <_sercom_get_default_pad+0x1e>
     708:	4b3f      	ldr	r3, [pc, #252]	; (808 <_sercom_get_default_pad+0x108>)
     70a:	4298      	cmp	r0, r3
     70c:	d04d      	beq.n	7aa <_sercom_get_default_pad+0xaa>
     70e:	4b3f      	ldr	r3, [pc, #252]	; (80c <_sercom_get_default_pad+0x10c>)
     710:	4298      	cmp	r0, r3
     712:	d05a      	beq.n	7ca <_sercom_get_default_pad+0xca>
     714:	4b3e      	ldr	r3, [pc, #248]	; (810 <_sercom_get_default_pad+0x110>)
     716:	4298      	cmp	r0, r3
     718:	d037      	beq.n	78a <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     71a:	2000      	movs	r0, #0
}
     71c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     71e:	4b3d      	ldr	r3, [pc, #244]	; (814 <_sercom_get_default_pad+0x114>)
     720:	4298      	cmp	r0, r3
     722:	d00c      	beq.n	73e <_sercom_get_default_pad+0x3e>
     724:	4b3c      	ldr	r3, [pc, #240]	; (818 <_sercom_get_default_pad+0x118>)
     726:	4298      	cmp	r0, r3
     728:	d1f7      	bne.n	71a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     72a:	2901      	cmp	r1, #1
     72c:	d017      	beq.n	75e <_sercom_get_default_pad+0x5e>
     72e:	2900      	cmp	r1, #0
     730:	d05d      	beq.n	7ee <_sercom_get_default_pad+0xee>
     732:	2902      	cmp	r1, #2
     734:	d015      	beq.n	762 <_sercom_get_default_pad+0x62>
     736:	2903      	cmp	r1, #3
     738:	d015      	beq.n	766 <_sercom_get_default_pad+0x66>
	return 0;
     73a:	2000      	movs	r0, #0
     73c:	e7ee      	b.n	71c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     73e:	2901      	cmp	r1, #1
     740:	d007      	beq.n	752 <_sercom_get_default_pad+0x52>
     742:	2900      	cmp	r1, #0
     744:	d051      	beq.n	7ea <_sercom_get_default_pad+0xea>
     746:	2902      	cmp	r1, #2
     748:	d005      	beq.n	756 <_sercom_get_default_pad+0x56>
     74a:	2903      	cmp	r1, #3
     74c:	d005      	beq.n	75a <_sercom_get_default_pad+0x5a>
	return 0;
     74e:	2000      	movs	r0, #0
     750:	e7e4      	b.n	71c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     752:	4832      	ldr	r0, [pc, #200]	; (81c <_sercom_get_default_pad+0x11c>)
     754:	e7e2      	b.n	71c <_sercom_get_default_pad+0x1c>
     756:	4832      	ldr	r0, [pc, #200]	; (820 <_sercom_get_default_pad+0x120>)
     758:	e7e0      	b.n	71c <_sercom_get_default_pad+0x1c>
     75a:	4832      	ldr	r0, [pc, #200]	; (824 <_sercom_get_default_pad+0x124>)
     75c:	e7de      	b.n	71c <_sercom_get_default_pad+0x1c>
     75e:	4832      	ldr	r0, [pc, #200]	; (828 <_sercom_get_default_pad+0x128>)
     760:	e7dc      	b.n	71c <_sercom_get_default_pad+0x1c>
     762:	4832      	ldr	r0, [pc, #200]	; (82c <_sercom_get_default_pad+0x12c>)
     764:	e7da      	b.n	71c <_sercom_get_default_pad+0x1c>
     766:	4832      	ldr	r0, [pc, #200]	; (830 <_sercom_get_default_pad+0x130>)
     768:	e7d8      	b.n	71c <_sercom_get_default_pad+0x1c>
     76a:	2901      	cmp	r1, #1
     76c:	d007      	beq.n	77e <_sercom_get_default_pad+0x7e>
     76e:	2900      	cmp	r1, #0
     770:	d03f      	beq.n	7f2 <_sercom_get_default_pad+0xf2>
     772:	2902      	cmp	r1, #2
     774:	d005      	beq.n	782 <_sercom_get_default_pad+0x82>
     776:	2903      	cmp	r1, #3
     778:	d005      	beq.n	786 <_sercom_get_default_pad+0x86>
	return 0;
     77a:	2000      	movs	r0, #0
     77c:	e7ce      	b.n	71c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     77e:	482d      	ldr	r0, [pc, #180]	; (834 <_sercom_get_default_pad+0x134>)
     780:	e7cc      	b.n	71c <_sercom_get_default_pad+0x1c>
     782:	482d      	ldr	r0, [pc, #180]	; (838 <_sercom_get_default_pad+0x138>)
     784:	e7ca      	b.n	71c <_sercom_get_default_pad+0x1c>
     786:	482d      	ldr	r0, [pc, #180]	; (83c <_sercom_get_default_pad+0x13c>)
     788:	e7c8      	b.n	71c <_sercom_get_default_pad+0x1c>
     78a:	2901      	cmp	r1, #1
     78c:	d007      	beq.n	79e <_sercom_get_default_pad+0x9e>
     78e:	2900      	cmp	r1, #0
     790:	d031      	beq.n	7f6 <_sercom_get_default_pad+0xf6>
     792:	2902      	cmp	r1, #2
     794:	d005      	beq.n	7a2 <_sercom_get_default_pad+0xa2>
     796:	2903      	cmp	r1, #3
     798:	d005      	beq.n	7a6 <_sercom_get_default_pad+0xa6>
	return 0;
     79a:	2000      	movs	r0, #0
     79c:	e7be      	b.n	71c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     79e:	4828      	ldr	r0, [pc, #160]	; (840 <_sercom_get_default_pad+0x140>)
     7a0:	e7bc      	b.n	71c <_sercom_get_default_pad+0x1c>
     7a2:	4828      	ldr	r0, [pc, #160]	; (844 <_sercom_get_default_pad+0x144>)
     7a4:	e7ba      	b.n	71c <_sercom_get_default_pad+0x1c>
     7a6:	4828      	ldr	r0, [pc, #160]	; (848 <_sercom_get_default_pad+0x148>)
     7a8:	e7b8      	b.n	71c <_sercom_get_default_pad+0x1c>
     7aa:	2901      	cmp	r1, #1
     7ac:	d007      	beq.n	7be <_sercom_get_default_pad+0xbe>
     7ae:	2900      	cmp	r1, #0
     7b0:	d023      	beq.n	7fa <_sercom_get_default_pad+0xfa>
     7b2:	2902      	cmp	r1, #2
     7b4:	d005      	beq.n	7c2 <_sercom_get_default_pad+0xc2>
     7b6:	2903      	cmp	r1, #3
     7b8:	d005      	beq.n	7c6 <_sercom_get_default_pad+0xc6>
	return 0;
     7ba:	2000      	movs	r0, #0
     7bc:	e7ae      	b.n	71c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7be:	4823      	ldr	r0, [pc, #140]	; (84c <_sercom_get_default_pad+0x14c>)
     7c0:	e7ac      	b.n	71c <_sercom_get_default_pad+0x1c>
     7c2:	4823      	ldr	r0, [pc, #140]	; (850 <_sercom_get_default_pad+0x150>)
     7c4:	e7aa      	b.n	71c <_sercom_get_default_pad+0x1c>
     7c6:	4823      	ldr	r0, [pc, #140]	; (854 <_sercom_get_default_pad+0x154>)
     7c8:	e7a8      	b.n	71c <_sercom_get_default_pad+0x1c>
     7ca:	2901      	cmp	r1, #1
     7cc:	d007      	beq.n	7de <_sercom_get_default_pad+0xde>
     7ce:	2900      	cmp	r1, #0
     7d0:	d015      	beq.n	7fe <_sercom_get_default_pad+0xfe>
     7d2:	2902      	cmp	r1, #2
     7d4:	d005      	beq.n	7e2 <_sercom_get_default_pad+0xe2>
     7d6:	2903      	cmp	r1, #3
     7d8:	d005      	beq.n	7e6 <_sercom_get_default_pad+0xe6>
	return 0;
     7da:	2000      	movs	r0, #0
     7dc:	e79e      	b.n	71c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7de:	481e      	ldr	r0, [pc, #120]	; (858 <_sercom_get_default_pad+0x158>)
     7e0:	e79c      	b.n	71c <_sercom_get_default_pad+0x1c>
     7e2:	481e      	ldr	r0, [pc, #120]	; (85c <_sercom_get_default_pad+0x15c>)
     7e4:	e79a      	b.n	71c <_sercom_get_default_pad+0x1c>
     7e6:	481e      	ldr	r0, [pc, #120]	; (860 <_sercom_get_default_pad+0x160>)
     7e8:	e798      	b.n	71c <_sercom_get_default_pad+0x1c>
     7ea:	481e      	ldr	r0, [pc, #120]	; (864 <_sercom_get_default_pad+0x164>)
     7ec:	e796      	b.n	71c <_sercom_get_default_pad+0x1c>
     7ee:	2003      	movs	r0, #3
     7f0:	e794      	b.n	71c <_sercom_get_default_pad+0x1c>
     7f2:	481d      	ldr	r0, [pc, #116]	; (868 <_sercom_get_default_pad+0x168>)
     7f4:	e792      	b.n	71c <_sercom_get_default_pad+0x1c>
     7f6:	481d      	ldr	r0, [pc, #116]	; (86c <_sercom_get_default_pad+0x16c>)
     7f8:	e790      	b.n	71c <_sercom_get_default_pad+0x1c>
     7fa:	481d      	ldr	r0, [pc, #116]	; (870 <_sercom_get_default_pad+0x170>)
     7fc:	e78e      	b.n	71c <_sercom_get_default_pad+0x1c>
     7fe:	481d      	ldr	r0, [pc, #116]	; (874 <_sercom_get_default_pad+0x174>)
     800:	e78c      	b.n	71c <_sercom_get_default_pad+0x1c>
     802:	46c0      	nop			; (mov r8, r8)
     804:	42001000 	.word	0x42001000
     808:	42001800 	.word	0x42001800
     80c:	42001c00 	.word	0x42001c00
     810:	42001400 	.word	0x42001400
     814:	42000800 	.word	0x42000800
     818:	42000c00 	.word	0x42000c00
     81c:	00050003 	.word	0x00050003
     820:	00060003 	.word	0x00060003
     824:	00070003 	.word	0x00070003
     828:	00010003 	.word	0x00010003
     82c:	001e0003 	.word	0x001e0003
     830:	001f0003 	.word	0x001f0003
     834:	00090003 	.word	0x00090003
     838:	000a0003 	.word	0x000a0003
     83c:	000b0003 	.word	0x000b0003
     840:	00110003 	.word	0x00110003
     844:	00120003 	.word	0x00120003
     848:	00130003 	.word	0x00130003
     84c:	000d0003 	.word	0x000d0003
     850:	000e0003 	.word	0x000e0003
     854:	000f0003 	.word	0x000f0003
     858:	00170003 	.word	0x00170003
     85c:	00180003 	.word	0x00180003
     860:	00190003 	.word	0x00190003
     864:	00040003 	.word	0x00040003
     868:	00080003 	.word	0x00080003
     86c:	00100003 	.word	0x00100003
     870:	000c0003 	.word	0x000c0003
     874:	00160003 	.word	0x00160003

00000878 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     878:	b530      	push	{r4, r5, lr}
     87a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     87c:	4b0b      	ldr	r3, [pc, #44]	; (8ac <_sercom_get_sercom_inst_index+0x34>)
     87e:	466a      	mov	r2, sp
     880:	cb32      	ldmia	r3!, {r1, r4, r5}
     882:	c232      	stmia	r2!, {r1, r4, r5}
     884:	cb32      	ldmia	r3!, {r1, r4, r5}
     886:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     888:	9b00      	ldr	r3, [sp, #0]
     88a:	4283      	cmp	r3, r0
     88c:	d00b      	beq.n	8a6 <_sercom_get_sercom_inst_index+0x2e>
     88e:	2301      	movs	r3, #1
     890:	009a      	lsls	r2, r3, #2
     892:	4669      	mov	r1, sp
     894:	5852      	ldr	r2, [r2, r1]
     896:	4282      	cmp	r2, r0
     898:	d006      	beq.n	8a8 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     89a:	3301      	adds	r3, #1
     89c:	2b06      	cmp	r3, #6
     89e:	d1f7      	bne.n	890 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     8a0:	2000      	movs	r0, #0
}
     8a2:	b007      	add	sp, #28
     8a4:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     8a6:	2300      	movs	r3, #0
			return i;
     8a8:	b2d8      	uxtb	r0, r3
     8aa:	e7fa      	b.n	8a2 <_sercom_get_sercom_inst_index+0x2a>
     8ac:	000012cc 	.word	0x000012cc

000008b0 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     8b0:	4770      	bx	lr
	...

000008b4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     8b6:	4b0a      	ldr	r3, [pc, #40]	; (8e0 <_sercom_set_handler+0x2c>)
     8b8:	781b      	ldrb	r3, [r3, #0]
     8ba:	2b00      	cmp	r3, #0
     8bc:	d10c      	bne.n	8d8 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     8be:	4f09      	ldr	r7, [pc, #36]	; (8e4 <_sercom_set_handler+0x30>)
     8c0:	4e09      	ldr	r6, [pc, #36]	; (8e8 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     8c2:	4d0a      	ldr	r5, [pc, #40]	; (8ec <_sercom_set_handler+0x38>)
     8c4:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     8c6:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     8c8:	195a      	adds	r2, r3, r5
     8ca:	6014      	str	r4, [r2, #0]
     8cc:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     8ce:	2b18      	cmp	r3, #24
     8d0:	d1f9      	bne.n	8c6 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     8d2:	2201      	movs	r2, #1
     8d4:	4b02      	ldr	r3, [pc, #8]	; (8e0 <_sercom_set_handler+0x2c>)
     8d6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     8d8:	0080      	lsls	r0, r0, #2
     8da:	4b02      	ldr	r3, [pc, #8]	; (8e4 <_sercom_set_handler+0x30>)
     8dc:	50c1      	str	r1, [r0, r3]
}
     8de:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8e0:	20000042 	.word	0x20000042
     8e4:	20000044 	.word	0x20000044
     8e8:	000008b1 	.word	0x000008b1
     8ec:	200000dc 	.word	0x200000dc

000008f0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     8f0:	b500      	push	{lr}
     8f2:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     8f4:	2307      	movs	r3, #7
     8f6:	466a      	mov	r2, sp
     8f8:	7013      	strb	r3, [r2, #0]
     8fa:	3301      	adds	r3, #1
     8fc:	7053      	strb	r3, [r2, #1]
     8fe:	3301      	adds	r3, #1
     900:	7093      	strb	r3, [r2, #2]
     902:	3301      	adds	r3, #1
     904:	70d3      	strb	r3, [r2, #3]
     906:	3301      	adds	r3, #1
     908:	7113      	strb	r3, [r2, #4]
     90a:	3301      	adds	r3, #1
     90c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     90e:	4b03      	ldr	r3, [pc, #12]	; (91c <_sercom_get_interrupt_vector+0x2c>)
     910:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     912:	466b      	mov	r3, sp
     914:	5618      	ldrsb	r0, [r3, r0]
}
     916:	b003      	add	sp, #12
     918:	bd00      	pop	{pc}
     91a:	46c0      	nop			; (mov r8, r8)
     91c:	00000879 	.word	0x00000879

00000920 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     920:	b510      	push	{r4, lr}
     922:	4b02      	ldr	r3, [pc, #8]	; (92c <SERCOM0_Handler+0xc>)
     924:	681b      	ldr	r3, [r3, #0]
     926:	2000      	movs	r0, #0
     928:	4798      	blx	r3
     92a:	bd10      	pop	{r4, pc}
     92c:	20000044 	.word	0x20000044

00000930 <SERCOM1_Handler>:
     930:	b510      	push	{r4, lr}
     932:	4b02      	ldr	r3, [pc, #8]	; (93c <SERCOM1_Handler+0xc>)
     934:	685b      	ldr	r3, [r3, #4]
     936:	2001      	movs	r0, #1
     938:	4798      	blx	r3
     93a:	bd10      	pop	{r4, pc}
     93c:	20000044 	.word	0x20000044

00000940 <SERCOM2_Handler>:
     940:	b510      	push	{r4, lr}
     942:	4b02      	ldr	r3, [pc, #8]	; (94c <SERCOM2_Handler+0xc>)
     944:	689b      	ldr	r3, [r3, #8]
     946:	2002      	movs	r0, #2
     948:	4798      	blx	r3
     94a:	bd10      	pop	{r4, pc}
     94c:	20000044 	.word	0x20000044

00000950 <SERCOM3_Handler>:
     950:	b510      	push	{r4, lr}
     952:	4b02      	ldr	r3, [pc, #8]	; (95c <SERCOM3_Handler+0xc>)
     954:	68db      	ldr	r3, [r3, #12]
     956:	2003      	movs	r0, #3
     958:	4798      	blx	r3
     95a:	bd10      	pop	{r4, pc}
     95c:	20000044 	.word	0x20000044

00000960 <SERCOM4_Handler>:
     960:	b510      	push	{r4, lr}
     962:	4b02      	ldr	r3, [pc, #8]	; (96c <SERCOM4_Handler+0xc>)
     964:	691b      	ldr	r3, [r3, #16]
     966:	2004      	movs	r0, #4
     968:	4798      	blx	r3
     96a:	bd10      	pop	{r4, pc}
     96c:	20000044 	.word	0x20000044

00000970 <SERCOM5_Handler>:
     970:	b510      	push	{r4, lr}
     972:	4b02      	ldr	r3, [pc, #8]	; (97c <SERCOM5_Handler+0xc>)
     974:	695b      	ldr	r3, [r3, #20]
     976:	2005      	movs	r0, #5
     978:	4798      	blx	r3
     97a:	bd10      	pop	{r4, pc}
     97c:	20000044 	.word	0x20000044

00000980 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     980:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     982:	2000      	movs	r0, #0
     984:	4b08      	ldr	r3, [pc, #32]	; (9a8 <delay_init+0x28>)
     986:	4798      	blx	r3
     988:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     98a:	4c08      	ldr	r4, [pc, #32]	; (9ac <delay_init+0x2c>)
     98c:	21fa      	movs	r1, #250	; 0xfa
     98e:	0089      	lsls	r1, r1, #2
     990:	47a0      	blx	r4
     992:	4b07      	ldr	r3, [pc, #28]	; (9b0 <delay_init+0x30>)
     994:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     996:	4907      	ldr	r1, [pc, #28]	; (9b4 <delay_init+0x34>)
     998:	0028      	movs	r0, r5
     99a:	47a0      	blx	r4
     99c:	4b06      	ldr	r3, [pc, #24]	; (9b8 <delay_init+0x38>)
     99e:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     9a0:	2205      	movs	r2, #5
     9a2:	4b06      	ldr	r3, [pc, #24]	; (9bc <delay_init+0x3c>)
     9a4:	601a      	str	r2, [r3, #0]
}
     9a6:	bd70      	pop	{r4, r5, r6, pc}
     9a8:	00000e25 	.word	0x00000e25
     9ac:	0000116d 	.word	0x0000116d
     9b0:	2000000c 	.word	0x2000000c
     9b4:	000f4240 	.word	0x000f4240
     9b8:	20000010 	.word	0x20000010
     9bc:	e000e010 	.word	0xe000e010

000009c0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     9c0:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     9c2:	4b08      	ldr	r3, [pc, #32]	; (9e4 <delay_cycles_ms+0x24>)
     9c4:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     9c6:	4a08      	ldr	r2, [pc, #32]	; (9e8 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     9c8:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     9ca:	2180      	movs	r1, #128	; 0x80
     9cc:	0249      	lsls	r1, r1, #9
	while (n--) {
     9ce:	3801      	subs	r0, #1
     9d0:	d307      	bcc.n	9e2 <delay_cycles_ms+0x22>
	if (n > 0) {
     9d2:	2c00      	cmp	r4, #0
     9d4:	d0fb      	beq.n	9ce <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     9d6:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     9d8:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     9da:	6813      	ldr	r3, [r2, #0]
     9dc:	420b      	tst	r3, r1
     9de:	d0fc      	beq.n	9da <delay_cycles_ms+0x1a>
     9e0:	e7f5      	b.n	9ce <delay_cycles_ms+0xe>
	}
}
     9e2:	bd30      	pop	{r4, r5, pc}
     9e4:	2000000c 	.word	0x2000000c
     9e8:	e000e010 	.word	0xe000e010

000009ec <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     9ec:	b500      	push	{lr}
     9ee:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     9f0:	ab01      	add	r3, sp, #4
     9f2:	2280      	movs	r2, #128	; 0x80
     9f4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     9f6:	780a      	ldrb	r2, [r1, #0]
     9f8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     9fa:	784a      	ldrb	r2, [r1, #1]
     9fc:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     9fe:	788a      	ldrb	r2, [r1, #2]
     a00:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     a02:	0019      	movs	r1, r3
     a04:	4b01      	ldr	r3, [pc, #4]	; (a0c <port_pin_set_config+0x20>)
     a06:	4798      	blx	r3
}
     a08:	b003      	add	sp, #12
     a0a:	bd00      	pop	{pc}
     a0c:	00001035 	.word	0x00001035

00000a10 <config_led>:
 * @return				- void
 *
 * @note				- 
 ******************************************************************************************************/
 void config_led(void)
 {
     a10:	b500      	push	{lr}
     a12:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
     a14:	a901      	add	r1, sp, #4
     a16:	2301      	movs	r3, #1
     a18:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
     a1a:	2200      	movs	r2, #0
     a1c:	708a      	strb	r2, [r1, #2]
	 struct port_config pin_conf;
	 port_get_config_defaults(&pin_conf);

	 pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     a1e:	700b      	strb	r3, [r1, #0]
	 port_pin_set_config(LED_0_PIN, &pin_conf);
     a20:	200e      	movs	r0, #14
     a22:	4b04      	ldr	r3, [pc, #16]	; (a34 <config_led+0x24>)
     a24:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
     a26:	2280      	movs	r2, #128	; 0x80
     a28:	01d2      	lsls	r2, r2, #7
     a2a:	4b03      	ldr	r3, [pc, #12]	; (a38 <config_led+0x28>)
     a2c:	619a      	str	r2, [r3, #24]
	 port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
 }
     a2e:	b003      	add	sp, #12
     a30:	bd00      	pop	{pc}
     a32:	46c0      	nop			; (mov r8, r8)
     a34:	000009ed 	.word	0x000009ed
     a38:	41004400 	.word	0x41004400

00000a3c <config_btn>:
 * @return				- void
 *
 * @note				- 
 ******************************************************************************************************/
 void config_btn(void)
 {
     a3c:	b500      	push	{lr}
     a3e:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
     a40:	a901      	add	r1, sp, #4
     a42:	2300      	movs	r3, #0
     a44:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     a46:	2201      	movs	r2, #1
     a48:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     a4a:	708b      	strb	r3, [r1, #2]
	 port_get_config_defaults(&pin_conf);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     a4c:	200f      	movs	r0, #15
     a4e:	4b02      	ldr	r3, [pc, #8]	; (a58 <config_btn+0x1c>)
     a50:	4798      	blx	r3
 }
     a52:	b003      	add	sp, #12
     a54:	bd00      	pop	{pc}
     a56:	46c0      	nop			; (mov r8, r8)
     a58:	000009ed 	.word	0x000009ed

00000a5c <system_board_init>:

void system_board_init(void)
{
     a5c:	b510      	push	{r4, lr}
 	/*Configure system tick to generate periodic interrupts */
 	SysTick_Config(system_gclk_gen_get_hz(GCLK_GENERATOR_0));
     a5e:	2000      	movs	r0, #0
     a60:	4b0d      	ldr	r3, [pc, #52]	; (a98 <system_board_init+0x3c>)
     a62:	4798      	blx	r3
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
     a64:	3801      	subs	r0, #1
     a66:	4b0d      	ldr	r3, [pc, #52]	; (a9c <system_board_init+0x40>)
     a68:	4298      	cmp	r0, r3
     a6a:	d80d      	bhi.n	a88 <system_board_init+0x2c>
  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
     a6c:	4a0c      	ldr	r2, [pc, #48]	; (aa0 <system_board_init+0x44>)
     a6e:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     a70:	480c      	ldr	r0, [pc, #48]	; (aa4 <system_board_init+0x48>)
     a72:	6a03      	ldr	r3, [r0, #32]
     a74:	021b      	lsls	r3, r3, #8
     a76:	0a1b      	lsrs	r3, r3, #8
     a78:	21c0      	movs	r1, #192	; 0xc0
     a7a:	0609      	lsls	r1, r1, #24
     a7c:	430b      	orrs	r3, r1
     a7e:	6203      	str	r3, [r0, #32]
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
     a80:	2300      	movs	r3, #0
     a82:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
     a84:	3307      	adds	r3, #7
     a86:	6013      	str	r3, [r2, #0]
 	delay_init();
     a88:	4b07      	ldr	r3, [pc, #28]	; (aa8 <system_board_init+0x4c>)
     a8a:	4798      	blx	r3

	config_led();
     a8c:	4b07      	ldr	r3, [pc, #28]	; (aac <system_board_init+0x50>)
     a8e:	4798      	blx	r3
	config_btn();
     a90:	4b07      	ldr	r3, [pc, #28]	; (ab0 <system_board_init+0x54>)
     a92:	4798      	blx	r3

     a94:	bd10      	pop	{r4, pc}
     a96:	46c0      	nop			; (mov r8, r8)
     a98:	00000e25 	.word	0x00000e25
     a9c:	00ffffff 	.word	0x00ffffff
     aa0:	e000e010 	.word	0xe000e010
     aa4:	e000ed00 	.word	0xe000ed00
     aa8:	00000981 	.word	0x00000981
     aac:	00000a11 	.word	0x00000a11
     ab0:	00000a3d 	.word	0x00000a3d

00000ab4 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     ab4:	4b0c      	ldr	r3, [pc, #48]	; (ae8 <cpu_irq_enter_critical+0x34>)
     ab6:	681b      	ldr	r3, [r3, #0]
     ab8:	2b00      	cmp	r3, #0
     aba:	d106      	bne.n	aca <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     abc:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     ac0:	2b00      	cmp	r3, #0
     ac2:	d007      	beq.n	ad4 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     ac4:	2200      	movs	r2, #0
     ac6:	4b09      	ldr	r3, [pc, #36]	; (aec <cpu_irq_enter_critical+0x38>)
     ac8:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     aca:	4a07      	ldr	r2, [pc, #28]	; (ae8 <cpu_irq_enter_critical+0x34>)
     acc:	6813      	ldr	r3, [r2, #0]
     ace:	3301      	adds	r3, #1
     ad0:	6013      	str	r3, [r2, #0]
}
     ad2:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     ad4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     ad6:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     ada:	2200      	movs	r2, #0
     adc:	4b04      	ldr	r3, [pc, #16]	; (af0 <cpu_irq_enter_critical+0x3c>)
     ade:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     ae0:	3201      	adds	r2, #1
     ae2:	4b02      	ldr	r3, [pc, #8]	; (aec <cpu_irq_enter_critical+0x38>)
     ae4:	701a      	strb	r2, [r3, #0]
     ae6:	e7f0      	b.n	aca <cpu_irq_enter_critical+0x16>
     ae8:	2000005c 	.word	0x2000005c
     aec:	20000060 	.word	0x20000060
     af0:	20000014 	.word	0x20000014

00000af4 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     af4:	4b08      	ldr	r3, [pc, #32]	; (b18 <cpu_irq_leave_critical+0x24>)
     af6:	681a      	ldr	r2, [r3, #0]
     af8:	3a01      	subs	r2, #1
     afa:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     afc:	681b      	ldr	r3, [r3, #0]
     afe:	2b00      	cmp	r3, #0
     b00:	d109      	bne.n	b16 <cpu_irq_leave_critical+0x22>
     b02:	4b06      	ldr	r3, [pc, #24]	; (b1c <cpu_irq_leave_critical+0x28>)
     b04:	781b      	ldrb	r3, [r3, #0]
     b06:	2b00      	cmp	r3, #0
     b08:	d005      	beq.n	b16 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     b0a:	2201      	movs	r2, #1
     b0c:	4b04      	ldr	r3, [pc, #16]	; (b20 <cpu_irq_leave_critical+0x2c>)
     b0e:	701a      	strb	r2, [r3, #0]
     b10:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     b14:	b662      	cpsie	i
	}
}
     b16:	4770      	bx	lr
     b18:	2000005c 	.word	0x2000005c
     b1c:	20000060 	.word	0x20000060
     b20:	20000014 	.word	0x20000014

00000b24 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     b24:	b510      	push	{r4, lr}
	switch (clock_source) {
     b26:	2807      	cmp	r0, #7
     b28:	d803      	bhi.n	b32 <system_clock_source_get_hz+0xe>
     b2a:	0080      	lsls	r0, r0, #2
     b2c:	4b16      	ldr	r3, [pc, #88]	; (b88 <system_clock_source_get_hz+0x64>)
     b2e:	581b      	ldr	r3, [r3, r0]
     b30:	469f      	mov	pc, r3
		}

		return 48000000UL;

	default:
		return 0;
     b32:	2000      	movs	r0, #0
     b34:	e027      	b.n	b86 <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc.frequency;
     b36:	4b15      	ldr	r3, [pc, #84]	; (b8c <system_clock_source_get_hz+0x68>)
     b38:	68d8      	ldr	r0, [r3, #12]
     b3a:	e024      	b.n	b86 <system_clock_source_get_hz+0x62>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     b3c:	4b14      	ldr	r3, [pc, #80]	; (b90 <system_clock_source_get_hz+0x6c>)
     b3e:	6a1b      	ldr	r3, [r3, #32]
     b40:	059b      	lsls	r3, r3, #22
     b42:	0f9b      	lsrs	r3, r3, #30
     b44:	4813      	ldr	r0, [pc, #76]	; (b94 <system_clock_source_get_hz+0x70>)
     b46:	40d8      	lsrs	r0, r3
     b48:	e01d      	b.n	b86 <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc32k.frequency;
     b4a:	4b10      	ldr	r3, [pc, #64]	; (b8c <system_clock_source_get_hz+0x68>)
     b4c:	6918      	ldr	r0, [r3, #16]
     b4e:	e01a      	b.n	b86 <system_clock_source_get_hz+0x62>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     b50:	4b0e      	ldr	r3, [pc, #56]	; (b8c <system_clock_source_get_hz+0x68>)
     b52:	681b      	ldr	r3, [r3, #0]
			return 0;
     b54:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     b56:	079b      	lsls	r3, r3, #30
     b58:	d515      	bpl.n	b86 <system_clock_source_get_hz+0x62>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     b5a:	490d      	ldr	r1, [pc, #52]	; (b90 <system_clock_source_get_hz+0x6c>)
     b5c:	2210      	movs	r2, #16
     b5e:	68cb      	ldr	r3, [r1, #12]
     b60:	421a      	tst	r2, r3
     b62:	d0fc      	beq.n	b5e <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
     b64:	4b09      	ldr	r3, [pc, #36]	; (b8c <system_clock_source_get_hz+0x68>)
     b66:	681b      	ldr	r3, [r3, #0]
     b68:	075b      	lsls	r3, r3, #29
     b6a:	d401      	bmi.n	b70 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
     b6c:	480a      	ldr	r0, [pc, #40]	; (b98 <system_clock_source_get_hz+0x74>)
     b6e:	e00a      	b.n	b86 <system_clock_source_get_hz+0x62>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     b70:	2000      	movs	r0, #0
     b72:	4b0a      	ldr	r3, [pc, #40]	; (b9c <system_clock_source_get_hz+0x78>)
     b74:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     b76:	4b05      	ldr	r3, [pc, #20]	; (b8c <system_clock_source_get_hz+0x68>)
     b78:	689b      	ldr	r3, [r3, #8]
     b7a:	041b      	lsls	r3, r3, #16
     b7c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     b7e:	4358      	muls	r0, r3
     b80:	e001      	b.n	b86 <system_clock_source_get_hz+0x62>
		return 32768UL;
     b82:	2080      	movs	r0, #128	; 0x80
     b84:	0200      	lsls	r0, r0, #8
	}
}
     b86:	bd10      	pop	{r4, pc}
     b88:	000012e4 	.word	0x000012e4
     b8c:	20000064 	.word	0x20000064
     b90:	40000800 	.word	0x40000800
     b94:	007a1200 	.word	0x007a1200
     b98:	02dc6c00 	.word	0x02dc6c00
     b9c:	00000f59 	.word	0x00000f59

00000ba0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     ba0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     ba2:	490c      	ldr	r1, [pc, #48]	; (bd4 <system_clock_source_osc8m_set_config+0x34>)
     ba4:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     ba6:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     ba8:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     baa:	7840      	ldrb	r0, [r0, #1]
     bac:	2201      	movs	r2, #1
     bae:	4010      	ands	r0, r2
     bb0:	0180      	lsls	r0, r0, #6
     bb2:	2640      	movs	r6, #64	; 0x40
     bb4:	43b3      	bics	r3, r6
     bb6:	4303      	orrs	r3, r0
     bb8:	402a      	ands	r2, r5
     bba:	01d2      	lsls	r2, r2, #7
     bbc:	2080      	movs	r0, #128	; 0x80
     bbe:	4383      	bics	r3, r0
     bc0:	4313      	orrs	r3, r2
     bc2:	2203      	movs	r2, #3
     bc4:	4022      	ands	r2, r4
     bc6:	0212      	lsls	r2, r2, #8
     bc8:	4803      	ldr	r0, [pc, #12]	; (bd8 <system_clock_source_osc8m_set_config+0x38>)
     bca:	4003      	ands	r3, r0
     bcc:	4313      	orrs	r3, r2
     bce:	620b      	str	r3, [r1, #32]
}
     bd0:	bd70      	pop	{r4, r5, r6, pc}
     bd2:	46c0      	nop			; (mov r8, r8)
     bd4:	40000800 	.word	0x40000800
     bd8:	fffffcff 	.word	0xfffffcff

00000bdc <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     bdc:	2807      	cmp	r0, #7
     bde:	d803      	bhi.n	be8 <system_clock_source_enable+0xc>
     be0:	0080      	lsls	r0, r0, #2
     be2:	4b1e      	ldr	r3, [pc, #120]	; (c5c <system_clock_source_enable+0x80>)
     be4:	581b      	ldr	r3, [r3, r0]
     be6:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     be8:	2017      	movs	r0, #23
     bea:	e036      	b.n	c5a <system_clock_source_enable+0x7e>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     bec:	4a1c      	ldr	r2, [pc, #112]	; (c60 <system_clock_source_enable+0x84>)
     bee:	6a13      	ldr	r3, [r2, #32]
     bf0:	2102      	movs	r1, #2
     bf2:	430b      	orrs	r3, r1
     bf4:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     bf6:	2000      	movs	r0, #0
     bf8:	e02f      	b.n	c5a <system_clock_source_enable+0x7e>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     bfa:	4a19      	ldr	r2, [pc, #100]	; (c60 <system_clock_source_enable+0x84>)
     bfc:	6993      	ldr	r3, [r2, #24]
     bfe:	2102      	movs	r1, #2
     c00:	430b      	orrs	r3, r1
     c02:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     c04:	2000      	movs	r0, #0
		break;
     c06:	e028      	b.n	c5a <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     c08:	4a15      	ldr	r2, [pc, #84]	; (c60 <system_clock_source_enable+0x84>)
     c0a:	8a13      	ldrh	r3, [r2, #16]
     c0c:	2102      	movs	r1, #2
     c0e:	430b      	orrs	r3, r1
     c10:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     c12:	2000      	movs	r0, #0
		break;
     c14:	e021      	b.n	c5a <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     c16:	4a12      	ldr	r2, [pc, #72]	; (c60 <system_clock_source_enable+0x84>)
     c18:	8a93      	ldrh	r3, [r2, #20]
     c1a:	2102      	movs	r1, #2
     c1c:	430b      	orrs	r3, r1
     c1e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     c20:	2000      	movs	r0, #0
		break;
     c22:	e01a      	b.n	c5a <system_clock_source_enable+0x7e>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     c24:	4b0f      	ldr	r3, [pc, #60]	; (c64 <system_clock_source_enable+0x88>)
     c26:	681a      	ldr	r2, [r3, #0]
     c28:	2102      	movs	r1, #2
     c2a:	430a      	orrs	r2, r1
     c2c:	601a      	str	r2, [r3, #0]
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     c2e:	681b      	ldr	r3, [r3, #0]
     c30:	4a0d      	ldr	r2, [pc, #52]	; (c68 <system_clock_source_enable+0x8c>)
     c32:	4013      	ands	r3, r2
     c34:	4a0a      	ldr	r2, [pc, #40]	; (c60 <system_clock_source_enable+0x84>)
     c36:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     c38:	0011      	movs	r1, r2
     c3a:	2210      	movs	r2, #16
     c3c:	68cb      	ldr	r3, [r1, #12]
     c3e:	421a      	tst	r2, r3
     c40:	d0fc      	beq.n	c3c <system_clock_source_enable+0x60>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     c42:	4a08      	ldr	r2, [pc, #32]	; (c64 <system_clock_source_enable+0x88>)
     c44:	6891      	ldr	r1, [r2, #8]
     c46:	4b06      	ldr	r3, [pc, #24]	; (c60 <system_clock_source_enable+0x84>)
     c48:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     c4a:	6851      	ldr	r1, [r2, #4]
     c4c:	6299      	str	r1, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     c4e:	6812      	ldr	r2, [r2, #0]
     c50:	b292      	uxth	r2, r2
     c52:	849a      	strh	r2, [r3, #36]	; 0x24
	return STATUS_OK;
     c54:	2000      	movs	r0, #0
     c56:	e000      	b.n	c5a <system_clock_source_enable+0x7e>
		return STATUS_OK;
     c58:	2000      	movs	r0, #0
}
     c5a:	4770      	bx	lr
     c5c:	00001304 	.word	0x00001304
     c60:	40000800 	.word	0x40000800
     c64:	20000064 	.word	0x20000064
     c68:	0000ff7f 	.word	0x0000ff7f

00000c6c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     c6c:	b530      	push	{r4, r5, lr}
     c6e:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     c70:	22c2      	movs	r2, #194	; 0xc2
     c72:	00d2      	lsls	r2, r2, #3
     c74:	4b1a      	ldr	r3, [pc, #104]	; (ce0 <system_clock_init+0x74>)
     c76:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     c78:	4a1a      	ldr	r2, [pc, #104]	; (ce4 <system_clock_init+0x78>)
     c7a:	6853      	ldr	r3, [r2, #4]
     c7c:	211e      	movs	r1, #30
     c7e:	438b      	bics	r3, r1
     c80:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     c82:	2301      	movs	r3, #1
     c84:	466a      	mov	r2, sp
     c86:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     c88:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     c8a:	4d17      	ldr	r5, [pc, #92]	; (ce8 <system_clock_init+0x7c>)
     c8c:	b2e0      	uxtb	r0, r4
     c8e:	4669      	mov	r1, sp
     c90:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     c92:	3401      	adds	r4, #1
     c94:	2c1c      	cmp	r4, #28
     c96:	d1f9      	bne.n	c8c <system_clock_init+0x20>
	config->run_in_standby  = false;
     c98:	a803      	add	r0, sp, #12
     c9a:	2400      	movs	r4, #0
     c9c:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     c9e:	2501      	movs	r5, #1
     ca0:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     ca2:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     ca4:	4b11      	ldr	r3, [pc, #68]	; (cec <system_clock_init+0x80>)
     ca6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     ca8:	2006      	movs	r0, #6
     caa:	4b11      	ldr	r3, [pc, #68]	; (cf0 <system_clock_init+0x84>)
     cac:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     cae:	4b11      	ldr	r3, [pc, #68]	; (cf4 <system_clock_init+0x88>)
     cb0:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
     cb2:	4b11      	ldr	r3, [pc, #68]	; (cf8 <system_clock_init+0x8c>)
     cb4:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     cb6:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     cb8:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     cba:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     cbc:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     cbe:	466b      	mov	r3, sp
     cc0:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
     cc2:	2306      	movs	r3, #6
     cc4:	466a      	mov	r2, sp
     cc6:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
     cc8:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
     cca:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     ccc:	4669      	mov	r1, sp
     cce:	2000      	movs	r0, #0
     cd0:	4b0a      	ldr	r3, [pc, #40]	; (cfc <system_clock_init+0x90>)
     cd2:	4798      	blx	r3
     cd4:	2000      	movs	r0, #0
     cd6:	4b0a      	ldr	r3, [pc, #40]	; (d00 <system_clock_init+0x94>)
     cd8:	4798      	blx	r3
#endif
}
     cda:	b005      	add	sp, #20
     cdc:	bd30      	pop	{r4, r5, pc}
     cde:	46c0      	nop			; (mov r8, r8)
     ce0:	40000800 	.word	0x40000800
     ce4:	41004000 	.word	0x41004000
     ce8:	00000f3d 	.word	0x00000f3d
     cec:	00000ba1 	.word	0x00000ba1
     cf0:	00000bdd 	.word	0x00000bdd
     cf4:	00000d05 	.word	0x00000d05
     cf8:	40000400 	.word	0x40000400
     cfc:	00000d29 	.word	0x00000d29
     d00:	00000de1 	.word	0x00000de1

00000d04 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     d04:	4a06      	ldr	r2, [pc, #24]	; (d20 <system_gclk_init+0x1c>)
     d06:	6993      	ldr	r3, [r2, #24]
     d08:	2108      	movs	r1, #8
     d0a:	430b      	orrs	r3, r1
     d0c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     d0e:	2201      	movs	r2, #1
     d10:	4b04      	ldr	r3, [pc, #16]	; (d24 <system_gclk_init+0x20>)
     d12:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     d14:	0019      	movs	r1, r3
     d16:	780b      	ldrb	r3, [r1, #0]
     d18:	4213      	tst	r3, r2
     d1a:	d1fc      	bne.n	d16 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     d1c:	4770      	bx	lr
     d1e:	46c0      	nop			; (mov r8, r8)
     d20:	40000400 	.word	0x40000400
     d24:	40000c00 	.word	0x40000c00

00000d28 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     d28:	b570      	push	{r4, r5, r6, lr}
     d2a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     d2c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     d2e:	780d      	ldrb	r5, [r1, #0]
     d30:	022d      	lsls	r5, r5, #8
     d32:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     d34:	784b      	ldrb	r3, [r1, #1]
     d36:	2b00      	cmp	r3, #0
     d38:	d002      	beq.n	d40 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     d3a:	2380      	movs	r3, #128	; 0x80
     d3c:	02db      	lsls	r3, r3, #11
     d3e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     d40:	7a4b      	ldrb	r3, [r1, #9]
     d42:	2b00      	cmp	r3, #0
     d44:	d002      	beq.n	d4c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     d46:	2380      	movs	r3, #128	; 0x80
     d48:	031b      	lsls	r3, r3, #12
     d4a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     d4c:	6848      	ldr	r0, [r1, #4]
     d4e:	2801      	cmp	r0, #1
     d50:	d910      	bls.n	d74 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     d52:	1e43      	subs	r3, r0, #1
     d54:	4218      	tst	r0, r3
     d56:	d134      	bne.n	dc2 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     d58:	2802      	cmp	r0, #2
     d5a:	d930      	bls.n	dbe <system_gclk_gen_set_config+0x96>
     d5c:	2302      	movs	r3, #2
     d5e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     d60:	3201      	adds	r2, #1
						mask <<= 1) {
     d62:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     d64:	4298      	cmp	r0, r3
     d66:	d8fb      	bhi.n	d60 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     d68:	0212      	lsls	r2, r2, #8
     d6a:	4332      	orrs	r2, r6
     d6c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     d6e:	2380      	movs	r3, #128	; 0x80
     d70:	035b      	lsls	r3, r3, #13
     d72:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     d74:	7a0b      	ldrb	r3, [r1, #8]
     d76:	2b00      	cmp	r3, #0
     d78:	d002      	beq.n	d80 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     d7a:	2380      	movs	r3, #128	; 0x80
     d7c:	039b      	lsls	r3, r3, #14
     d7e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     d80:	4a13      	ldr	r2, [pc, #76]	; (dd0 <system_gclk_gen_set_config+0xa8>)
     d82:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
     d84:	b25b      	sxtb	r3, r3
     d86:	2b00      	cmp	r3, #0
     d88:	dbfb      	blt.n	d82 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
     d8a:	4b12      	ldr	r3, [pc, #72]	; (dd4 <system_gclk_gen_set_config+0xac>)
     d8c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     d8e:	4b12      	ldr	r3, [pc, #72]	; (dd8 <system_gclk_gen_set_config+0xb0>)
     d90:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     d92:	4a0f      	ldr	r2, [pc, #60]	; (dd0 <system_gclk_gen_set_config+0xa8>)
     d94:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     d96:	b25b      	sxtb	r3, r3
     d98:	2b00      	cmp	r3, #0
     d9a:	dbfb      	blt.n	d94 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     d9c:	4b0c      	ldr	r3, [pc, #48]	; (dd0 <system_gclk_gen_set_config+0xa8>)
     d9e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     da0:	001a      	movs	r2, r3
     da2:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
     da4:	b25b      	sxtb	r3, r3
     da6:	2b00      	cmp	r3, #0
     da8:	dbfb      	blt.n	da2 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     daa:	4a09      	ldr	r2, [pc, #36]	; (dd0 <system_gclk_gen_set_config+0xa8>)
     dac:	6853      	ldr	r3, [r2, #4]
     dae:	2180      	movs	r1, #128	; 0x80
     db0:	0249      	lsls	r1, r1, #9
     db2:	400b      	ands	r3, r1
     db4:	431d      	orrs	r5, r3
     db6:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
     db8:	4b08      	ldr	r3, [pc, #32]	; (ddc <system_gclk_gen_set_config+0xb4>)
     dba:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     dbc:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
     dbe:	2200      	movs	r2, #0
     dc0:	e7d2      	b.n	d68 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     dc2:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
     dc4:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     dc6:	2380      	movs	r3, #128	; 0x80
     dc8:	029b      	lsls	r3, r3, #10
     dca:	431d      	orrs	r5, r3
     dcc:	e7d2      	b.n	d74 <system_gclk_gen_set_config+0x4c>
     dce:	46c0      	nop			; (mov r8, r8)
     dd0:	40000c00 	.word	0x40000c00
     dd4:	00000ab5 	.word	0x00000ab5
     dd8:	40000c08 	.word	0x40000c08
     ddc:	00000af5 	.word	0x00000af5

00000de0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     de0:	b510      	push	{r4, lr}
     de2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     de4:	4a0b      	ldr	r2, [pc, #44]	; (e14 <system_gclk_gen_enable+0x34>)
     de6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     de8:	b25b      	sxtb	r3, r3
     dea:	2b00      	cmp	r3, #0
     dec:	dbfb      	blt.n	de6 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
     dee:	4b0a      	ldr	r3, [pc, #40]	; (e18 <system_gclk_gen_enable+0x38>)
     df0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     df2:	4b0a      	ldr	r3, [pc, #40]	; (e1c <system_gclk_gen_enable+0x3c>)
     df4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     df6:	4a07      	ldr	r2, [pc, #28]	; (e14 <system_gclk_gen_enable+0x34>)
     df8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     dfa:	b25b      	sxtb	r3, r3
     dfc:	2b00      	cmp	r3, #0
     dfe:	dbfb      	blt.n	df8 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     e00:	4a04      	ldr	r2, [pc, #16]	; (e14 <system_gclk_gen_enable+0x34>)
     e02:	6851      	ldr	r1, [r2, #4]
     e04:	2380      	movs	r3, #128	; 0x80
     e06:	025b      	lsls	r3, r3, #9
     e08:	430b      	orrs	r3, r1
     e0a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
     e0c:	4b04      	ldr	r3, [pc, #16]	; (e20 <system_gclk_gen_enable+0x40>)
     e0e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     e10:	bd10      	pop	{r4, pc}
     e12:	46c0      	nop			; (mov r8, r8)
     e14:	40000c00 	.word	0x40000c00
     e18:	00000ab5 	.word	0x00000ab5
     e1c:	40000c04 	.word	0x40000c04
     e20:	00000af5 	.word	0x00000af5

00000e24 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     e24:	b570      	push	{r4, r5, r6, lr}
     e26:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e28:	4a1a      	ldr	r2, [pc, #104]	; (e94 <system_gclk_gen_get_hz+0x70>)
     e2a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     e2c:	b25b      	sxtb	r3, r3
     e2e:	2b00      	cmp	r3, #0
     e30:	dbfb      	blt.n	e2a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
     e32:	4b19      	ldr	r3, [pc, #100]	; (e98 <system_gclk_gen_get_hz+0x74>)
     e34:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     e36:	4b19      	ldr	r3, [pc, #100]	; (e9c <system_gclk_gen_get_hz+0x78>)
     e38:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e3a:	4a16      	ldr	r2, [pc, #88]	; (e94 <system_gclk_gen_get_hz+0x70>)
     e3c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     e3e:	b25b      	sxtb	r3, r3
     e40:	2b00      	cmp	r3, #0
     e42:	dbfb      	blt.n	e3c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     e44:	4e13      	ldr	r6, [pc, #76]	; (e94 <system_gclk_gen_get_hz+0x70>)
     e46:	6870      	ldr	r0, [r6, #4]
     e48:	04c0      	lsls	r0, r0, #19
     e4a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
     e4c:	4b14      	ldr	r3, [pc, #80]	; (ea0 <system_gclk_gen_get_hz+0x7c>)
     e4e:	4798      	blx	r3
     e50:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     e52:	4b12      	ldr	r3, [pc, #72]	; (e9c <system_gclk_gen_get_hz+0x78>)
     e54:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
     e56:	6876      	ldr	r6, [r6, #4]
     e58:	02f6      	lsls	r6, r6, #11
     e5a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     e5c:	4b11      	ldr	r3, [pc, #68]	; (ea4 <system_gclk_gen_get_hz+0x80>)
     e5e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e60:	4a0c      	ldr	r2, [pc, #48]	; (e94 <system_gclk_gen_get_hz+0x70>)
     e62:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     e64:	b25b      	sxtb	r3, r3
     e66:	2b00      	cmp	r3, #0
     e68:	dbfb      	blt.n	e62 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
     e6a:	4b0a      	ldr	r3, [pc, #40]	; (e94 <system_gclk_gen_get_hz+0x70>)
     e6c:	689c      	ldr	r4, [r3, #8]
     e6e:	0224      	lsls	r4, r4, #8
     e70:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
     e72:	4b0d      	ldr	r3, [pc, #52]	; (ea8 <system_gclk_gen_get_hz+0x84>)
     e74:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     e76:	2e00      	cmp	r6, #0
     e78:	d107      	bne.n	e8a <system_gclk_gen_get_hz+0x66>
     e7a:	2c01      	cmp	r4, #1
     e7c:	d907      	bls.n	e8e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
     e7e:	0021      	movs	r1, r4
     e80:	0028      	movs	r0, r5
     e82:	4b0a      	ldr	r3, [pc, #40]	; (eac <system_gclk_gen_get_hz+0x88>)
     e84:	4798      	blx	r3
     e86:	0005      	movs	r5, r0
     e88:	e001      	b.n	e8e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
     e8a:	3401      	adds	r4, #1
     e8c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
     e8e:	0028      	movs	r0, r5
     e90:	bd70      	pop	{r4, r5, r6, pc}
     e92:	46c0      	nop			; (mov r8, r8)
     e94:	40000c00 	.word	0x40000c00
     e98:	00000ab5 	.word	0x00000ab5
     e9c:	40000c04 	.word	0x40000c04
     ea0:	00000b25 	.word	0x00000b25
     ea4:	40000c08 	.word	0x40000c08
     ea8:	00000af5 	.word	0x00000af5
     eac:	0000116d 	.word	0x0000116d

00000eb0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     eb0:	b510      	push	{r4, lr}
     eb2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     eb4:	4b06      	ldr	r3, [pc, #24]	; (ed0 <system_gclk_chan_enable+0x20>)
     eb6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     eb8:	4b06      	ldr	r3, [pc, #24]	; (ed4 <system_gclk_chan_enable+0x24>)
     eba:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
     ebc:	4a06      	ldr	r2, [pc, #24]	; (ed8 <system_gclk_chan_enable+0x28>)
     ebe:	8853      	ldrh	r3, [r2, #2]
     ec0:	2180      	movs	r1, #128	; 0x80
     ec2:	01c9      	lsls	r1, r1, #7
     ec4:	430b      	orrs	r3, r1
     ec6:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
     ec8:	4b04      	ldr	r3, [pc, #16]	; (edc <system_gclk_chan_enable+0x2c>)
     eca:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     ecc:	bd10      	pop	{r4, pc}
     ece:	46c0      	nop			; (mov r8, r8)
     ed0:	00000ab5 	.word	0x00000ab5
     ed4:	40000c02 	.word	0x40000c02
     ed8:	40000c00 	.word	0x40000c00
     edc:	00000af5 	.word	0x00000af5

00000ee0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     ee0:	b510      	push	{r4, lr}
     ee2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     ee4:	4b0f      	ldr	r3, [pc, #60]	; (f24 <system_gclk_chan_disable+0x44>)
     ee6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     ee8:	4b0f      	ldr	r3, [pc, #60]	; (f28 <system_gclk_chan_disable+0x48>)
     eea:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     eec:	4a0f      	ldr	r2, [pc, #60]	; (f2c <system_gclk_chan_disable+0x4c>)
     eee:	8853      	ldrh	r3, [r2, #2]
     ef0:	051b      	lsls	r3, r3, #20
     ef2:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
     ef4:	8853      	ldrh	r3, [r2, #2]
     ef6:	490e      	ldr	r1, [pc, #56]	; (f30 <system_gclk_chan_disable+0x50>)
     ef8:	400b      	ands	r3, r1
     efa:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     efc:	8853      	ldrh	r3, [r2, #2]
     efe:	490d      	ldr	r1, [pc, #52]	; (f34 <system_gclk_chan_disable+0x54>)
     f00:	400b      	ands	r3, r1
     f02:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
     f04:	0011      	movs	r1, r2
     f06:	2280      	movs	r2, #128	; 0x80
     f08:	01d2      	lsls	r2, r2, #7
     f0a:	884b      	ldrh	r3, [r1, #2]
     f0c:	4213      	tst	r3, r2
     f0e:	d1fc      	bne.n	f0a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
     f10:	4906      	ldr	r1, [pc, #24]	; (f2c <system_gclk_chan_disable+0x4c>)
     f12:	884a      	ldrh	r2, [r1, #2]
     f14:	0203      	lsls	r3, r0, #8
     f16:	4806      	ldr	r0, [pc, #24]	; (f30 <system_gclk_chan_disable+0x50>)
     f18:	4002      	ands	r2, r0
     f1a:	4313      	orrs	r3, r2
     f1c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
     f1e:	4b06      	ldr	r3, [pc, #24]	; (f38 <system_gclk_chan_disable+0x58>)
     f20:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     f22:	bd10      	pop	{r4, pc}
     f24:	00000ab5 	.word	0x00000ab5
     f28:	40000c02 	.word	0x40000c02
     f2c:	40000c00 	.word	0x40000c00
     f30:	fffff0ff 	.word	0xfffff0ff
     f34:	ffffbfff 	.word	0xffffbfff
     f38:	00000af5 	.word	0x00000af5

00000f3c <system_gclk_chan_set_config>:
{
     f3c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
     f3e:	780c      	ldrb	r4, [r1, #0]
     f40:	0224      	lsls	r4, r4, #8
     f42:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
     f44:	4b02      	ldr	r3, [pc, #8]	; (f50 <system_gclk_chan_set_config+0x14>)
     f46:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
     f48:	b2a4      	uxth	r4, r4
     f4a:	4b02      	ldr	r3, [pc, #8]	; (f54 <system_gclk_chan_set_config+0x18>)
     f4c:	805c      	strh	r4, [r3, #2]
}
     f4e:	bd10      	pop	{r4, pc}
     f50:	00000ee1 	.word	0x00000ee1
     f54:	40000c00 	.word	0x40000c00

00000f58 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
     f58:	b510      	push	{r4, lr}
     f5a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     f5c:	4b06      	ldr	r3, [pc, #24]	; (f78 <system_gclk_chan_get_hz+0x20>)
     f5e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     f60:	4b06      	ldr	r3, [pc, #24]	; (f7c <system_gclk_chan_get_hz+0x24>)
     f62:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
     f64:	4b06      	ldr	r3, [pc, #24]	; (f80 <system_gclk_chan_get_hz+0x28>)
     f66:	885c      	ldrh	r4, [r3, #2]
     f68:	0524      	lsls	r4, r4, #20
     f6a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
     f6c:	4b05      	ldr	r3, [pc, #20]	; (f84 <system_gclk_chan_get_hz+0x2c>)
     f6e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
     f70:	0020      	movs	r0, r4
     f72:	4b05      	ldr	r3, [pc, #20]	; (f88 <system_gclk_chan_get_hz+0x30>)
     f74:	4798      	blx	r3
}
     f76:	bd10      	pop	{r4, pc}
     f78:	00000ab5 	.word	0x00000ab5
     f7c:	40000c02 	.word	0x40000c02
     f80:	40000c00 	.word	0x40000c00
     f84:	00000af5 	.word	0x00000af5
     f88:	00000e25 	.word	0x00000e25

00000f8c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
     f8c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     f8e:	78d3      	ldrb	r3, [r2, #3]
     f90:	2b00      	cmp	r3, #0
     f92:	d135      	bne.n	1000 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
     f94:	7813      	ldrb	r3, [r2, #0]
     f96:	2b80      	cmp	r3, #128	; 0x80
     f98:	d029      	beq.n	fee <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
     f9a:	061b      	lsls	r3, r3, #24
     f9c:	2480      	movs	r4, #128	; 0x80
     f9e:	0264      	lsls	r4, r4, #9
     fa0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     fa2:	7854      	ldrb	r4, [r2, #1]
     fa4:	2502      	movs	r5, #2
     fa6:	43ac      	bics	r4, r5
     fa8:	d106      	bne.n	fb8 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
     faa:	7894      	ldrb	r4, [r2, #2]
     fac:	2c00      	cmp	r4, #0
     fae:	d120      	bne.n	ff2 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
     fb0:	2480      	movs	r4, #128	; 0x80
     fb2:	02a4      	lsls	r4, r4, #10
     fb4:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
     fb6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     fb8:	7854      	ldrb	r4, [r2, #1]
     fba:	3c01      	subs	r4, #1
     fbc:	2c01      	cmp	r4, #1
     fbe:	d91c      	bls.n	ffa <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     fc0:	040d      	lsls	r5, r1, #16
     fc2:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     fc4:	24a0      	movs	r4, #160	; 0xa0
     fc6:	05e4      	lsls	r4, r4, #23
     fc8:	432c      	orrs	r4, r5
     fca:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     fcc:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
     fce:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     fd0:	24d0      	movs	r4, #208	; 0xd0
     fd2:	0624      	lsls	r4, r4, #24
     fd4:	432c      	orrs	r4, r5
     fd6:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     fd8:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
     fda:	78d4      	ldrb	r4, [r2, #3]
     fdc:	2c00      	cmp	r4, #0
     fde:	d122      	bne.n	1026 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
     fe0:	035b      	lsls	r3, r3, #13
     fe2:	d51c      	bpl.n	101e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
     fe4:	7893      	ldrb	r3, [r2, #2]
     fe6:	2b01      	cmp	r3, #1
     fe8:	d01e      	beq.n	1028 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
     fea:	6141      	str	r1, [r0, #20]
     fec:	e017      	b.n	101e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
     fee:	2300      	movs	r3, #0
     ff0:	e7d7      	b.n	fa2 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
     ff2:	24c0      	movs	r4, #192	; 0xc0
     ff4:	02e4      	lsls	r4, r4, #11
     ff6:	4323      	orrs	r3, r4
     ff8:	e7dd      	b.n	fb6 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
     ffa:	4c0d      	ldr	r4, [pc, #52]	; (1030 <_system_pinmux_config+0xa4>)
     ffc:	4023      	ands	r3, r4
     ffe:	e7df      	b.n	fc0 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1000:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1002:	040c      	lsls	r4, r1, #16
    1004:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1006:	23a0      	movs	r3, #160	; 0xa0
    1008:	05db      	lsls	r3, r3, #23
    100a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    100c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    100e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1010:	23d0      	movs	r3, #208	; 0xd0
    1012:	061b      	lsls	r3, r3, #24
    1014:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1016:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1018:	78d3      	ldrb	r3, [r2, #3]
    101a:	2b00      	cmp	r3, #0
    101c:	d103      	bne.n	1026 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    101e:	7853      	ldrb	r3, [r2, #1]
    1020:	3b01      	subs	r3, #1
    1022:	2b01      	cmp	r3, #1
    1024:	d902      	bls.n	102c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1026:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1028:	6181      	str	r1, [r0, #24]
    102a:	e7f8      	b.n	101e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    102c:	6081      	str	r1, [r0, #8]
}
    102e:	e7fa      	b.n	1026 <_system_pinmux_config+0x9a>
    1030:	fffbffff 	.word	0xfffbffff

00001034 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1034:	b510      	push	{r4, lr}
    1036:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1038:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    103a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    103c:	2900      	cmp	r1, #0
    103e:	d104      	bne.n	104a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1040:	0943      	lsrs	r3, r0, #5
    1042:	01db      	lsls	r3, r3, #7
    1044:	4905      	ldr	r1, [pc, #20]	; (105c <system_pinmux_pin_set_config+0x28>)
    1046:	468c      	mov	ip, r1
    1048:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    104a:	241f      	movs	r4, #31
    104c:	4020      	ands	r0, r4
    104e:	2101      	movs	r1, #1
    1050:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1052:	0018      	movs	r0, r3
    1054:	4b02      	ldr	r3, [pc, #8]	; (1060 <system_pinmux_pin_set_config+0x2c>)
    1056:	4798      	blx	r3
}
    1058:	bd10      	pop	{r4, pc}
    105a:	46c0      	nop			; (mov r8, r8)
    105c:	41004400 	.word	0x41004400
    1060:	00000f8d 	.word	0x00000f8d

00001064 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1064:	4770      	bx	lr
	...

00001068 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1068:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    106a:	4b05      	ldr	r3, [pc, #20]	; (1080 <system_init+0x18>)
    106c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    106e:	4b05      	ldr	r3, [pc, #20]	; (1084 <system_init+0x1c>)
    1070:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1072:	4b05      	ldr	r3, [pc, #20]	; (1088 <system_init+0x20>)
    1074:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1076:	4b05      	ldr	r3, [pc, #20]	; (108c <system_init+0x24>)
    1078:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    107a:	4b05      	ldr	r3, [pc, #20]	; (1090 <system_init+0x28>)
    107c:	4798      	blx	r3
}
    107e:	bd10      	pop	{r4, pc}
    1080:	00000c6d 	.word	0x00000c6d
    1084:	00000a5d 	.word	0x00000a5d
    1088:	00001065 	.word	0x00001065
    108c:	00001065 	.word	0x00001065
    1090:	00001065 	.word	0x00001065

00001094 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1094:	e7fe      	b.n	1094 <Dummy_Handler>
	...

00001098 <Reset_Handler>:
{
    1098:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    109a:	4a1a      	ldr	r2, [pc, #104]	; (1104 <Reset_Handler+0x6c>)
    109c:	4b1a      	ldr	r3, [pc, #104]	; (1108 <Reset_Handler+0x70>)
    109e:	429a      	cmp	r2, r3
    10a0:	d011      	beq.n	10c6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    10a2:	001a      	movs	r2, r3
    10a4:	4b19      	ldr	r3, [pc, #100]	; (110c <Reset_Handler+0x74>)
    10a6:	429a      	cmp	r2, r3
    10a8:	d20d      	bcs.n	10c6 <Reset_Handler+0x2e>
    10aa:	4a19      	ldr	r2, [pc, #100]	; (1110 <Reset_Handler+0x78>)
    10ac:	3303      	adds	r3, #3
    10ae:	1a9b      	subs	r3, r3, r2
    10b0:	089b      	lsrs	r3, r3, #2
    10b2:	3301      	adds	r3, #1
    10b4:	009b      	lsls	r3, r3, #2
    10b6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    10b8:	4813      	ldr	r0, [pc, #76]	; (1108 <Reset_Handler+0x70>)
    10ba:	4912      	ldr	r1, [pc, #72]	; (1104 <Reset_Handler+0x6c>)
    10bc:	588c      	ldr	r4, [r1, r2]
    10be:	5084      	str	r4, [r0, r2]
    10c0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    10c2:	429a      	cmp	r2, r3
    10c4:	d1fa      	bne.n	10bc <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    10c6:	4a13      	ldr	r2, [pc, #76]	; (1114 <Reset_Handler+0x7c>)
    10c8:	4b13      	ldr	r3, [pc, #76]	; (1118 <Reset_Handler+0x80>)
    10ca:	429a      	cmp	r2, r3
    10cc:	d20a      	bcs.n	10e4 <Reset_Handler+0x4c>
    10ce:	43d3      	mvns	r3, r2
    10d0:	4911      	ldr	r1, [pc, #68]	; (1118 <Reset_Handler+0x80>)
    10d2:	185b      	adds	r3, r3, r1
    10d4:	2103      	movs	r1, #3
    10d6:	438b      	bics	r3, r1
    10d8:	3304      	adds	r3, #4
    10da:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    10dc:	2100      	movs	r1, #0
    10de:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    10e0:	4293      	cmp	r3, r2
    10e2:	d1fc      	bne.n	10de <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    10e4:	4a0d      	ldr	r2, [pc, #52]	; (111c <Reset_Handler+0x84>)
    10e6:	21ff      	movs	r1, #255	; 0xff
    10e8:	4b0d      	ldr	r3, [pc, #52]	; (1120 <Reset_Handler+0x88>)
    10ea:	438b      	bics	r3, r1
    10ec:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    10ee:	4a0d      	ldr	r2, [pc, #52]	; (1124 <Reset_Handler+0x8c>)
    10f0:	6853      	ldr	r3, [r2, #4]
    10f2:	397f      	subs	r1, #127	; 0x7f
    10f4:	430b      	orrs	r3, r1
    10f6:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    10f8:	4b0b      	ldr	r3, [pc, #44]	; (1128 <Reset_Handler+0x90>)
    10fa:	4798      	blx	r3
        main();
    10fc:	4b0b      	ldr	r3, [pc, #44]	; (112c <Reset_Handler+0x94>)
    10fe:	4798      	blx	r3
    1100:	e7fe      	b.n	1100 <Reset_Handler+0x68>
    1102:	46c0      	nop			; (mov r8, r8)
    1104:	00001344 	.word	0x00001344
    1108:	20000000 	.word	0x20000000
    110c:	20000018 	.word	0x20000018
    1110:	20000004 	.word	0x20000004
    1114:	20000018 	.word	0x20000018
    1118:	200000f4 	.word	0x200000f4
    111c:	e000ed00 	.word	0xe000ed00
    1120:	00000000 	.word	0x00000000
    1124:	41004000 	.word	0x41004000
    1128:	00001285 	.word	0x00001285
    112c:	00001131 	.word	0x00001131

00001130 <main>:
*
***************************************************************************************************************************/
#include <main.h>

int main (void)
{
    1130:	b570      	push	{r4, r5, r6, lr}
	system_init();
    1132:	4b0a      	ldr	r3, [pc, #40]	; (115c <main+0x2c>)
    1134:	4798      	blx	r3
	sys_config();
    1136:	4b0a      	ldr	r3, [pc, #40]	; (1160 <main+0x30>)
    1138:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    113a:	4c0a      	ldr	r4, [pc, #40]	; (1164 <main+0x34>)
    113c:	2580      	movs	r5, #128	; 0x80
    113e:	022d      	lsls	r5, r5, #8

		if( port_pin_get_input_level(BUTTON_0_PIN) == SW0_ACTIVE )
		{

			port_pin_toggle_output_level(LED0);
			delay_ms(100);
    1140:	4e09      	ldr	r6, [pc, #36]	; (1168 <main+0x38>)
    1142:	e004      	b.n	114e <main+0x1e>
	port_base->OUTTGL.reg = pin_mask;
    1144:	2380      	movs	r3, #128	; 0x80
    1146:	01db      	lsls	r3, r3, #7
    1148:	61e3      	str	r3, [r4, #28]
    114a:	2064      	movs	r0, #100	; 0x64
    114c:	47b0      	blx	r6
	return (port_base->IN.reg & pin_mask);
    114e:	6a23      	ldr	r3, [r4, #32]
		if( port_pin_get_input_level(BUTTON_0_PIN) == SW0_ACTIVE )
    1150:	422b      	tst	r3, r5
    1152:	d0f7      	beq.n	1144 <main+0x14>
		port_base->OUTSET.reg = pin_mask;
    1154:	2380      	movs	r3, #128	; 0x80
    1156:	01db      	lsls	r3, r3, #7
    1158:	61a3      	str	r3, [r4, #24]
    115a:	e7f8      	b.n	114e <main+0x1e>
    115c:	00001069 	.word	0x00001069
    1160:	00000665 	.word	0x00000665
    1164:	41004400 	.word	0x41004400
    1168:	000009c1 	.word	0x000009c1

0000116c <__udivsi3>:
    116c:	2200      	movs	r2, #0
    116e:	0843      	lsrs	r3, r0, #1
    1170:	428b      	cmp	r3, r1
    1172:	d374      	bcc.n	125e <__udivsi3+0xf2>
    1174:	0903      	lsrs	r3, r0, #4
    1176:	428b      	cmp	r3, r1
    1178:	d35f      	bcc.n	123a <__udivsi3+0xce>
    117a:	0a03      	lsrs	r3, r0, #8
    117c:	428b      	cmp	r3, r1
    117e:	d344      	bcc.n	120a <__udivsi3+0x9e>
    1180:	0b03      	lsrs	r3, r0, #12
    1182:	428b      	cmp	r3, r1
    1184:	d328      	bcc.n	11d8 <__udivsi3+0x6c>
    1186:	0c03      	lsrs	r3, r0, #16
    1188:	428b      	cmp	r3, r1
    118a:	d30d      	bcc.n	11a8 <__udivsi3+0x3c>
    118c:	22ff      	movs	r2, #255	; 0xff
    118e:	0209      	lsls	r1, r1, #8
    1190:	ba12      	rev	r2, r2
    1192:	0c03      	lsrs	r3, r0, #16
    1194:	428b      	cmp	r3, r1
    1196:	d302      	bcc.n	119e <__udivsi3+0x32>
    1198:	1212      	asrs	r2, r2, #8
    119a:	0209      	lsls	r1, r1, #8
    119c:	d065      	beq.n	126a <__udivsi3+0xfe>
    119e:	0b03      	lsrs	r3, r0, #12
    11a0:	428b      	cmp	r3, r1
    11a2:	d319      	bcc.n	11d8 <__udivsi3+0x6c>
    11a4:	e000      	b.n	11a8 <__udivsi3+0x3c>
    11a6:	0a09      	lsrs	r1, r1, #8
    11a8:	0bc3      	lsrs	r3, r0, #15
    11aa:	428b      	cmp	r3, r1
    11ac:	d301      	bcc.n	11b2 <__udivsi3+0x46>
    11ae:	03cb      	lsls	r3, r1, #15
    11b0:	1ac0      	subs	r0, r0, r3
    11b2:	4152      	adcs	r2, r2
    11b4:	0b83      	lsrs	r3, r0, #14
    11b6:	428b      	cmp	r3, r1
    11b8:	d301      	bcc.n	11be <__udivsi3+0x52>
    11ba:	038b      	lsls	r3, r1, #14
    11bc:	1ac0      	subs	r0, r0, r3
    11be:	4152      	adcs	r2, r2
    11c0:	0b43      	lsrs	r3, r0, #13
    11c2:	428b      	cmp	r3, r1
    11c4:	d301      	bcc.n	11ca <__udivsi3+0x5e>
    11c6:	034b      	lsls	r3, r1, #13
    11c8:	1ac0      	subs	r0, r0, r3
    11ca:	4152      	adcs	r2, r2
    11cc:	0b03      	lsrs	r3, r0, #12
    11ce:	428b      	cmp	r3, r1
    11d0:	d301      	bcc.n	11d6 <__udivsi3+0x6a>
    11d2:	030b      	lsls	r3, r1, #12
    11d4:	1ac0      	subs	r0, r0, r3
    11d6:	4152      	adcs	r2, r2
    11d8:	0ac3      	lsrs	r3, r0, #11
    11da:	428b      	cmp	r3, r1
    11dc:	d301      	bcc.n	11e2 <__udivsi3+0x76>
    11de:	02cb      	lsls	r3, r1, #11
    11e0:	1ac0      	subs	r0, r0, r3
    11e2:	4152      	adcs	r2, r2
    11e4:	0a83      	lsrs	r3, r0, #10
    11e6:	428b      	cmp	r3, r1
    11e8:	d301      	bcc.n	11ee <__udivsi3+0x82>
    11ea:	028b      	lsls	r3, r1, #10
    11ec:	1ac0      	subs	r0, r0, r3
    11ee:	4152      	adcs	r2, r2
    11f0:	0a43      	lsrs	r3, r0, #9
    11f2:	428b      	cmp	r3, r1
    11f4:	d301      	bcc.n	11fa <__udivsi3+0x8e>
    11f6:	024b      	lsls	r3, r1, #9
    11f8:	1ac0      	subs	r0, r0, r3
    11fa:	4152      	adcs	r2, r2
    11fc:	0a03      	lsrs	r3, r0, #8
    11fe:	428b      	cmp	r3, r1
    1200:	d301      	bcc.n	1206 <__udivsi3+0x9a>
    1202:	020b      	lsls	r3, r1, #8
    1204:	1ac0      	subs	r0, r0, r3
    1206:	4152      	adcs	r2, r2
    1208:	d2cd      	bcs.n	11a6 <__udivsi3+0x3a>
    120a:	09c3      	lsrs	r3, r0, #7
    120c:	428b      	cmp	r3, r1
    120e:	d301      	bcc.n	1214 <__udivsi3+0xa8>
    1210:	01cb      	lsls	r3, r1, #7
    1212:	1ac0      	subs	r0, r0, r3
    1214:	4152      	adcs	r2, r2
    1216:	0983      	lsrs	r3, r0, #6
    1218:	428b      	cmp	r3, r1
    121a:	d301      	bcc.n	1220 <__udivsi3+0xb4>
    121c:	018b      	lsls	r3, r1, #6
    121e:	1ac0      	subs	r0, r0, r3
    1220:	4152      	adcs	r2, r2
    1222:	0943      	lsrs	r3, r0, #5
    1224:	428b      	cmp	r3, r1
    1226:	d301      	bcc.n	122c <__udivsi3+0xc0>
    1228:	014b      	lsls	r3, r1, #5
    122a:	1ac0      	subs	r0, r0, r3
    122c:	4152      	adcs	r2, r2
    122e:	0903      	lsrs	r3, r0, #4
    1230:	428b      	cmp	r3, r1
    1232:	d301      	bcc.n	1238 <__udivsi3+0xcc>
    1234:	010b      	lsls	r3, r1, #4
    1236:	1ac0      	subs	r0, r0, r3
    1238:	4152      	adcs	r2, r2
    123a:	08c3      	lsrs	r3, r0, #3
    123c:	428b      	cmp	r3, r1
    123e:	d301      	bcc.n	1244 <__udivsi3+0xd8>
    1240:	00cb      	lsls	r3, r1, #3
    1242:	1ac0      	subs	r0, r0, r3
    1244:	4152      	adcs	r2, r2
    1246:	0883      	lsrs	r3, r0, #2
    1248:	428b      	cmp	r3, r1
    124a:	d301      	bcc.n	1250 <__udivsi3+0xe4>
    124c:	008b      	lsls	r3, r1, #2
    124e:	1ac0      	subs	r0, r0, r3
    1250:	4152      	adcs	r2, r2
    1252:	0843      	lsrs	r3, r0, #1
    1254:	428b      	cmp	r3, r1
    1256:	d301      	bcc.n	125c <__udivsi3+0xf0>
    1258:	004b      	lsls	r3, r1, #1
    125a:	1ac0      	subs	r0, r0, r3
    125c:	4152      	adcs	r2, r2
    125e:	1a41      	subs	r1, r0, r1
    1260:	d200      	bcs.n	1264 <__udivsi3+0xf8>
    1262:	4601      	mov	r1, r0
    1264:	4152      	adcs	r2, r2
    1266:	4610      	mov	r0, r2
    1268:	4770      	bx	lr
    126a:	e7ff      	b.n	126c <__udivsi3+0x100>
    126c:	b501      	push	{r0, lr}
    126e:	2000      	movs	r0, #0
    1270:	f000 f806 	bl	1280 <__aeabi_idiv0>
    1274:	bd02      	pop	{r1, pc}
    1276:	46c0      	nop			; (mov r8, r8)

00001278 <__aeabi_uidivmod>:
    1278:	2900      	cmp	r1, #0
    127a:	d0f7      	beq.n	126c <__udivsi3+0x100>
    127c:	e776      	b.n	116c <__udivsi3>
    127e:	4770      	bx	lr

00001280 <__aeabi_idiv0>:
    1280:	4770      	bx	lr
    1282:	46c0      	nop			; (mov r8, r8)

00001284 <__libc_init_array>:
    1284:	b570      	push	{r4, r5, r6, lr}
    1286:	2600      	movs	r6, #0
    1288:	4d0c      	ldr	r5, [pc, #48]	; (12bc <__libc_init_array+0x38>)
    128a:	4c0d      	ldr	r4, [pc, #52]	; (12c0 <__libc_init_array+0x3c>)
    128c:	1b64      	subs	r4, r4, r5
    128e:	10a4      	asrs	r4, r4, #2
    1290:	42a6      	cmp	r6, r4
    1292:	d109      	bne.n	12a8 <__libc_init_array+0x24>
    1294:	2600      	movs	r6, #0
    1296:	f000 f845 	bl	1324 <_init>
    129a:	4d0a      	ldr	r5, [pc, #40]	; (12c4 <__libc_init_array+0x40>)
    129c:	4c0a      	ldr	r4, [pc, #40]	; (12c8 <__libc_init_array+0x44>)
    129e:	1b64      	subs	r4, r4, r5
    12a0:	10a4      	asrs	r4, r4, #2
    12a2:	42a6      	cmp	r6, r4
    12a4:	d105      	bne.n	12b2 <__libc_init_array+0x2e>
    12a6:	bd70      	pop	{r4, r5, r6, pc}
    12a8:	00b3      	lsls	r3, r6, #2
    12aa:	58eb      	ldr	r3, [r5, r3]
    12ac:	4798      	blx	r3
    12ae:	3601      	adds	r6, #1
    12b0:	e7ee      	b.n	1290 <__libc_init_array+0xc>
    12b2:	00b3      	lsls	r3, r6, #2
    12b4:	58eb      	ldr	r3, [r5, r3]
    12b6:	4798      	blx	r3
    12b8:	3601      	adds	r6, #1
    12ba:	e7f2      	b.n	12a2 <__libc_init_array+0x1e>
    12bc:	00001330 	.word	0x00001330
    12c0:	00001330 	.word	0x00001330
    12c4:	00001330 	.word	0x00001330
    12c8:	00001334 	.word	0x00001334
    12cc:	42000800 	.word	0x42000800
    12d0:	42000c00 	.word	0x42000c00
    12d4:	42001000 	.word	0x42001000
    12d8:	42001400 	.word	0x42001400
    12dc:	42001800 	.word	0x42001800
    12e0:	42001c00 	.word	0x42001c00
    12e4:	00000b36 	.word	0x00000b36
    12e8:	00000b32 	.word	0x00000b32
    12ec:	00000b32 	.word	0x00000b32
    12f0:	00000b82 	.word	0x00000b82
    12f4:	00000b82 	.word	0x00000b82
    12f8:	00000b4a 	.word	0x00000b4a
    12fc:	00000b3c 	.word	0x00000b3c
    1300:	00000b50 	.word	0x00000b50
    1304:	00000c08 	.word	0x00000c08
    1308:	00000be8 	.word	0x00000be8
    130c:	00000be8 	.word	0x00000be8
    1310:	00000c58 	.word	0x00000c58
    1314:	00000bfa 	.word	0x00000bfa
    1318:	00000c16 	.word	0x00000c16
    131c:	00000bec 	.word	0x00000bec
    1320:	00000c24 	.word	0x00000c24

00001324 <_init>:
    1324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1326:	46c0      	nop			; (mov r8, r8)
    1328:	bcf8      	pop	{r3, r4, r5, r6, r7}
    132a:	bc08      	pop	{r3}
    132c:	469e      	mov	lr, r3
    132e:	4770      	bx	lr

00001330 <__init_array_start>:
    1330:	000000cd 	.word	0x000000cd

00001334 <_fini>:
    1334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1336:	46c0      	nop			; (mov r8, r8)
    1338:	bcf8      	pop	{r3, r4, r5, r6, r7}
    133a:	bc08      	pop	{r3}
    133c:	469e      	mov	lr, r3
    133e:	4770      	bx	lr

00001340 <__fini_array_start>:
    1340:	000000a5 	.word	0x000000a5
